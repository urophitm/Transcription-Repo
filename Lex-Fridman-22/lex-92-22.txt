 The following is a conversation with Jeremy Howard. He's the founder of Fast AI, a research institute dedicated to making deep learning more accessible. He's also a distinguished research scientist at the University of San Francisco, a former president of Kegel, as well as a top-ranking competitor there. And in general, he's a successful entrepreneur, educator, researcher, and an inspiring personality in the AI community. When someone asks me, how do I get started with deep learning? Fast AI is one of the top places I point them to. It's free, it's easy to get started, it's insightful, and accessible, and if I may say so, it has very little BS. They can sometimes dilute the value of educational content on popular topics like deep learning. Fast AI has a focus on practical application of deep learning and hands-on exploration of the cutting edge that is incredibly both accessible to beginners and useful to experts. This is the Artificial Intelligence Podcast. If you enjoy it, subscribe on YouTube, give it 5 stars and iTunes, support it on Patreon, or simply connect with me on Twitter. Alex Friedman spelled F-R-I-D-M-A-N, and now here's my conversation with Jeremy Howard. What's the first program you have ever written? First program I wrote that I remember would be at high school. I did an assignment where I decided to try to find out if there was better musical scales than the number 12 interval scale. I wrote a program on my Commodore 64 in basic, searched through other scale sizes to see if you could find one where there were more accurate harmonies. Like mid-tone, like you want an extra exactly 3-2 ratio, whereas with a 12 interval scale it's not exactly 3-2, for example. In the Commodore. Well, as they say. In basic on a Commodore 64. What was the interesting music from? Was it just... I did music on my life, so I played saxophone, clarinet, piano, guitar, drums, and whatever. How does that thread go through your life? Where's music today? It's not where I wish it was. For various reasons, it couldn't really keep it going, particularly because I had a lot of problems with RSI, with my fingers, and so I had to cut back anything that used hands and fingers. I hope one day I'll be able to get back to it health-wise. So there's a love for music underlying it all? What's your favorite instrument? saxophone. Baratone saxophone. Well, probably based saxophone, but they're awkward. Well, I always love it when music is coupled with programming. There's something about a brain that utilizes those that emerges with creative ideas. So you've used and studied quite a few programming languages. Can you give an overview of what you've used? What are the pros and cons of each? Well, my favorite programming environment almost certainly was Microsoft Access back in the earlier days. That was visual-based for applications, which is not a good programming language, but the programming environment is fantastic. It's like the ability to create user interfaces, and tie data, and actions to them, and create reports, and all that, as I've never seen anything. As good, there's things nowadays like air table, which are small subsets of that, which people love for good reason, but unfortunately nobody's ever achieved anything like that. What is that? If you could pause on that for a second? Oh, access. Is it a fundamental database? It was a database program that Microsoft produced a part of office, and that kind of withered, but basically it lets you in a totally graphical way, create tables and relationships and queries, and tie them to forms, and set up event handlers and calculations. It was a very complete, powerful system designed for not massive scalable things, but for useful little applications that I loved. So was the connection between Excel and Access? So very close. Access was the relational database equivalent, if you like. People still do a lot of that stuff that should be in Access, in Excel, because they know it. Excel is great as well. But it's just not as rich a programming model as VBA combined with a relational database. So I've always loved relational databases, but today programming on top of relational databases is just a lot more of a headache. You know, you generally either need to kind of, you know, you need something that connects that runs on database server, unless you use SQLite, which has its own issues. Then you kind of often, if you want to get a nice programming model, you'll need to like create an add-on-oh-rm on top, and then add-on-oh, there's all these pieces tied together, and it's just a lot more awkward than it should be. There are people that are trying to make it easier, so that in particular, I think of F-sharp, you know, Don Syme, who, him and his team have done a great job of making something like a database appear in the type system, so you actually get like tab completion for fields and tables and stuff like that. Anyways, so that was kind of, anyway, so like that whole VBA office thing, I guess, was a starting point, which I still miss, and I got into standard visual basic. That's interesting, just to pause on that for a second. It's interesting that you're connecting programming languages to the ease of management of data. Yeah. So in your use of programming languages, you always had a love and a connection with data. I've always been interested in doing useful things for myself and for others, which generally means getting some data and doing something with it, putting it out there again. So that's been my interest throughout. So I also did a lot of stuff with AppleScript back in the early days. So it's kind of nice being able to get the computer and computers to talk to each other and to do things for you. And then I can think that one night, the programming language I most loved then would have been Delphi, which was object Pascal. Created by Anders Halesburg, who previously did Turbo Pascal, and then went on to create.net, and then went on to create TypeScript. Delphi was amazing because it was like a compiled, fast language that was as easy to use as visual basic. Delphi, what is it similar to in more modern languages? Visual basic. Visual basic. Yeah. That compiled fast versions. So I don't know if there's anything quite like it anymore. If you took like C-Sharp or Java and got rid of the virtual machine and replaced it with something, it could compile a small tape binary. I feel like it's where Swift could get to with the new Swift UI and the cross-platform development going on. Like that's one of my dreams is that we'll hopefully get back to where Delphi was. There is actually a free Pascal project nowadays called Lazarus, which is also attempting to kind of recreate Delphi. They're making good progress. So okay, Delphi, that's one of your favorite programming languages. It's programming environments. Again, I've seen Pascal's not a nice language. If you wanted to know specifically about what languages I like, I would definitely pick J, as being an amazingly wonderful language. What's J? J, are you aware of APL? I'm not. Okay. So from doing a little research on work you've done. Okay, so not at all surprising, you're not familiar with it because it's not well known, but it's actually one of the main families of programming languages going back to the late 50s, early 60s. So there was a couple of major directions. One was the kind of Lambda calculus, Solonzo Church direction, which I guess kind of Lisbon's game and whatever, which has a history going back to the early days of computing. The second was the kind of imperative slash our algo similar going under C++. There was a third, which are called a array oriented languages, which started with a paper by a guy called Ken Iverson, which was actually a math theory paper, not a programming paper. It was called notation as a tool for thought. It was the development of a new type of math notation. The idea is that this math notation was much more flexible, expressive, and also well defined than traditional math notation, which is none of those things, math notation is awful. He actually turned that into a programming language, because this was the early 50s, or the late 50s, all the names were available. He called his language programming language, or APL. APL is a implementation of notation as a tool for thought by which he means math notation. Ken and his son went on to do many things, but eventually they actually produced a new language that was built on top of all the learnings of APL. That was called J. J is the most expressive, composable language of beautifully designed language I've ever seen. Does it have object-oriented components? Does that kind of thing? It's an array-oriented language. It's the third path. Are you saying array? array-oriented. It's supposed to be array-oriented. array-oriented means that you generally don't use any loops. The whole thing is done with kind of an extreme version of broadcasting, if you're familiar with that num-cut, num-py-slash-py-thon concept. You do a lot with one line of code. It looks a lot like math notation. Highly compact. The idea is that you can do so much with one line of code. A single screen of code is very unlikely to express your program. You can keep it all in your head and you can clearly communicate it. It's interesting. The APL created two main branches, K and J. J is this kind of like open-source niche community of crazy enthusiasts like me. The other path, K, is fascinating. It's an astonishingly expensive programming language, which many of the world's most ludicrously rich hedge funds use. The entire K machine is so small, it sits inside level three cash on your CPU. It easily wins every benchmark. I've ever seen in terms of data processing speed. You don't come across it very much because it's like $100,000 per CPU to run it. It's like this path of programming languages is just so much, I don't know, so much more powerful in every way than the ones that almost anybody uses every day. So it's all about computation. It's really focusing. It's pretty heavily focused on computation. I mean, so much of programming is data processing by definition, and so there's a lot of things you can do with it. But yeah, there's not much work being done on making like user interface talk here or whatever. I mean, there's some, but they're not great. At the same time, you've done a lot of stuff with Pearl and Python. So what does that fit into the picture of J and K and APL? Well, it's just much more pragmatic. In the end, you kind of have to end up where the libraries are. Because to me, my focus is on productivity. I just want to get stuff done and solve problems. So Pearl was great. I created an email company called FastMail, and Pearl was great because back in the late 90s, early 2000s, it just had a lot of stuff it could do. I still had to write my own monitoring system and my own web framework and whatever, because none of that stuff existed. But it was a super flexible language to do that in. And you used Pearl FastMail used it as a backend. So everything was written in Pearl. Yeah. Yeah. Everything. Everything was Pearl. Why do you think Pearl hasn't succeeded or hasn't dominated the mark that were Python really takes over a lot of the tests? Well, I mean, it did dominate. It was four times everything everywhere. But then the the guy that ran Pearl, Larry Wool, kind of just didn't put the time in anymore. And no project can be successful if there's, you know, this, particularly one that's data with a strong leader that loses that strong leadership. So then Python has kind of replaced it, you know, Python is a lot less elegant language in nearly every way, but it has the data science libraries and a lot of them are pretty great. So I kind of use it because it's the best we have, but it's definitely not good enough. But what do you think the future programming looks like? What do you hope the future programming looks like if we zoom in on the computational fields on data science, on machine learning? I hope Swift is successful. Because the goal is Swift, the way Chris Latner describes it is to be infinitely hackable. And that's what I want. I want something where me and the people I do research with and my students can look at and change everything from top to bottom. There's nothing mysterious and magical and inaccessible. Unfortunately with Python, it's the opposite of that because Python's so slow, it's extremely unhackable. You get to a point where it's like, okay, from here on down at C. So your debugger doesn't work in the same way, your profile doesn't work in the same way, your build system doesn't work in the same way. It's really not very hackable at all. What's the part you would like to be hackable? Is it for the objective of optimizing training of networks, inference and neural networks? Is it performance of the system or is there some non-performance related just? It's everything. In the end, I want to be productive as a practitioner. So that means that, so like at the moment, our understanding of deep learning is incredibly primitive. There's very little we understand. Most things don't work very well even though it works better than anything else out there. There's so many opportunities to make it better. So you look at any domain area, I don't know, speech recognition with deep learning or natural language processing classification with deep learning or whatever. Every time I look at an area with deep learning, I always see like, oh, it's terrible. There's lots and lots of obviously stupid ways to do things that need to be fixed. So that I want to be able to jump in there quickly. Experiment and make them better. You think the programming language has a role in that? Huge role. Yeah. Currently, Python has a big gap in terms of our ability to innovate particularly around recurrent neural networks and natural language processing. It's so slow. The actual loop where we actually loop through words, we have to do that whole thing in Cuda C. So we actually can't innovate with the kernel, the heart of the most important algorithm. And it's just a huge problem. And this happens all over the place. So we hit research limitations. Another example, convolutional neural networks, which are actually the most popular architecture for lots of things, maybe most things in deep learning. We almost certainly should be using sparse convolutional neural networks. But only like two people are because to do it, you have to rewrite all of that Cuda C level stuff. And yeah, just researches and practitioners don't. So like there's just big gaps in like what people actually research on, what people actually implement because of the programming language problem. So you think it's just too difficult to write in Cuda C that a high level programming language like Swift should enable the easier, fully ground, creative stuff with RNNs or with sparse convolutional neural networks. Kind of. Who's a fault? Who's a charge of making it easy for a researcher to play around? No one's a fault. It's just not. He's got to run to it yet. It's just it's hard. And I mean, part of the fault is that we ignored that whole APL kind of direction. Most omni-le everybody did for 60 years, 50 years. But recently, people have been starting to reinvent pieces of that and kind of create some interesting new directions in the compiler technology. So the place where that's particularly happening right now is something called MLIR, which is something that, okay, Chris Latina, the Swift guy is leading. And yeah, because it's actually not going to be swift on its own that solves this problem because the problem is that currently writing a acceptably fast you know, GPU program is too complicated regardless of what language you use. Right. And that's just because if you have to deal with the fact that I've got, you know, 10,000 threads and I have to synchronize between them all and I have to put my thing into grid blocks and think about whoops and all this stuff. It's just it's just so much boilerplate that to do that well, you have to be a specialist at that and it's going to be a year's work to, you know, optimize that algorithm in that way. But with things like tensor comprehensions and tile and MLIR and TVM, there's all these various projects which are all about saying, let's let people create like domain specific languages for tensor computations. These are the kinds of things we do are generally in on the GPU for deep learning and then have a compiler which can optimize that tensor computation. A lot of this work is actually sitting on top of a project called halide which is a mind-blowing project where they came up with such a domain specific language. In fact, two, one domain specific language for expressing, this is what my tensor computation is. And another domain specific language for expressing, this is the kind of the way I want you to structure the compilation of that like do it block by block and do these bits in parallel and they were able to show how you can compress the amount of code by 10X compared to optimized GPU code and get the same performance. So these are the things that are kind of sitting on top of that kind of research and MLIR is pulling a lot of those best practices together. And now we're starting to see what we're done on making all of that directly accessible through Swift so that I could use Swift to kind of write those domain specific languages and hopefully we'll get then Swift Cura kernels written in a very expressive and concise way that looks a bit like J and APL and then Swift layers on top of that and then a Swift UI on top of that and you know it'll be so nice if we can get to that point. Now does it all eventually boil down to Cura and then the GPUs? Unfortunately at the moment it does but one of the nice things about MLIR if AMD ever gets their act together which they probably won't is that they or others could write MLIR backends for other GPUs or other or other tensor computation devices of which today they are increasing number like Graph Core or Vertex AI or whatever. So yeah being able to target lots of backends would be another benefit of this and the market really needs competitions at the moment and really is massively overcharging for their kind of enterprise class cards because there is no serious competition because nobody else is doing the software probably. In the cloud there's some competition right but not really other than TPUs perhaps. TPUs are almost unprogrammable at the moment. So you get the TPUs has the same problem that you can't. It's even worse. So TPUs they Google actually made an explicit decision to make them almost entirely unprogrammable because they felt there was too much IP in there and if they gave people direct access to program them people would learn their secrets. So you can't actually directly program the memory in a TPU. You can't even directly create code that runs on and that you look at on the machine that has the GPU it all goes through a virtual machine. So all you can really do is this kind of cookie cutter thing of like plug-in to high-level stuff together which is just super tedious and annoying and totally unnecessary. So what was the, tell me if you could the origin story of Fast AI? What is the motivation, its mission, its dream? So I guess the founding story is heavily tied to my previous startup which is a company called InLedic which was the first company to focus on deep learning for medicine and I created that because I saw that was a huge opportunity to, there's about a 10x shortage of the number of doctors in the world and the developing world that we need. I expected it would take about 300 years to train enough doctors to meet that gap but I guess that maybe if we used deep learning for some of the analytics we could maybe make it so you don't need as highly trained doctors. For diagnosis. For diagnosis and treatment planning. Where's the biggest benefit just before get to Fast AI? Where's the biggest benefit of AI in medicine that you see today? Not much happening today in terms of like stuff that's actually out there, it's very early but in terms of the opportunity it's to take markets like India and China and Indonesia which have big populations, Africa, small numbers of doctors and provide diagnostic particularly treatment planning and triage kind of on device so that if you do a you know test for malaria or tuberculosis or whatever you immediately get something that even a healthcare worker that's had a month of training can get a very high quality assessment of whether the patient might be at risk and tell you know okay we'll send them off to a hospital. So for example in Africa outside of South Africa there's only five pediatric radiologists for the entire continent so most countries don't have any so if your kid is sick and they need something diagnosed with medical imaging the person, even if you're able to get medical imaging done the person that looks at it will be you know a nurse at best but actually in India for example and China almost no x-rays are read by anybody by any trained professional because they don't have enough so if instead we had an algorithm that could take the most likely high risk 5% and say triage basically say okay someone needs to look at this it would massively change the kind of way that what's possible with medicine in the developing world and remember they have increasingly they have money they're developing well they're not in poor well they're developing well so they have the money so they're building the hospitals they're getting the diagnostic equipment but they just there's no way for a very long time will they be able to have the expertise. Shortage of expertise okay and that's where the deep learning systems can step in and magnify the expertise they do. Exactly. Yeah so you do see just a linger a little bit longer the interaction you do still see the human experts still at the core of these systems. Yeah absolutely. Is there something in medicine that could be automated almost completely? I don't see the point of even thinking about that because we have such a shortage of people. Why would we not why would we want to find a way not to use them? Like we have people so the idea of like even from an economic point of view if you can make them 10x more productive. Getting rid of the person doesn't impact your unit economics at all and it totally involves the fact that there are things people do better than machines so it's just to me that's not a useful way of framing the problem. I guess just to clarify I guess I meant there maybe some problems where you can avoid even going to the expert ever sort of maybe preventative care or some basic stuff. Loing and fruit allowing the expert to focus on the things that are really dead. Well that's what the triage would do right so the triage would say okay this 99% sure there's nothing here so you know that can be done on device and they can just say okay go home. So the experts are being used to look at the stuff which has some chance it's worth looking at which most things is it's not you know it's fine. What do you think we haven't quite meet progress on that yet in terms of the scale of how much AI is applied in the meta? There's a lot of reasons I mean one is it's pretty new I only started in let it can like 2014 and before that like it's hard to express to what degree the medical world was not aware of the opportunities here so I went to RSNA which is the world's largest radiology conference and I told everybody I could you know like I'm doing this thing with deep learning please come and check it out and no one had any idea what I was talking about and no one had any interest in it so like we've come from absolute zero which is hard and then the whole regulatory framework education system everything is just set up to think of doctoring in a very different way. So today there's a small number of people who are deep learning practitioners and doctors at the same time and that we started to see the first ones come out of their PhD programs so that Cahain over in Boston Cambridge has a number of students now who are data science experts, deep learning experts and actual medical doctors, quite a few doctors have completed our first AI course now and are publishing papers and creating journal reading groups in the American Council of Radiology and like it's just setting out but it's going to be a long process they're regulators have to learn how to regulate this they have to build you know guidelines and then the lawyers at hospitals have to develop a new way of understanding that sometimes it makes sense for data to be you know looked at in raw form in large quantities in order to create well changing results. Yeah there's a regulation around data all that it sounds probably the hardest problem but sounds reminiscent of autonomous vehicles as well many of the same regulatory challenges mean the same data challenges. Yeah I mean funnily enough to problem is less the regulation and more the interpretation of that regulation by lawyers in hospitals so HIPAA was designed to it's it to pee and HIPAA is not standing does not stand for privacy it sounds for portability it's actually meant to be a way that data can be used and it was created with lots of gray areas because the idea is that would be more practical and it would help people to use this this legislation to actually share data in a more thoughtful way. Unfortunately it's done the opposite because when a lawyer sees a gray area they see oh if we don't know we won't get sued then we can't do it. So HIPAA is not exactly the problem the problem is more that there's hospital lawyers are not encended to make bold decisions about data portability. Or even to embrace technology that saves lives they more want to not get in trouble for embracing that. Right also it is also saves lives in a very abstract way which is like oh we've been able to release these 100,000 anonymous records I can't point at the specific person whose life that saved I can say like oh we've ended up with this paper which found this result which you know diagnosed a thousand more people than we would have otherwise but it's like which ones were helped it's very abstract. And on the corner side of that you may be able to point to a life that was taken because of something that was yeah or a person whose privacy was violated. It's like oh this specific person you know there was the identified. So identified. Just a fascinating topic we're jumping around we'll get back to fast AI but on the question of privacy data is the fuel for so much innovation in deep learning what's your sense and privacy whether we're talking about Twitter or Facebook YouTube just the technologies like in the medical field that rely on people's data in order to create impact how do we get that right respecting people's privacy and yet creating technology that is learned from data. One of my areas of focus is on doing more with less data which so most vendors unfortunately are strongly encended to find ways to require more data and more computation so Google and IBM being the most obvious IBM. Yeah so what's in you know so Google and IBM both strongly push the idea that you have to be you know that they have more data and more computation and more intelligent people than anybody else and so you have to trust them to do things because nobody else can do it. And Google's very upfront about this like Jeff Dehn has gone out there and given talks and said our goal is to require a thousand times more computation but less people. Our goal is to use the people that you have better and the data you have better and the computation you have better so one of the things that we've discovered is or at least highlighted is that you very very very often don't need much data at all and so the data you already have in your organization will be enough to get data to the art results. So like my starting point would be to kind of say around privacy is a lot of people are looking for ways to share data and aggregate data but I think often that's unnecessary. They assume that they need more data than they do because they're not familiar with the basics of transfer learning which is this critical technique for needing orders of magnitude less data. Is your sense one reason you might want to collect data from everyone is like in the recommender system context where your individual Jeremy Howard's individual data is the most useful for for providing a product that's impactful for you. So for giving you advertisements for recommending to you movies for doing medical diagnosis is your sense we can build with a small amount of data general models they will have a huge impact for most people that we don't need to have data from each individual. On the hall let's say yes I mean there are things like you know recommender systems have this cold start problem where you know Jeremy is a new customer we haven't seen him before so we can't recommend him things based on what else he's bought and liked with us and there's various workarounds to that I can a lot of music programs will start out by saying which of these artists you like which of these albums do you like which of these songs do you like Netflix used to do that nowadays they tend not to people kind of don't like that because they think oh we don't want to bother the user so you could work around that by having some kind of data sharing where you get my marketing record from axiom or whatever and try to question that to me the the benefit to me and to society of saving me five minutes on answering some questions versus the negative externalities of of the privacy issue doesn't add up so I think like a lot of the time the places where people are invading our privacy in order to provide convenience is really about just trying to make them more money and and they move these negative externalities to places that they don't have to pay for them so when you actually see regulations appear that actually cause the companies that create these negative externalities to have to pay for it themselves they say well we can't do it anymore so the cost is actually too high right but for something like medicine yeah I mean the hospital has my you know medical imaging my pathology studies my medical records and also I own my medical data so you can so I help a startup called doc ai one of the things doc ai does is that there's an app you can connect to you know side of health and lab core Walgreens and download your medical data to your phone and then upload it again at your discretion to share it as you wish so with that kind of approach we can share our medical information with the people we want to yeah so control I mean it really being able to control who you share with and so on yeah so that that has a beautiful interesting tangent to but to return back to the origin story of fast ai right so so before I started fast ai I spent a year researching where are the biggest opportunities for deep learning because I knew from my time at Kaggle in particular that deep learning had kind of hit this threshold point where it was rapidly becoming the state of the art approach in every area that adopted it and I'd been working with neural nets for over 20 years I knew that from a theoretical point of view once it hit that point it would do that in kind of just about every domain and so I kind of spend a year researching what are the domains it's going to have the biggest low hanging fruit in the shortest time period I picked medicine but there were so many I could have picked and so there was a kind of level of frustration for me of like okay I'm really glad we've opened up the medical deep learning world and today it's huge as you know but we can't do you know I can't do everything I don't even know like it took like medicine it took me a really long time to even get a sense of like what kind of problem is two medical practitioners to solve what kind of data do they have who has that data so I kind of felt like I need to approach this differently if I want to maximize the positive impact of deep learning rather than me picking an area and trying to become good at it and building something I should let people who are already domain experts in those areas and who already have the data do it themselves so that was the reason for fast AI is to basically try and figure out how to get deep learning into the hands of people who could benefit from it and help them to do so when it's quick and easy and effective away as possible. God it's so sort of empower the domain expert yeah and like partly it's because like I'd like most people in this field my background is very applied and industrial at my first job but was it McKinsey and company I spent 10 years of management consulting I I spend a lot of time with domain experts you know so I kind of respect them and appreciate them and know I know that's where the value generation in society is and so I also know how most of them can't code and most of them don't have the time to invest you know three years in a graduate degree or whatever so it's like how do I upskill those domain experts I think that would be a super powerful thing you know bit bigger societal impact I could have so yeah that was the thinking. So so much of fast AI students and researchers and the things you teach are pragmatically minded right practically minded freaking figuring out ways how to solve real problems and fast right so from your experience what's the difference between theory and practice of deep learning. Well most of the research in the deep mining world is a total waste of time right that's what I was getting at yeah it's it's a problem of in science in general scientists need to be published which means they need to work on things that their peers are extremely familiar with and can recognize an advance in that area so that means that they all need to work on the same thing and so it really and and the thing they work on there's nothing to encourage them to work on things that are practically useful so you get just a whole lot of research which is minor advances and stuff that's been very highly studied and has no significant practical impact. Well the things that really make a difference like I mentioned transfer learning like if we can do better at transfer learning then it's this like world changing thing we're suddenly like lots more people can do world class work with less resources and less data and but almost nobody works on that or another example active learning which is the study of like how do we get more out of the human beings in the loop. That's my favorite topic. Yeah so active learning is great but it's almost nobody working on it because it's just not a trendy thing right now. You know what somebody's so starting to drop down you're saying that nobody is publishing an active learning but there's people inside companies anybody who actually has to solve a problem they're going to innovate an active learning. Yeah everybody kind of reinvents active learning when they actually have to work in practice because they start labeling things and they think gosh this is taking a long time and it's very expensive and then they start thinking well why am I labeling everything I'm only the machines only making mistakes on those two classes they're the hard ones maybe I'll just start labeling those two classes and then you start thinking well why did I do that manually why can I just get the system to tell me which things are going to be hardest. It's an it's an obvious thing to do but yeah it's it's just like like transfer learning it's it's understudied in the academic world just has no reason to care about practical results. The funny thing is like I've only really ever written one paper I hate writing papers and I didn't even write it it was my colleague Sebastian Rudeau who actually wrote it I just did the research for it but it was basically introducing transfer learning successful transfer learning to NLP for the first time and the algorithm is called dual M fit and it actually I actually wrote it for the course for the first day at course I wanted to teach people in LP and I thought I only want to teach people practical stuff and I think the only practical stuff is transfer learning and I couldn't find any examples of transfer learning in NLP so I just did it and I was shocked to find that soon as I did it was you know the basic prototype took a couple of days it smashed the state of the art on one of the most important data sets in a field that I knew nothing about and I just thought well this is ridiculous and so I spoke to Sebastian out and he kindly offered to write it up the results and so we ended up being published in ACL which is the top link with computational linguistics conference so like people do actually care once you do it but I guess it's difficult for maybe like junior researchers or like I don't care whether I get citations or papers or whatever I don't there's nothing in my life that makes that important which is why I've never actually built a derider pick myself but for people who do I guess they have to pick the kind of safe option which is like yeah make a slight improvement on something that everybody's already working on yeah nobody does anything interesting or succeeds in life with the safe option well I mean the nice thing is nowadays everybody is now working on NLP transfer learning because since that time we've had GPT and GPT2 and Bert and you know it's like it's so yeah once you show that something's possible everybody jumps in I guess so I hope I hope to be a part of and I hope to see more innovation and active learning in the same way I think yeah I'm trying to learn and active learning are fascinating public open work I actually helped start a startup called platform AI which is really all about active learning and yeah it's been interesting trying to kind of see what research is out there and make the most of it and this basically none so we've had to do all our own research once again and just as you described can you tell the story of the Stanford competition Don Bench and fast AI's achievement on it? Sure so something which I really enjoy is that I basically teach two courses a year the practical deep learning for coders which is kind of the introductory course and then cutting edge deep learning for coders which is the kind of research level course and while I teach those courses I have a I basically have a big office at the University of San Francisco it'd be enough for like 30 people and I invite anybody any student who wants to come and hang out with me while I build the course and so generally it's full and so we have 20 or 30 people in a big office with nothing to do but study deep learning so as during one of these times that somebody in the group said oh there's a thing called Don Bench that looks interesting and I'll say what the hell is that I'm gonna sit out some competition to see how quickly you can train a model seems kind of not exactly relevant to what we're doing but it sounds like the kind of thing which you might be interested in and I checked it out and I said oh crap here's only 10 days till it's over it's pretty much too late and we're kind of busy trying to teach this course yeah maybe like make an interesting case study for the course like it's all the stuff we're already doing why don't we just put together our current best practices and our ideas so me and I guess about four students just decided to give it a go and we focused on this small one called sci-fi 10 which is 32 by 32 pixel images can you say what Don Bench is yeah so it's a competition to train a model as fast as possible it was run by Stanford and as cheap as possible too that's also another one first cheapest possible and there was a couple of categories image net and sci-fi 10 so image net says big 1.3 million image thing that took a couple of days to train remember a friend of mine Pete Warden who's now at Google I remember he told me how he trained image net a few years ago and he basically like had this little granny flat out the back that he turned into his image net training center and he figured you know after like a year of work he figured out how to train it in like a 10 days or something there's like that was a big job well sci-fi 10 at that time you could train in a few hours you know it's much smaller and easier so we thought we'd try sci-fi 10 and yeah I've really never done that before like I'd never really like things like using more than one GP GPU at a time was something I tried to avoid because to me it's like very against the whole idea of accessibility is should we do things with one GPU I mean have you asked in the past before after having accomplished something how do I do this faster much faster oh always but it's always for me it's always how do I make it much faster on a single GPU that a normal person could afford in their day-to-day life it's not how could I do it faster by you know having a huge data center because to me it's all about like as many people should better use something as possible without fasting around with infrastructure so anyways in this case it's like well we can GP users just by renting a AWS machine so we thought we'd try that and yeah basically using the stuff we were already doing we were able to get you know the speed you know within a few days we had the speed down to I don't know a very small number of minutes I can't remember exactly how many minutes it was but it might have been like 10 minutes or something and so yeah we found ourselves at the top of the leaderboard easily for both time and money which really shocked me because the other people competing this were like Google and Intel and stuff were like no well not more about this stuff than I think we do so then we emboldened we thought let's try the image net one two I mean it seemed way out of our league but our goal was to get under 12 hours and we did which was really exciting and but we didn't put anything up on the leaderboard but we were down to like 10 hours but then Google put in some like five hours or something and we're just like oh we're so screwed but we kind of thought well keep trying you know if Google could do it and I mean Google did on five hours on some on like a TPU pod or something like a lot of hardware and but we kind of had a bunch of ideas to try like a really simple thing was why are we using these big images they're like 224 or 256 but 256 pixels you know why don't we try small ones and just elaborate there's a constraint on the accuracy that your train model is supposed to achieve yeah you got to achieve 93 percent I think it was for a mitch net exactly which is very tough so you have to yeah 93 percent like they they they they picked a good threshold it was a little bit higher than what the most commonly used resident 50 model could achieve at that time so yeah so it's quite a difficult problem to solve but yeah we realized if we actually just use 64 by 64 images a trained a pretty good model and then we could take that same model and just give it a couple of epochs to learn 224 by 224 images and it was basically already trained it makes a lot of sense like if you teach somebody like here's what a dog looks like and you show them low res versions and then you say here's a really clear picture of a dog they already know what a dog looks like so that like just we we jumped to the front and we ended up winning parts of that competition we actually ended up doing a distributed version over multiple machines a couple of months later and ended up at the top of the leaderboard we had 18 minutes yeah and it was and people have just kept on blasting through again and again since then so what's your view on multi GPU or multiple machine training in general as as a way to speed cut up I think is largely a waste of time both multi GPU on a single machine and yeah particularly multi machines because it's just clunky multi GPUs is less clunky than it used to be but to me anything that slows down your iteration speed is a waste of time so you could maybe do your very last you know perfecting of the model on multi GPUs if you need to but so for example I think doing stuff on the image net is generally a waste of time why test things on 1.3 million images most of us don't use 1.3 million images and we've also done research that shows that doing things in a smaller subset of images gives you the same relative answers anyway so from a research point of view why waste that time so actually I released a couple of new data sets recently one is called image net the French image net which is a small subset of image net which is designed to be easy to classify what's how do you spell image net it's got an extra t and e at the end because it's very French am I okay yeah and then I can and then another one called image wolf which is a subset of image net that only contains dog breeds and that's a hard one right that's a hard one yeah and I've discovered that if you just look at these two subsets you can train things on a single GPU in 10 minutes and the results you get directly transferable to image net nearly all the time and so now I'm starting to see some researchers start to use these smaller data sets so deeply love the way you think because I think you might have written a blog post saying that sort of going these big data sets is encouraging people to nothing creatively absolutely so you're two it sort of constrains you to train on large resources and because you have these resources you think more resources will be better and then you start so like for some somehow you kill the creativity yeah and even worse than that Lex I keep hearing from people who say I decided not to get into deep learning because I don't believe it's accessible to people outside of Google to do useful work so like I see a lot of people make an explicit decision to not learn this incredibly valuable tool because they've they've drunk the Google call aid which is that only Google's big enough and smart enough to do it and I just find that so disappointing and it's so wrong and I think all the major breakthroughs in AI in the next 20 years will be doable on a single GPU like I would I would say my sense is all the big sort of well let's put it this way none of the big breakthroughs of the last 20 years have required multiple GPUs right so like batch norm relier dropout to demonstrate that there's something to them every one of them not only the required multiple GPUs against the original Gens didn't require multiple GPUs well and and we've actually recently shown that you don't even need Gens so we've developed um GAN level outcomes without needing GANs and we can now do it with again by using transfer learning we can do it in a couple of hours on a single GPU you can generate a mod like without the adversarial point yeah so we've found lost functions that work super well without the adversarial part and then one of our students Skycord Jason Antich has created a system called de-oldify which uses this technique to colorize old black and white movies you can do it on a single GPU color as a whole movie in a couple of hours and one of the things that Jason and I did together was we figured out how to add a little bit of GAN at the very end which it turns out for colorization makes it just a bit prider and nicer and then Jason did masses of experiments to figure out exactly how much to do but it's still all done on his whole machine on a single GPU in his lounge room and like if you think about like colorizing Hollywood movies that sounds like something a huge studio would have to do but he has the world's best results on this there's this problem of microphones we're just talking to microphones now yeah it's such a pain in the ass to have these microphones to get good quality audio and I tried to see if it's possible to plop down a bunch of cheap sensors and reconstruct higher quality audio from multiple sources because right now I haven't seen work from okay we can say you're an expensive mics automatically combining audio from multiple sources to improve the combined audio right people haven't done that and that feels like a learning problem right so hopefully somebody can well I mean it's it's evidently doable and it should have been done by now I feel I felt the same way about computational photography four years ago that's right why are we investing in big lenses when three cheap lenses plus actually a little bit of intentional movement so like hold you know like take a few frames gives you enough information to get excellent sub-pixil resolution which particularly with deep learning you would know exactly what you meant to be looking at we can totally do the same thing with audio I think the madness that hasn't been done yet I've been progressing the photography company photography is basically standard now so the the the Google pixel night light I don't know if you've ever tried it but it's astonishing you take a picture an almost pitch black and you get back a very high quality image and it's not because of the lens same stuff with like adding the bokeh to the you know the the background blurring it's done computationally this is the pixel here yeah basically the everybody now is doing most of the fanciest stuff on their phones with computational photography and also increasingly people are putting more than one lens on the back of the camera so the same will happen for audio for sure and there's applications in the audio side if you look at an Alexa type device most people I've seen especially I worked at Google before when you look at noise back on removal you don't think of multiple sources of audio you don't play with that as much as I would hope people but I mean you can still do it even with one like again it's not not much work's been done in this area so we're actually going to be releasing an audio library soon which hopefully will encourage development of this because it's so underused the basic approach we used for our super resolution which Jason uses for de-autify of generating high quality images the exact same approach would work for audio no one's done it yet but it would be a couple of months work okay also learning rate in terms of the Don Bench there's some magic on learning rate that you played around with it's interesting yeah so this is all work that came from a guy called Leslie Smith Leslie's a researcher who like us cares a lot about just the practicalities of training neural networks quickly inaccurately which you would think is what everybody should care about but almost nobody does and he discovered something very interesting which he calls super convergence which is there are certain networks that with certain settings of high parameters could suddenly be trained 10 times faster by using a 10 times higher learning rate now no one published that paper because it's not an area of kind of active research in the academic world no academics recognize this is important and also deep learning in academia is not considered a experimental science so unlike in physics where you could say like I just saw us a subatomic particle do something which the theory doesn't explain you could publish that without an explanation and then the next 60 years people can try to work out how to explain it we don't allow this in the deep learning world so it's it's literally impossible for Leslie to publish a paper that says I've just seen something amazing happen this thing trained 10 times faster than it should have I don't know why and so the reviewers were like we can't publish that because you don't know why so anyway that's important to pause on because there's so many discoveries that would need to start like that every every other scientific field I know of works of that way I don't know why hours is uniquely disinterested in publishing unexplained experimental results but there it is so it wasn't published having said that I read a lot more unpublished papers and published papers because that's where you find the interesting insights so I absolutely read this paper and I was just like this is astonishingly mind blowing and weird and awesome and like why isn't everybody only talking about this because like if you can train these things 10 times faster they also generalize better because you're you're doing less epochs which means you look at the data less you get better accuracy so I've been kind of studying that ever since and eventually Leslie kind of figured out a lot of how to get this done and we added minor tweaks and a big part of the trick is starting at a very low learning rate very gradually increasing it so as you're training your model you take very small steps at the start and you gradually make them bigger and bigger and to all eventually you're taking much bigger steps than anybody thought was possible there's a few other little tricks to make it work but of it basically we can reliably get super convergence and so for the dawn bench thing we were using just much higher learning rates than people expected to work what do you think the future of I mean it makes so much sense for that to be a critical hyperparameter learning rate that you vary what do you think the future of learning rate magic looks like well there's been a lot of great work in the last 12 months in this area it's and people are increasingly realizing that optimites like we just have no idea really how optimizes work and the combination of weight decay which is how we regularize optimizers and the learning rate and then other things like the epsilon we use in the atom optimizer they all work together in weird ways and different parts of the model this is another thing we've done a lot of work on is research into how different parts of the model should be trained at different rates in different ways so we do something we call discriminative learning rates which is really important particularly for transfer learning so really I think in the last 12 months a lot of people have realized that this all this stuff is important there's been a lot of great work coming out and we're starting to see algorithms appear which have very very few diels if any that you have to touch so like that I think what's going to happen is the idea of a learning rate well it almost already has disappeared in the latest research and instead it's just like you know we know enough about how to interpret the gradients and the change of gradients we see to know how to set every parameter they're going to wait it so you see the future of of deep learning where really where's the input of a human expert needed in the future well hopefully the input of the human expert will be almost entirely unneeded from the deep learning point of view so again like Google's approach to this is to try and use thousands of times more compute to run lots and lots of models at the same time and hopefully one of them is good. Not all melkin of melkin of stuff which I think is insane. When you better understand the mechanics of how models learn you don't have to try a thousand different models to find which one happens to work the best you can just jump straight to the best one which means that it's more accessible in terms of compute cheaper and also with less hyper parameters to set it means you don't need deep learning experts to train your deep learning model for you which means that domain experts can do more of the work which means that now you can focus the human time on the kind of interpretation the data gathering identifying model errors and stuff like that. Yeah the data side how often do you work with data these days in terms of the cleaning looking at like Darwin looked at different species while traveling about do you look at data I have you in your roots and Kaggle always yeah yeah I mean it's a key part of our course is like before we train a model in the course we see how to look at the data and then after first thing we do after we train our first model which we find tune an image net model for five minutes and then the thing we immediately do after that is we learn how to analyze the results of the model by looking at examples of misclassified images looking at a classification matrix and then doing like research on Google to learn about the kinds of things that it's misclassifying so to me one of the really cool things about machine learning models in general is that you can interpret them they tell you about things like what are the most important features which groups you misclassifying and they help you become a domain expert more quickly because you can focus your time on the bits that the model is telling you it is important so it lets you deal with things like data leakage for example if it says oh the main feature I'm looking at is customer ID you know and you're like oh customer ID should be predictive and then you can talk to the people that manage customer IDs and they'll tell you like oh yes as soon as a customer's application is accepted we add a one on the end of their customer ID or something you know yeah so yeah model looking at data particularly from the lens of which parts of the data the model says it's important it's super important yeah and using kind of using the model to almost debug the data to learn more about this actually what are the different cloud options for training on networks the last question related to Don bench well it's part of a lot of the work you do but from a perspective of performance I think you've written this in a blog post there's AWS there's a TPU from Google what's your sense with the future holds what would you recommend now right in terms of uh so from a hardware point of view Google's TPUs and the best Nvidia GPUs are similar I mean maybe the TPUs are like 30% faster but they're also much harder to program where there isn't a clear later in terms of hardware right now although much more importantly the GPU Nvidia GPUs are much more programmable they've got much more written for all them so like that's the clear leader for me and where I would spend my time as a researcher and practitioner but in terms of the platform I mean we're super lucky now with stuff like Google GCP Google Cloud and AWS that you can access a GPU pretty quickly and easily but I mean for AWS it's still too hard like you have to find an AMI and get the instance running and then install the software you want and blah blah blah GCP is still is currently the the best way to get started on a full server environment because they have a fantastic fast AI and pie torch ready to go instance which has all the courses pre-installed it has Jupiter notebook pre-running Jupiter notebook is this wonderful interactive computing system which everybody basically should be using for any kind of data driven research but then even better than that are there are platforms like salamander which we own and paper space where literally you click a single button and it pops up and you put a notebook straight away without any kind of installation or anything and all the cost notebooks are all pre-installed so like for me we this is one of the things we spent a lot of time kind of curating and working on because when we first started our courses the biggest problem was people dropped out of lesson one because they couldn't get an AWS instance running so things are so much better now and like we actually have if you got a cost up faster AI the first thing it says is here's how to get started with your GPU and there's like you just click on the link and you click start and it's it will you will go GCP I have to confess I've never used the Google GCP yeah GCP gives you $300 of compute for free which is really nice that as I say a salamander and paper space are even even easier still okay so the from the perspective of deep learning frameworks you work with fast AI the good is framework and PyTorch intensive though what are the strengths of each platform your perspective so in terms of what we've done our research on and taught in our course we started with theano and carus and then we switched to tensorflow and carus and then we switched to PyTorch and then we switched to PyTorch and fast AI and that that kind of reflects a growth and development of the ecosystem of deep learning libraries. Theano and tensorflow were great but were much harder to teach and to do research and development on because they define what's called a computational graph up front the static graph where you basically have to say here are all the things that I'm going to eventually do in my model and then later on you say okay do those things with this data and you can't like debug them you can't do them step by step you can't program them interactively in a Jupyter notebook and so forth. PyTorch was not the first but PyTorch was certainly the the strongest entrant to come along and say let's not do it that way let's just use normal Python and everything you know about in Python is just going to work and we'll figure out how to make that run on the GPU as and when necessary. That turned out to be a huge a huge leap in terms of what we could do with our research and what we could do with our teaching and because it was a limiting. Yeah I mean it was critical for us for something like Dawn Bench to be able to rapidly try things it's just so much harder to be a researcher and practitioner when you have to do everything up front and you can inspect it. Problem with PyTorch is it's not at all accessible to newcomers because you have to like write your own training loop and manage the gradients and all this stuff and it's also like not great for researchers because you're spending your time dealing with all this boilerplate and overhead rather than thinking about your algorithm. So we ended up writing this very multi-layered API that at the top level you can train a state of the neural network and three lines of code and which kind of talks to an API which talks to an API which talks to an API which like you can dive into it any level and get progressively closer to the machine kind of levels of control and this is the first AI library. That's been critical for us and for our students and for lots of people that have won big learning competitions with it and written academic papers with it. It's made a big difference. We're still limited though by Python and particularly this problem with things like current neural nets say where you just can't change things unless you accept it going so slowly that it's impractical. So in the latest incarnation of the course and with some of the research we're still now starting to do some stuff in Swift. I think we're three years away from that being super practical but I'm in no hurry I'm very happy to invest the time to get there but you know with that we actually already have a nascent version of the first AI library for vision running on Swift. Because Python for TensorFlow is not going to cut it. It's just a disaster. What they did was they tried to replicate the bits that people were saying they like about PyTorch. The it's kind of interactive computation but they didn't actually change their foundational runtime components. So they kind of added this like syntax sugar they call TFEGA TensorFlow EGA which makes it look a lot like PyTorch but it's 10 times slower than PyTorch to actually do a step. So because they didn't invest the time in like retooling the foundations because their code basis so horribly complex. Yeah I think it's probably very difficult to do that kind of rejoin. Yeah well particularly the way TensorFlow was written it was written by a lot of people very quickly in a very disorganized way. So like when you actually look in the code as I do often I'm always just like oh god what were they thinking? It's just it's pretty awful. So I'm really extremely negative about the potential future for Python but Swift for TensorFlow can be a different base altogether. It can basically be a layer on top of MLIR that takes advantage of all the great compiler stuff that Swift builds on with LLVM and yeah it could be absolutely I think it will be absolutely fantastic. Well you're inspiring me to try. Evan truly felt the pain of TensorFlow 2.0 Python. It's fine by me but yeah I mean it does the job if you're using like predefined things that somebody's already written but if you actually compare you know like I've had to do because I've been having to do a lot of stuff with TensorFlow recently you actually compare like okay I want to write something from scratch and I just keep finding it's like oh it's running 10 times slower than PyTorch. So is the biggest cost let's throw running time out the window how long it takes you to program? That's not too different now thanks to TensorFlow Eager that's not too different but because so many things take so long to run yeah you wouldn't run it at 10 times slower like you're just going like oh it's just taking too long yeah and also there's a lot of things that you're just less programmable like TF.data which is the way data processing works in TensorFlow is just this big mess it's incredibly inefficient and they kind of had to write it that way because of the TPU problems I described earlier so I just you know I just feel like they've got this huge technical debt which they're not going to solve without starting from scratch. So here's an interesting question then if there's a new student starting today what would you recommend they use? Well I mean we obviously recommend first AI and PyTorch because we teach new students and that's what we teach with so we would very strongly recommend that because it will let you get on top of the concepts much more quickly so then you'll become an action and you'll also learn the actual state-of-the-art techniques you know so you'll actually get world-class results. Honestly it doesn't much matter what library you learn because switching from China to MX net to TensorFlow to PyTorch is going to be a couple of days work if you long as you understand the foundations well. But you think we'll swift creep in there as a thing that people start using? Not for a few years particularly because like Swift has no data science, community libraries, schooling and the Swift community has a total lack of appreciation and understanding of numeric computing so like they keep on making stupid decisions you know for years they've just done dumb things around performance and prioritization. That's clearly changing now because the developer of Swift, Latina is working at Google on Swift for TensorFlow so like that's a priority. It'll be interesting to see what happens with Apple because like Apple hasn't shown any sign of caring about numeric programming in Swift so hopefully they'll get off their ass and start appreciating this because currently all of their low-level libraries are not written in Swift they're not particularly Swifty at all stuff like Core ML they're really pretty rubbish so yeah so there's a long way to go but at least one nice thing is that Swift for TensorFlow can actually directly use Python code and Python libraries in literally the entire lesson one notebook of fast AI runs in Swift right now in Python mode so that's a nice intermediate thing. How long does it take if you look at the two fast AI courses how long does it take to get from point zero to completing both courses? It varies a lot somewhere between two months and two years generally so for two months how many hours a day? Somebody who is a very competent coder can can do 70 hours per course and 7070 that's it okay but a lot of people I know take a year off to study fast AI full time and say at the end of the year they feel pretty competent because generally there's a lot of other things you do like they're generally they'll be entering Kaggle competitions they might be reading Ian Goodfellow's book they might you know they'll be doing a bunch of stuff and often you know particularly if they are a domain expert their coding skills might be a little on the pedestrian side so part of it's just like doing a lot more writing. What do you find is the bottleneck for people usually except getting started and setting stuff up? I would say coding. Yeah I would say the best the people who are strong coders pick it up the best although another bottleneck is people who have a lot of experience of classic statistics can really struggle because the intuition is so the opposite of what they used to they're very used to like trying to reduce the number of parameters in their model and looking at individual coefficients and stuff like that so I find people who have a lot of coding background and know nothing about statistics are generally going to be the best stuff. So you taught several courses on deep learning and as Fiamon says best way to understand something is to teach it what have you learned about deep learning from teaching it? A lot. That's a key reason for me to teach the courses I mean obviously it's going to be necessary to achieve our goal of getting domain experts to be familiar with deep learning but it was also necessary for me to achieve my goal of being really familiar with deep learning. I mean to see so many domain experts from so many different backgrounds it's definitely I wouldn't say taught me but convinced me something that I liked to believe which true which was anyone can do it. So there's a lot of kind of snobbishness out there about only certain people can learn to code so only certain people are going to be smart enough to do AI that's definitely bullshit you know I've seen so many people from so many different backgrounds get state of the art results in their domain areas now. It's definitely taught me that the key differentiator between people that succeed and people that fail is tenacity that seems to be basically the only thing that matters the people a lot of people give up and but if the ones who don't give up pretty much everybody succeeds you know even if at first I'm just kind of like thinking like wow they really aren't quite getting it yet are they but eventually people get it and they succeed. So I think that's been I think they're both things I liked to believe was true but I don't feel like I really had strong evidence for them to be true but now I can say I've seen it again and again. So what advice do you have for someone who wants to get started in deep learning? Train lots of models that's that's how you that's how you learn it so like so I would you know I think I think I think our course is very good but also lots of people independently as said it's very good it recently won the COGACs Award for AI courses as being the best in the world so that's it come to our course course dot faster AI and the thing I keep on harping on in my lessons is train models print out the inputs to the models print out to the outputs to the models like study you know change change the inputs a bit look at how the outputs vary just run lots of experiments to get a you know an intuitive understanding of what's going on. To get hooked do you think you mentioned training do you think just running the models in France like if we talk about getting started? No you've got to find true in the models so that's that's the critical thing because at that point you now have a model that's in your domain area so there's there's there's no point running somebody else's model because it's not your model like so it only takes five minutes to find true in a model for the data you care about and in lesson two of the course we teach you how to create your own dataset from scratch by scripting Google image search so and we show you how to actually create a web application running online so I create one in the course that differentiates between a teddy bear a grizzly bear and a brown bear and it does it with basically 100% accuracy took me about four minutes to scrape the images from Google search from the script there's a little graphical widgets we have in the notebook that help you clean up the dataset there's other widgets that help you study the results to see where the errors are happening and so now we've got over a thousand replies in our share your work here thread of students saying here's the thing I built and so there's people who like and a lot of them is data the art like somebody said oh I tried looking at Devon Gary characters and I couldn't believe it the thing that came out was more accurate than the best academic paper after lesson one and then there's others which are just more kind of fun like somebody is doing Trinidad and Tobago hummingbirds she said that's kind of their national bird and she's got something that can now classify Trinidad and Tobago hummingbirds so yeah train models fine tune models with your dataset and then study their inputs and outputs how much is fast the AI of course is free everything we do is free we have no revenue sources of any kind it's just a service to the community ears saint okay once a person understands the basics trains a bunch of models if we look at the scale of years what advice do you have for someone wanting to eventually become an expert train lots of models specifically train lots of models in your domain area so an expert what right we don't need more expert like create slightly evolutionary research in areas that everybody studying we need experts at using deep learning to diagnose malaria or we need experts at using deep learning to analyze language to study media bias so we need experts in analyzing fisheries to identify problem areas and you know the ocean you know that's that's what we need so like become the expert in your passion area and this is a tool which you can use for just about anything and you'll be able to do that thing better than other people particularly by combining it with your passion and domain expertise so that's really interesting even if you do want to innovate on transfer learning or active learning your thought is it means one I certainly share is you also need to find a domain or a data set that you actually really care for right if you're not working on a real problem that you understand how do you know if you're doing it any good you know how do you know if your results are good how do you know if you're getting bad results why you're getting bad results is it a problem with the data like how do you know you're doing anything useful yeah the only to me the only really interesting research is not the only but the vast majority of interesting research is like try and solve an actual problem and solve it really well so both understanding sufficient tools on the deep learning side and becoming a domain expert in a particular domain I really think will then reach for anybody yeah I mean to me I would compare to like studying self-driving cars having never looked at a car or been in a car or turned a car on right you know which is like the way it is for a lot of people they'll study some academic data set where they literally have no idea about that either way I'm not sure how familiar with the autonomous vehicles but that is literally you describe a large percentage of robotics folks working a self-driving cars as they actually haven't considered driving they haven't actually looked they were driving looks right they haven't driven it's so it's and it's a problem because you know when you've actually driven you know like these are the things that happened to me when I was driving it there's nothing that beats the real world examples are just experiencing them you've created many successful startups what does it take to create a successful startup same thing is becoming successful deep learning practitioner which is not getting up so you can you run out of money or run out of time or run out of something you know but if you keep costs super low and try and save up some money beforehand so you can afford to have some time then just sticking with it is one important thing doing something you understand and care about is important by something I don't mean the biggest problem I see with deep learning people is they do a PhD in deep learning and then they try and commercialize their PhD it is a waste of time because that doesn't solve an actual problem you pick to your PhD topic because it was an interesting kind of engineering or math or research exercise but yeah if you've actually spent time as a recruiter and you know that most of your time was spent sifting through resumes and you know that most of the time you're just looking for certain kinds of things and you can try doing that with a model for a few minutes and see whether that's something which a model seems to be able to do as well as you could then you're on the right track to creating a startup and then I think just yeah being just be pragmatic and trying to stay away from venture capital money as long as possible preferably forever so yeah maybe at that point do you venture capital so did you were you able to successfully run startups with self-funded for five years so my first two were self-funded and that was the right way to do it that's scary no species startups are much more scary because you have these people on your back who do this all the time and who have done it for years telling you grow grow grow grow and I don't they don't care if you fail they only care if you don't grow fast enough so that's scary we're else doing the ones myself well with partners who were friends it's nice because like we just went along with a pace that made sense and we were able to build it to something which was big enough that we never had to work again but was not big enough that an EVC would think it was impressive and that was enough for us to be excited you know so I thought that's so much better way to do things in most people in generally speaking enough for yourself but how do you make money during that process do you cut into savings if you're so yeah so for so I started fast mail and optimal decisions at the same time in 1999 with two different friends and for fast mail I guess I spent 70 dollars a month on the server and when the server ran out of space I put a payments button on the front page and said if you want more than 10 mega space you have to pay ten dollars a year and so run low like I keep your cost down yeah so I kept my cost down and once you know once once I needed to spend more money I asked people to spend the money for me and that that was that basically from then on I we were making money and I was profitable from then for optimal decisions it was a bit harder because we were trying to sell something that was more like a one million dollar sale but what we did was we would sell scoping projects so kind of like prototype projects but rather than being free we would sell them fifty to one hundred thousand dollars so again we were covering our costs and also making the client feel like we were doing something valuable so in both cases we were profitable from six months in yeah the Vellus is scary I mean yeah sure I mean it's it's it's scary before you jump in and I just I guess I was comparing it to this scarediness of VC I felt like with VC stuff it was more scary you kind of much more in somebody else's hands you know will they fund you or not and what do they think of what you're doing I also found it very difficult with VC's back startups to actually do the thing which I thought was important for the company rather than doing the thing which I thought would make the VC happy now VC's always tell you not to do the thing that makes them happy but then if you don't do the thing that makes them happy they get sad so and do you think optimizing for the whatever they call it the exit is a good thing to optimize for I mean it can be but not at the VC level because the VC exit needs to be you know a thousand X so where else the lifestyle exit if you can sell something for ten million dollars and you've made it right so I don't it depends if you want to build something that's going to you kind of happy to do forever then fine if you want to build something you want to sell in three years time that's fine too I mean they're both perfectly good outcomes so you're learning Swift no in a way I mean you already time too and I read that you use at least in some case the space repetition as a mechanism for learning new things yeah I use Enki quite a lot yeah so yeah sure I actually don't never talk to anybody about it don't don't know how many people do it but it works incredibly well for me can you talk to your experience like how did you what do you but first of all okay let's back it up what is space repetition so space repetition an idea created by a psychologist named ebbinghouse I don't know let's be a couple hundred years ago or something hundred and fifty years ago I hated something which sounds pretty damn tedious he wrote down random sequences of letters on cards and tested how well he would remember those random sequences a day later a week later whatever he discovered that there was this kind of a curve where his probability of remembering one of them would be dramatically smaller the next day and then a little bit smaller the next day a little bit smaller the next day what he discovered is that if he revised those cards after a day the probabilities would decrease at a smaller rate and then if he revised them again a week later they would decrease at a smaller rate again and so he basically figured out a roughly optimal equation for when you should revise something you want to remember so space repetition learning is using this simple algorithm just something like revise something after a day and then three days and then a week and then three weeks and so forth and so if you use a program like anky as you know it will just do that for you and if you and it will say did you remember this and if you say no it will reschedule it back to be up here again like ten times faster than it otherwise would have it's a kind of a way of being guaranteed to learn something because by definition if you're not learning it it will be rescheduled to be revised more quickly unfortunately though it's also like it doesn't let you for yourself if you're not learning something you know like your revisions will just get more and more so you have to find ways to learn things productively and effectively like treat your brain well so using like mnemonics and stories and context and stuff like that so yeah it's it's a super great technique it's like learning how to learn is something which everybody should learn before they actually learn anything but almost nobody does what have you so certainly works well for learning new languages for I mean for learning like small projects almost but do you you know I started using it for if you had who wrote a blog was about this inspired me it might have been you I'm not sure is uh I started when I read papers I'll concepts and ideas I'll put them was it Michael Nielsen? Yeah it was my stuff that's been that Michael started doing this recently and it's been writing about it I uh so the kind of today's ebbing house is a guy called pieter was NIEC who developed a system called super memo and he's been basically trying to become like the world's greatest renaissance man over the last few decades he's basically lived his life with space japanic repetition learning for everything um I and sort of like Michael's only very recently got into this but he started really getting excited about doing it for a lot of different things um for me personally I actually don't use it for anything except Chinese and the reason for that is that um Chinese is specifically a thing I made a conscious decision that I want to continue to remember even if I don't get much of a chance to exercise it because like I'm not often a China so I don't or else something like programming languages or papers I have a very different approach which is I try not to learn anything from them but instead I try to identify the important concepts and like actually ingest them so like really understand that concept deeply and study it carefully and well decide if it really is important if it is like incorporated into our library you know incorporated into how I do things or decide it's not worth it so I find I find I then remember the things that I care about because I'm using it all the time so I've I've for the last 25 years I've committed to spending at least half of every day learning or practicing something new which is all my colleagues have always hated because it always looks like I'm not working on what I'm meant to be working on but that always means I do everything faster because I've been practicing a lot of stuff so I kind of give myself a lot of opportunity to practice new things and so I find now I don't yeah I don't often kind of find myself wishing I could remember something because if it's something that's useful then I've been using it a lot that's easy enough to look at up on Google but speaking Chinese you can't look at up on Google so do you have advice for people learning new things so if you what have you learned as a process as I mean it all starts just making the hours in the day available yeah you gotta stick with it which is again the number one thing that 99 is and people don't do so the people I started learning Chinese with none of them was still doing it 12 months later I'm still doing it 10 years later I tried to stay in touch with them but they just no one did it yeah for something like Chinese like study how human learning works so my everyone of my Chinese flashcards is associated with a story and that story is specifically designed to be memorable and we find things memorable which are like funny or disgusting or sexy or related to people that we know or care about so I try to make sure all the stories that are in my head have those characteristics yeah so you have to you know you won't remember things well if they don't have some context and yeah you won't remember them well if you don't regularly practice them whether it be just part of your day-to-day life for the Chinese and me flashcards I mean the other thing is I'll let yourself fail sometimes so like I've had various medical problems over the last few years and basically my flashcards just stopped for about three years and and there have been other times I've stopped for a few months and it's so hard because you get back to it and it's like you have 18,000 cards to you it's like and so you just have to go all right well I can either stop and give up everything or just decide to do this every day for the next two years until I get back to it the amazing thing has been that even after three years I you know the Chinese were still in there like yeah it was so much faster to relearn than it was to learn the first time yeah absolutely it's it's in there I have the same with with guitar with music and so on it's sad because of work sometimes takes away and then you won't play for a year but really if you then just get back to it every day you're right or you're right there again what do you think is the next big breakthrough in artificial intelligence what are your hopes in deep learning or beyond that people should be working on or you hope there'll be breakthroughs I don't think it's possible to predict I think I think what we already have is an incredibly powerful platform to solve lots of society important problems that are currently un-solved so I've just hope that people will lots of people will learn this toolkit and try to use it I don't think we need a lot of new technological breakthroughs to do a lot of great work right now and when do you think we're going to create a human level intelligence system do you think don't know how hard is it how far where are we don't know don't have no way to know I don't know like I don't know why people make predictions about this because there's no data and nothing to go on and it's just like there's so many society important problems to solve right now I just don't find it a really interesting question to even answer so in terms of societally important problems what's the problem that is within reach for example there are problems that AI creates right so most specifically labor force displacement is going to be huge and people keep making this fearless econometric argument of being like oh there's been other things that aren't AI that have come along before and haven't created massive labor force displacement therefore AI won't so that's a serious concern for you oh yeah injury yang is running on it yeah it's it's it's I'm desperately concerned and you see already that the changing workplace has lived to a hollowing out of the middle class you're seeing that students coming out of school today have a less rosy financial future ahead of them than the parents did which has never happened in recent in the last 300 years you know we've always had progress before and you see this turning into anxiety and despair and and even violence so I very much worry about that you've written quite a bit about ethics too I do think that every data scientist working with deep learning needs to recognize they have an incredibly high leverage tool that they're using that can influence society in lots of ways and if they're doing research that that research is going to be used by people doing this kind of work and they have a responsibility to consider the consequences and to think about things like how will humans be in the loop here how do we avoid runaway feedback loops how do we ensure an appeals process for humans that are impacted by my algorithm how do I ensure that the constraints of my algorithm are adequately explained to the people that end up using them there's all kinds of human issues which only data scientists are actually in the right place to educate people are about but data scientists tend to think as themselves as just engineers and that they don't need to be part of that process for now yeah just wrong well you're in a perfect position to educate them better to read literature to read history to learn from history well Jeremy thank you so much for everything you do for inspiring huge amount of people getting them into deep learning and having the ripple effects the the flap of a butterfly's wings that will probably change the world so thank you very much yes