 The following is a conversation with Jim Keller, his second time in the podcast. Jim is a legendary microprocessor architect and is widely seen as one of the greatest engineering minds of the computing age. In a peculiar twist of space time in our simulation, Jim is also a brother-in-law of Jordan Peterson. We talk about this and about computing, artificial intelligence, consciousness, and life. Work mention of our sponsors. A flat of greens all in one nutrition drink, Brooklyn in sheets, express VPN, and Bell Campo Grass-fed meat. Click the sponsor links to get a discount and to support this podcast. As a side note, let me say that Jim is someone who, on a personal level, inspired me to be myself. There were something in his words on and off the mic, or perhaps that he even paid attention to me at all. That almost told me, you're our right kid. A kind of pat on the back that can make the difference between a mind that flourishes and a mind that is broken down by the cynicism of the world. So I guess that's just my brief few words of thank you to Jim and in general gratitude for the people who have given me a chance on this podcast, in my work, and in life. If you enjoy this thing, subscribe by YouTube, review it on Apple Podcasts, follow on Spotify, support it on Patreon, or connect with me on Twitter, Alexa Friedman. As usual, I'll do a few minutes of ads now, and no ads in the middle. I try to make these interesting, but I give you time stamps so you skip, please still check out the sponsors by clicking the links in the description. It is the best way to support this podcast. This show is sponsored by a flat of greens. The all in one daily drink to support better health and peak performance. To replace the multivitamin for me, it went far beyond that, with 75 vitamins and minerals. I do intermittent fasting of 16 to 24 hours every day, and always break my fast with a flat of greens. I'm actually drinking it twice a day now, training for the Goggins challenge. I can't say enough good things about these guys. It helps me not worry whether I'm getting all the new chance I need, especially since they keep iterating on their formula constantly improving it. The other thing I've taken for a long time outside of Athletic Greens is fish oil. So I'm especially excited now that they're selling fish oil and are offering listeners of this podcast free one month's supply of wild caught omega-3 fish oil. Sounds good when it's wild caught for some reason. When you go to Athletic Greens.com slash Lex to claim the special offer, that's Athletic Greens.com slash Lex for the drink and the fish oil. Trust me, it's worth it. This episode is sponsored by Brook Linen Sheets. Sleep has increasingly become a source of joy for me with an eighth-leap self-cooling bed and is incredible smooth, buttery smooth as they call them, and cozy Brook Linen Sheets. I've often slept on the carpet without anything but a jacket and jeans, so I'm not exactly the world's greatest expert in comfort, but these sheets have been an amazing upgrade over anything I've ever used. In the responsible adult sheets I've purchased in the past, there's a variety of colors, patterns, material, variants to choose from. They have over 50,000 five star reviews. People love them. I think figuring out a sleep schedule that works for you is one of the essential challenges of our productive life. Don't let your choice of sheets get in the way of this optimization process. Go to BrookLinen.com and use code Lex to get 25 bucks off when you spend $100 or more. Plus you get free shipping. That's BrookLinen.com and Enter promo code Lex. This show is sponsored by ExpressVPN, a company that adds a layer of protection between you and a small number of technology companies that control much of your online life. ExpressVPN is a powerful tool for fighting back in the space of privacy. As I mentioned in many places, I've been honestly troubled by Amazon's decision to remove Parler from AWS. To me, it was an overreach of power that threatens the American spirit of the entrepreneur. Anyway, ExpressVPN hides your IP address, something they can be used to personally identify you. So the VPN makes your activity harder to trace and sell to advertisers. And it does all of this without slowing your connection. I've used it for many years on Windows, Linux and Android. Actually, on iPhone though, but it's available everywhere else too. I don't know where else it's available. Maybe Windows phone. I don't know. For me, it's been fast and easy to use. One big power on button. That's fun to press. Probably my favorite intuitive design of an app that doesn't try to do more than it needs to go to expressvpn.com slash Lex pod to get an extra three months free on a one year package. That's expressvpn.com slash Lex pod. This show is also sponsored by Bell Campo, Farms whose mission is to deliver meat you can feel good about. That's meat that is good for you, good for the animals and good for the planet. Bell Campo animals graze on open pastures and seasonal grasses resulting in meat that is higher in nutrients and healthy fats. The farms are certified humane, which is the gold standard for the kind and responsible treatment of farm animals. As I've mentioned in the past, a clean diet of meat and veggies for me has been an important part of my productive life. It maximizes my mental and physical performance. Bell Campo has been the best meat I've ever eaten at home. So I can't recommend it highly enough. Also the CEO of the company, Anya, forget her last name, starts with an F. I think it's fern old. Follow her on Instagram or wherever else she's active because she happens to be a brilliant chef and just has a scientific view of agriculture and food in general, which I find fascinating and inspiring. Anyway, you can order Bell Campo sustainably raised meats to be delivered straight to your door using code Lex at bellcampo.com slash Lex for 20% off the first time customers. It's code Lex at bellcampo.com slash Lex. Trust me, the extra bit of cost is worth it. And now here's my conversation with Jim Keller. What's the value and effectiveness of theory versus engineering this dichotomy in building good software or hardware systems? Well, it's good designs both. I guess that's pretty obvious. By the engineering, do you mean reduction to practice of known methods and then science is the pursuit of discovering things that people don't understand or solving unknown problems? Definitions are interesting here, but I was thinking more in theory constructing models that kind of generalize about how things work. Engineering is actually building stuff, the pragmatic like, okay, we have these nice models, but how do we actually get things to work? Maybe economics is a nice example. Like economists have all these models of how the economy works and how different policies will have an effect, but then there's the actual, okay, let's call it engineering of like actually deploying the policies. So computer design is almost all engineering and reduction of practice and known methods. Now because of the complexity of the computers we built, you know, you could think you're, well, we'll just go write some code and then we'll verify it and we'll put it together and then you find out that the combination of all that stuff is complicated and then you have to be inventive to figure out how to do it. Right? So that's definitely happens a lot. And then every so often, some big idea happens, but it might be one person. And that idea is in what in the space of engineering or in the space of? Well, I'll give you an example. So one of the limits of computer performance is branch prediction. So and there's a whole bunch of ideas about how good you could predict a branch and people said there's a limit to it's an asymptotic curve and somebody came up with a better way to do branch prediction. That was a lot better. We published a paper on it and every computer in the world now uses it and it was one idea. So the engineers who build branch prediction hardware were happy to drop the one kind of training array and put it in another one. So it was a real idea. And branch prediction is one of the key problems underlying all of sort of the lowest low or software it boils down to branch prediction. Bullials down the uncertainty. There's a limited by single thread computers limited by two things. The predictability of the path of the branches and predictability of the locality of data. So we have predictors that now predict both of those pretty well. So memories, you know, a couple hundred cycles away, local cash, this couple cycles away. When you're executing fast, virtually all the data has to be in the local cash. So a simple program says, you know, add one to every element in array. It's really easy to see what the stream of data will be. But you might have a more complicated program that's, you know, so get a, get an element of this array, look at something, make a decision, go get another element, it's kind of random. And you can think that's really unpredictable. And then you make this big predictor that looks at this kind of pattern and you realize, well, if you get this data and this data, then you probably want that one. And if you get this one and this one and this one, you probably want that one. And is that theory or is that engineering? Like the paper that was written, was it asymptotic kind of kind of discussion or is it more like, here's a hack that works well? It's a little bit of both. Like there's information to your unit, I think somewhere. So it's actually trying to prove. Yeah. But once you know the method, implement it, it's an engineering problem. Now there's a flip side of this, which is in a big design team, what percentage of people think their plan or their life's work is engineering versus inventing things. So lots of companies will reward you for filing patents. Some many big companies get stuck because to get promoted, you have to come up with something new. And then what happens is everybody's trying to do some random new thing, 99% of which doesn't matter. And the basics get neglected. Or they get to, there's a dichotomy they think like the cell library and the basic CAD tools, you know, or basic software validation methods. That's simple stuff. You know, they want to work on the exciting stuff. And then they spend lots of time trying to figure out how to patent something. And that's mostly useless. But the breakthrough is on the simple stuff. No, no, you, no, you have to do the simple stuff really well. If you're building a building out of bricks, you want great bricks. So you go to two places and sell bricks. So one guy says, yeah, they're over there and ugly pile. And the other guy is like lovingly tells you about the 50 kinds of bricks and how hard they are, how beautiful they are and square they are. And, you know, which one you go buy bricks from, which is going to make a better house. So you're talking about the craftsman, the person who understands bricks, loves bricks, who loves the varieties. That's a good word. You know, good engineering is great craftsmanship. And when you start thinking engineering is about invention and set up a system that rewards invention, the craftsmanship gets neglected. Okay. So maybe one perspective is the theory, the science over emphasizes invention and engineering emphasizes craftsmanship. And therefore, like, so if you, it doesn't matter what you do, a theory. Well, everybody, like read the tech racks. They're always talking about some breakthrough or innovation and everybody thinks that's the most important thing. But the number of innovative ideas is actually relatively low. We need them, right? And innovation creates a whole new opportunity. Like when some guy invented the internet, right? Like that was a big thing. The million people that wrote software against that were mostly doing engineering software writing. So the elaboration of that idea was huge. I don't know if you know Brennan, Ike, he wrote JavaScript in 10 days. That's an interesting story. It makes me wonder. And it was, you know, famously for many years considered to be a pretty crappy programming language. It's still as perhaps it's been improving sort of consistently. But the interesting thing about that guy is, you know, he doesn't get any awards. You don't get a Nobel Prize or a field's medal or. For my 19th, a crappy piece of, you know, software code that would that is currently the number one programming language in the world that runs now is increasingly running the backhand of the internet. Well, does he know why everybody uses it? Like that would be an interesting thing. Was it the right thing at the right time? Because like when stuff like JavaScript came out, like there was a move from, you know, C Pro Ramps and C++ to, let's call what they call manage code frameworks, where you write simple code. It might be interpreted. It has lots of libraries, productivity is high. You don't have to be an expert. So you know, Java was supposed to solve all the world's problems. It was complicated. Java Script came out, you know, after a bunch of other scripting languages. I'm not an expert on it. But was it the right thing at the right time? Or was there something, you know, clever because he wasn't the only one? There's a few elements. And maybe if you figured out what it was, then you get a prize. Like that destructive theory, you know, maybe this problem doesn't define this or it just needs a good promoter. Well, I think there was a bunch of blog posts written about it, which is like wrong is right, which is like doing the crappy thing fast. Just like hacking together the thing that answers some of the needs and then iterating over time, listening to developers, like listening to people who actually use the thing. This is something you can do more in software. But the right time, like you have to sense, you have to have a good instinct of when is the right time for the right tool and make it super simple and just get it out there. The problem is this is true with hardware. This is less true with software is there's a backward compatibility that just drags behind you. You know, as you try to fix all the mistakes of the past, but the timing was good. There's something about that. It wasn't accidental. You have to like give yourself over to the, you have to have this like broad sense of what's needed now. Both scientifically and like the community and just like this, it was obvious that there was no, the interesting thing about JavaScript is everything that ran in the browser at the time like Java and I think other like scheme, other programming languages. They were all in a separate external container and then JavaScript was literally just injected into the web page. It was the dumbest possible thing running in the same thread as everything else and like it was inserted as a comment. So JavaScript code is inserted as a comment in the HTML code and it was, I mean, there's it's either genius or super dumb, but it's like, it's no apparatus for like a virtual machine and container. It just executed in the framework of the program. Yeah. And it was cool. And then because something about that accessibility, the ease of its use resulted in then developers innovating of how to actually use it. I mean, I don't even know what to make of that, but it doesn't seem to echo across different software like stories of different software. PHP has the same story, really crappy language. They just took over the world. Well, I'm going to have a joke that the random length instructions, variable length instructions, that's always one, even though they're obviously worse. Like nobody knows why. X-H-E-Six is, or you'd be the worst architecture. You know, on the planet, it's one of the most popular ones. Well, I mean, isn't that also the story of risk or is this, I mean, is that simplicity? There's something about simplicity that us in this evolutionary process is valued. If it's simple, it gets, it spreads faster. It seems like, or is that not always true? That's not always true. Yeah, it could be simple as good, but too simple as bad. So why did risk win, you think, so far? Did risk win? In the long-archifistry. We don't know. So who's going to win? But what's risk? What's risk? And who's going to win in that space in these instruction sets? Hey, I saw first going to win, but there'll be little computers that run little programs like normal all over the place. But we're going through another transformation, so. But you think instruction sets underneath it all will change? Yeah, they evolve slowly. They don't matter very much. They don't matter very much, okay? I mean, the limits of performance are, you know, predictability of instructions and data. That's the big thing. And then the usability of it is some, you know, quality of design, quality of tools, availability. But right now, X-86 is proprietary with Intel and AMD, but they can change it anyway they want independently. Right? Arm is proprietary to arm, and they won't let anybody else change it. So it's like a sole point. And risk five is open source, so anybody can change it, which is super cool. But that also might mean it gets changed in too many random ways that there's no common subset of it that people can use. Do you like open or do you like close? Like if you were to bet all your money on one or the other risk five versus it? No idea. It's case dependent. Well, X-86 oddly enough, when Intel first started developing it, they licensed it like seven people. So it was the open architecture. And then they move faster than others and also bought one or two of them. But there was seven different people making X-86. At the time there was 6502 and Z80s and you know, 8086. And you could argue everybody thought Z80 was the better instruction set, but that was proprietary to one place. Oh, in the 6800. So there's like four or five different microprocessors. Intel went open, got the market share because people felt like they had multiple sources from it. And then over time it narrowed down to two players. Why you as a historian? Why did Intel win for so long with their processors? I mean, they were right. Their process development was great. So it's just looking back to JavaScript and Bernite is Microsoft and Netscape and all these in and out browsers. Microsoft won the browser game because they aggressively stole other people's ideas. Like right after they did it. You know, I don't know if Intel was stealing other people's ideas. They started making ways stealing. They started making rams. They ran the access memories. And then at the time when the Japanese manufacturers came up, they were getting out competing on that. And they pivoted the microprocessors and they made the first integrated microprocessor program. So it was the 4004 or something. Who was behind that pivot? That's a hell of pivot. And then they led semiconductor industry. Like, they were just a little company, IPM. All kinds of big companies had boat loads of money and they out-innovated everybody. I don't know if it's innovated. Yeah. So it's not like marketing. It's not any other stuff. And their processor designs were pretty good. I think the core two was probably the first one I thought was great. It was a really fast processor and then how's well-os-great? What makes a great processor in that? Oh, if you just look at its performance versus everybody else, it's the size of it, the usability of it. So it's not specific. Some kind of element that makes it beautiful. It's just like literally just raw performance. Is that how you think about processors? It's just raw performance? Of course. It's like a horse race. The fastest one wins. Now. Well, there's the fastest in the environment. For years, you made the fastest one you could and then people started to have power limits. So then you made the fastest at the right power point. And then when we started doing multi-processors, if you could scale your processors more than the other guy, you could be 10% faster on a single thread, but you have more threads. So there's lots of variability. And then ARM really explored like they have the A series and the R series and the M series, like a family of processors for all these different design points from unbelievably small and simple. And so then when you're doing the design, it's sort of like this big palette of CPUs. Like there are the only ones with a credible top to bottom palette. And what do you mean a credible top to bottom? Well, there's people who make microcontrollers that are small, but they don't have a fast one. There's people make fast processors, but don't have a medium one or a small one. Is that hard to do that full palette? That seems like a lot of different. So what's the difference between the ARM folks and Intel in terms of the way they approach in this problem? Well, Intel, almost all their process designs were very custom high end for the last 15, 20 years. There's a fastest horse possible in one horse. Yeah. And they architecturally are really good, but the company itself was fairly insular to what's going on the industry with CAD tools and stuff. And there's this debate about custom design versus the synthesis and how do you approach that? I'd say Intel was slow on the cutting to synthesize processors. ARM came in from the bottom and they generated IP, which went to all kinds of customers. So they had very little say how the customer implemented their IP. So ARM is super friendly to the synthesis IP environment. Whereas Intel said, we're going to make this great client chip or server chip with our own CAD tools, with our own process, with our own other supporting IP and everything only works with our stuff. So is that is ARM winning the mobile platform space in terms of process? And so in that way, you're describing is why they're winning? Well, they had lots of people doing lots of different experiments. So they controlled the processor architecture and IP, but they let people put it in lots of different chips. And there was a lot of variability in what happened there. Whereas Intel, when they made their mobile, there were 4A into mobile. They had one team doing one part. Right. So it wasn't 10 experiments. And then their mindset was PC mindset, Microsoft software mindset. And that brought a whole bunch of things along with the mobile world and the embedded world don't do. Do you think it was possible for Intel to pivot hard and win the mobile market? That's a hell of a difficult thing to do right for a huge company to just pivot. I mean, so interesting to, because we'll talk about your current work. It's clear that PCs were dominating for several decades, like desktop computers. And then mobile, it's unclear. It's a leadership question. Like Apple under Steve Jobs, when he came back, they pivoted multiple times. They build iPads and iTunes and phones and tablets and great Macs. Like who knew computers should be made out of aluminum? Nobody knew that. That they're great. It's super fun. Steve Jobs, like they pivoted multiple times. And you know, the old Intel, they did that multiple times. They made DRAMs and processors and processes. I got to ask this, what was the like work with Steve Jobs? I didn't work with him. Did you interact with him? Twice. I said hi to him twice in the cafeteria. What did you say? Hi. He said, hey fellas. He was friendly. He was wondering around and with somebody, he couldn't find the table because the cafeteria was packed and I gave my table. But I worked for my cobert who talked to like Mike, Mike was the unofficial CEO of Apple and a brilliant guy. And he worked for Steve for 25 years, maybe more. And he talked to Steve multiple times a day. And he was one of the people who could put up with Steve's, let's say, brilliance and intensity. And Steve really liked him and Steve trusted Mike to translate the shit he thought up into engineering products that work. And then Mike ran a group called platform architecture and I was in that group. So many times I'd be sitting with Mike on the phone and rang if he Steve and Mike would hold the phone like this because Steve would be yelling about something or other. Yeah. And he would translate it. And then he would say, Steve wants us to do this. So. Was Steve a good engineer or no? I don't know. He was a great idea guy. Idea person. He's a really good selector for talent. Yeah. That's supposed to be one of the key elements of leadership, right? And then he was really good first principles guy. Like somebody say something couldn't be done and he would just think that's obviously wrong. Right. But, you know, maybe it's hard to do. Maybe it's expensive to do. Maybe we need different people. You know, there's like a whole bunch of, you know, if you want to do something hard, you know, maybe it takes time, maybe you have to iterate. There's all bunch of things you could think about, but saying it can't be done is stupid. How would you compare? So it seems like Elon Musk is more engineering centric, but it's also, I think he considered himself a designer too. He has a design mind. Steve Jobs feels like he's much more idea space, design space versus engineering. Yeah. Just make it happen. Like the world should be this way. Just figure it out. But he used computers, you know, he had computer people talk to him all the time. Like Mike was a really good computer guy. He knew what computers could do. Computer meaning computer hardware like a lot of software, all the pieces. And then he would, you know, have an idea about what could we do with this next? That was grounded in reality. It wasn't like he was, you know, just finger painting on the wall and wishing somebody would interpret it. So he had this interesting connection because, no, he wasn't a computer architect. He was a director designer, but yet an intuition from the computers we had to what could happen. And it's actually intuition because it seems like he was pissing off a lot of engineers in his intuition about what can and can't be done. Those like the, what is all these stories about like floppy disk and all that kind of stuff like that? Yeah. So in Steve's the first round, like he'd go into a lab and look at what's going on and hate it and fire people or somebody in the elevator, what they're doing for Apple, not be happy. When he came back, my impression was, is he surrounded himself with this relatively small group of people and didn't really interact outside of that as much. And then the joke was you see like somebody moving up prototype through the quad with a black blanket over it. And that was because it was secret, you know, partly from Steve because they didn't want it. Steve to see it until it was ready. Yeah, the dynamic with Johnny Ive and Steve is interesting. It's like you don't want to he ruins as many ideas as he generates. Yeah. Yeah. It's a dangerous kind of line to walk. I mean, if you have a lot of ideas, like Gordon Bell was famous for ideas, right? And it wasn't that the percentage of good ideas was way higher than anybody else. He had so many ideas and he was also good at talking to people about it and getting the filters right and you know, seeing through stuff. Where Zeylon was like, hey, I want to build rockets. So Steve was hired by rocket guys and he along would go read rocket manuals. So Yon is a better engineer, a sense like or like more like a love and passion for the manuals. Yeah. And the details, the details and the craftsmanship too, right? Well, I guess you had craftsmanship too, but of a different kind. What do you make of the, just to stand in for just a little longer? What do you make of like the anger and the passion and all that, the firing and the mood swings and the madness, the, you know, being emotional and all that that's Steve. And I guess Yon too, is that a bugger feature? It's a feature. So there's a graph, which is, Y axis productivity. Yeah. X axis at zero is chaos. And then finally it's complete order. Yeah. Right. So as you go from the, you know, the origin, as you improve order, you improve productivity. Yeah. And at some point productivity peaks and then it goes back down again. Too much order, nothing can happen. Yes. But the question is, is that how close to the chaos is that? No, no, no, here's the thing is once you start moving the direction order, the force factor to drive you towards order is unstoppable. Oh, it's a slip. And every organization will move to the place where their productivity is stymied by order. See me. So the question is, who's the counter force? Like it, because it also feels really good. As you get more organized, then productivity goes up. The organization feels it. They orient towards it, right? They hired more people. They got more guys who couldn't run process. You get bigger, right? And then inevitably, inevitably, the organization gets captured by the bureaucracy that manages all the processes. Yeah. All right. And then humans really like that. And so if you just walk into a room and say, guys, love what you're doing, but I need you to have less order. If you don't have some force behind that, nothing will happen. I can't tell you on how many levels that's profound. So that's why I say it's a feature. Now, could you be nicer about it? I don't know. I don't know any good examples of being nicer about it. Well that the funny thing is to get stuff done. You need people who can manage stuff and manage people because humans are complicated. They need lots of care and feeding. You need to tell them they look nice and they're doing good stuff and pat them on the back. Right? I don't know. Do you tell me, is that, is that needed? Oh, yes. Humans need that. I had a friend. He started the management group and he said, I figured it out. You have to praise them before they do anything. I was waiting until they were done and they were always mad at me. Now I tell them what a great job they're doing while they're doing it. But then you get stuck in that trap because then when they're not doing something, how do you confront these people? I think a lot of people that had trauma in their childhood would disagree with you. Successful people that you need to first do their off stuff and then be nice later. I don't know. Okay, but engineering companies are full of adults who have all kinds of ranch and childhoods. You know, most people had okay childhoods. Well, I don't know if... Lots of people only work for praise, which is weird. You mean like everybody. I'm not that interested in this, but... Well, you're probably looking for somebody's approval. Even still. Yeah, maybe. I should think about that. Maybe somebody who's no longer with this kind of thing. I don't know. I used to call my dad and tell him what I was doing. He was very excited about engineering and stuff. You've got his approval? Yeah, a lot. I was lucky. Like he decided I was smart and unusual as a kid and that was okay when I was really young. So when I did poorly in school, I was this lucky. I didn't read until I was third or fourth grade. They didn't care. My parents were like, oh, he'll be fine. So I was lucky. That was cool. Is he still with us? He missed him? Sure, he had Parkinson's and then cancer. His last 10 years were tough. And I killed him. Killed him and like that's hard. The mind? Well, it was pretty good. Parkinson's caused a slow dementia and the chemo therapy, I think, accelerated it. But it was like hallucinogenic dementia. So he was clever and funny and interesting and it was pretty unusual. Do you remember conversations that, of course, from that time? Like, do you have fond memories of the guy? Yeah, well, yeah. Anything coming to mind? A friend told me one time I could draw a computer on the way forward faster than anybody you'd ever met and I said, you should meet my dad. Like I was the kid he'd come home and say, I was driving by the bridge and I was thinking about it and he pulled out a piece of paper and he'd draw the whole bridge. He was a mechanical engineer. Yeah. And he would just draw the whole thing and then he would tell me about it and tell me how he would have changed it. And he had this idea that he could understand and conceive anything. And I just grew up with that so that was natural. So when I interview people, I ask them to draw a picture of something they did on a whiteboard and it's really interesting. Like some people would draw the little box and then they'll say, and then this talks to this and I'll be like, that's this frustrating. And then I had this other guy come in one time. He says, well, I designed a floating point in this chip, but I'd really like to tell you how the whole thing works and then tell you how the floating point works inside of it. Do you mind if I do that? He covered two whiteboards and it's like 30 minutes. Yeah. And I hired him. Like he was great. This craftsman. I mean, that's the craftsmanship to that. Yeah, but also the mental agility to understand the whole thing. Right. Put the pieces in context, you know, you know, real view of the balance of how the design worked because if you don't understand it properly, when you start to draw it, you'll fill up half the whiteboard with like a little piece of it and, you know, like your ability to lay it out in an understandable way, it takes a lot of understanding. So, and be able to just zoom into the detail and then zoom out and zoom out really fast. What about the impossible things that your dad believed that you could do anything? That's a weird feature for a craftsman. Yeah. It seems that that echoes in your own behavior. Like that's the, well, it's not that anybody can do anything right now. Right. It's that if you work at it, you can get better at it and there might not be a limit. And they did funny things like, like he always wanted to pill a piano. So at the end of his life, he started playing a piano. When he had Parkinson's, he was terrible. But he thought if he'd really worked out it in this life, maybe the next life, he'd be better at it. He might be out to something. Yeah. He'd be. He'd joy doing it. Yeah. That's pretty funny. You think the perfect is the enemy of the good and hard-worn software engineering. It's like we were talking about JavaScript a little bit and the messiness of the 10-day building process. Yeah. Let's create attention, right? So creative attention is you have two different ideas that you can't do both. Right. But the fact that you want to do both causes you to go try to solve that problem. That's the creative part. So if you're building computers, like some people say we have the schedule and anything that doesn't fit in the schedule we can't do. Right. And so they throw out the perfect because I have a schedule. I hate that. Then there's other people to say we need to get this perfectly right and no matter what. No more people more money, right. And there's a really clear idea about what you want. Some people are really good at articulating it. Right. So let's call that the perfect. Yeah. All right. But that's also terrible because they never ship anything. They never hit any goals. So now you have to now you have your framework. You can't throw out stuff because you can't get it done today because maybe you get it done tomorrow with the next project. You can't. So you have to I work as a guy that I really like working with. Maybe over filters this ideas over filters. He'd start thinking about something and soon as he figured out was wrong with it, he'd throw it out. And then I start thinking about it and you know you come up with an idea and then you find out what's wrong with it. And then you give it a little time to set because sometimes you know you figure out how to tweak it or maybe that idea helps some other idea. So idea generation is really funny. So you have to give your idea space like spaciousness of mind is key. And you also have to execute programs and get shit done. And then it turns out computer engineering is fun because it takes you know 100 people to build a computer 200 to 300 whatever the number is. And people are so variable about you know, temperament and you know skill sets and stuff that in a big organization. You find that the people who love the perfect ideas and the people that want to get stuffed on yesterday and people like that come up with ideas and people like the let's say shoot down ideas. It takes the whole. It takes a large group of people. That's someone good at generating ideas. Some of good at filtering ideas and then all in that giant mess you somehow. I guess the goal is for that giant mess of people to find the perfect path through the tension, the creative tension. But like how do you know when you said there's some people good at articulating what perfect looks like what a good design is like you're sitting in a room. And you have a set of ideas about like how to design a better processor. How do you know this is something special here? This is a good idea. Let's try this. If you ever brainstormed ideas with a couple of people that were really smart and you kind of go into it and you don't quite understand it and you're working on it. And then you start you know talking about it, putting it on the whiteboard, maybe it takes days or weeks. And then your brain starts to kind of synchronize. It's really weird. Like you start to see what each other is thinking. And it starts to work. Like you can see work. Like my talent and computer design is I can see how computers work in my head like really well. And I know other people can do that too. And when you're working with people that can do that, like it is kind of an amazing experience. And then everyone's like you get to that place and then you find the flaw which is kind of funny because you can fool yourself in. But the two of you kind of drifted along the direction that was useless. That happens too. Like you have to because you know the nice thing about computers is I always reduction in practice. Like you come up with your good ideas. And I know some architects who really love ideas. And then they work on them and then they put it on the shelf and go work on the next idea and put them. Shelf they never reduce the practice. So they find out what's good and bad because almost every time I've done something really new by time it's done. Like the good parts are good but I know all the flaws. Like yeah. Would you say your career, just your own experience is your career defined by mostly by flaws or by successes like if again there's great attention between those. If you haven't tried hard and done something new, then you're not going to be facing the challenges when you build it and you find out all the problems. But when you look back you see problems. Oh, when I look back, what do you remember? I think earlier in my career like EV5 was the second alpha chip. I was so embarrassed about the mistakes I could barely talk about it. And it was in the Guinness Book of World records and it was the fastest processor on the planet. So it was and at some point I realized that was really a bad mental framework to deal with like doing something new. We did a bunch of new things and some worked out great and some were bad. We learned a lot from it. And the next one we learned a lot. That also EV6 also had some really cool things in it. I think the proportion of good stuff went up but it had a couple of fatal flaws in it that were painful. And then you learned to channel the pain into pride. Not pride really. Just realization about how the world works. How that kind of idea so works. Life is suffering. That's the reality. What? No, it's not. Well, I know the Buddhists have that and a couple other people are stuck on it. But there's this kind of weird combination of good and bad light and darkness that you have to tolerate and deal with. There's definitely lots of suffering in the world. Depends on the perspective. It seems like there's way more darkness. But that makes the light part really nice. What a computing hardware or just any kind of even software design. Are you defined beautiful from your own work? From other people's work. They hear just, we were just talking about the battleground of flaws and mistakes and errors but things that were just beautifully done. Is there something that pops the mind? Well, when things are beautifully done, usually there's a well set, a set of abstraction layers. So the whole thing works in unison nicely? Yes. And when I say abstraction layer, that means two different components when they work together, they work independently. They don't have to know what the other one is doing. So that decoupling? Yeah. So the famous one was the network stack. There's a seven layer network stack, you know, data transport and protocol and all the layers. And the innovation was, is when they really wrote, got that right. Because networks before that didn't define those very well. The layers could innovate independently and occasionally the layer boundary, what, you know, the interface would be upgraded. And that let, you know, the design space breathe. You could do something new in layer seven without having to worry about how layer four worked. And so good design does that. And you see it in processor designs. When we did the Zen design at AMD, we made several components very modular. And you know, my insistence at the top was, I wanted all the interfaces defined before we wrote the RTL for the pieces. One of the verification leads had, if we do this right, I can test the pieces so well independently. When we put it together, we won't find all these interaction bugs because the floating point knows how the cache works. And I was a little skeptical, but he was mostly right. That the modularity design greatly improved the quality. Is that universally true in general? Would you say about good designs? The modularity is like usual. We talked about this before. Humans are only so smart. Like, and we're not getting any smarter, right? But the complexity of things is going up. So, you know, a beautiful design can't be bigger than the person doing it. It's just, you know, their piece of it. Like the odds of you doing a really beautiful design is something that's way too hard for you is low. Right. If it's way too simple for you, it's not that interesting. It's like, well, anybody could do that. But when you get the right match of your expertise and, you know, mental power to the right design size, that's cool, but that's not big enough to make a meaningful impact in the world. So now you have to have some framework to design the pieces so that the whole thing is big and harmonious. But, you know, when you put it together, it's, you know, sufficiently, sufficiently interesting to be used. And, you know, so that's like a beautiful design is. Matching the limits of that human cognitive capacity to the modularity can create and creating a nice interface between those modules. And thereby, do you think there's a limit to the kind of beautiful complex systems we can build with this kind of modular design is like, you know, if we build increasingly more complicated, you can think of like the internet. Okay, let's scale it down. Well, you can think of like social network like Twitter as one computing system. And, but those are the little modules. Yeah. Right. But it's built on, it's built on so many components. Nobody at Twitter even understands. Right. So, so if an alien showed up and looked at Twitter, he wouldn't just see Twitter as a beautiful, simple thing that everybody uses, which is really big. You would see the networks it runs on the fiber optics, the data is transported, the computers, the whole thing is so bloody complicated. Nobody Twitter understands it. And so that's what the alien would see. So yeah, if an alien showed up and looked at Twitter or looked at the various different network systems that you can see on earth. So imagine they were really smart. They could comprehend the whole thing. And then they sort of, you know, evaluated the human and thought, this is really interesting. No human on this planet comprehends the system they built. No individual or what they even see individual humans as the, like we humans are very human centric entity centric. And so we think of us as the organ as the central organism and the networks as just the connection of organisms, but from a perspective of an alien from an outside perspective, it seems like, yeah, we're just, yeah, I get it. Where they answered it to the end colony. The end colony, yeah, or the result of production of the end colony, which is like cities. It's, it's a, yeah, in that sense, human is a pretty impressive, the modularity that we're able to and the, and how robust we are to noise and mutation, all that kind of stuff. It's tested all the time. Yeah. You know, you build all these cities with buildings and you get earthquakes occasionally. And some, you know, wars, earthquakes, viruses, everyone's in the well. You know, changes in business plans for, you know, like shipping or something like, like, as long as there's all stress test, then it keeps adapting to the situation. So that's a curious phenomenon. Well, let's go. Let's talk about Moore's law a little bit. Let the broad view of Moore's law was just exponential improvement of computing capability. Like, open AI, for example, recently published this kind of papers looking at the exponential improvement in the training efficiency of neural networks. For like, imagine that and all that kind of stuff, which has got better on this purely software side. Just figuring out better tricks and algorithms for training neural networks. And that seems to be improving significantly faster than the Moore's law prediction. You know, so that's in the software space. Like, what do you think if Moore's law continues or if the general version of Moore's law continues? Do you think that comes mostly from the hardware from the software, some mix of the two, some interesting, totally, so not the reduction of the size of the transistor kind of thing, but more in the, in the totally interesting kinds of innovations in the hardware space, all that kind of stuff. Well, there's like half a dozen things going on in that graph. So one is there's initial innovations that had a lot of headroom to be exploited. So, you know, the efficiency of the networks is improved dramatically. And then the decomposability of those and the use, you know, they started running on one computer, then multiple computers, then multiple GPUs and then arrays of GPUs and they're up to thousands. And at some point, so it's sort of like they were consumed, they were going from like a single computer application to a thousand computer application. So that's not really a Moore's law thing. That's an independent vector. How many computers can I put on this problem? Because the computers themselves are getting better on like a Moore's law rate, but their ability to go from one to 10 to 100 to a thousand, you know, was something. And then multiplied by, you know, the amount of computers it took to resolve like Alex Net, to ResNet, to transform versus it's been quite, you know, steady improvements. But those are like escars, I don't think that's the exactly kind of, escars that are underlying Moore's law from the very beginning. So what's the biggest, what's the most productive, rich source of escars in the future, do you think? Is it hardware, is it software? So hardware is going to move along relatively slowly, like, you know, double performance every two years. There's still, like how you call that slow. Yeah, that's the slow version. The snail's pace of Moore's law. Maybe we shouldn't, we shouldn't, we should trademark that one. Whereas the scaling by number of computers, you know, can go much faster, you know, I'm sure at some point Google had a, you know, other initial search engine was running out at the laptop, you know, like, yeah. And at some point they really worked on scaling at them and they factored the, the indexer from, you know, this piece and this piece and this piece and they spread the data on Moore Moore things and, you know, they did a dozen innovations. But as they scaled up the number of computers on that, it kept breaking, finding new bottlenecks in their software and their schedulers and, and made them rethink, like, it seems insane to do a scheduler across a thousand computers, the schedule parts of it and then send the results to the one computer. But if you want to schedule a million searches, that makes perfect sense. So, so there's the scaling by just quantity is probably the richest thing. But then as you scale quantity, like a network that was great on 100 computers, maybe completely the wrong one, you may pick a network that's 10 times slower on 10,000 computers, like per computer. But if you go from 100 to 10,000, it's 100 times. So that's one of the things that happened when we did internet scaling. This efficiency went down, not up. The future of computing is inefficiency, not efficiency. But scales, inefficient scale. It's scaling faster than inefficiency by two. And as long as there's, you know, dollar value there, like scaling costs lots of money. Yeah. But Google showed, Facebook showed, everybody showed that the scale was worth money was that. It was, and so it was worth the financial. Do you think is it possible that, like, basically, the entirety of earth will be like a computing surface? Like this table will be doing computing. This hedgehog will be doing computing. Like everything, really inefficient, don't computing will be the number. And the picture books they call it, computer, and we turn everything into computing. Well, most of the elements aren't very good for anything. Like you're not going to make a computer out of iron. Like, you know, silicon and carbon have like nice structures. You know, we'll see what you can do with the rest of it. People talk about, well, maybe we can turn the sun into a computer, but it's it's hydrogen and a little bit of helium. So what I mean is more like actually just adding computers to everything. Oh, okay. So you're just converting all the mass of the universe into a computer? No, no, so not using the, the ironic from the simulation point of view is like the simulator build mass, the simulator. Yeah, I mean, yeah. So I mean, ultimately, this is all heading towards a simulation. Yeah, well, I think I might have told you this story. A Tesla, they were deciding, so they want to measure the current coming out of the battery and they decide between putting a resistor in there and putting a computer with a sensor in there and the computer was faster than the computer. I worked on in 1982 and we chose the computer because it was cheaper than the resistor. So sure, this hedgehog, you know, cost $13 and we can put a, you know, an AI that's the smartest you in there for five bucks, it'll have one. So computers will be, you know, be everywhere. I was hoping it wouldn't be smarter than me because, well, everything's going to be smarter than you. But you were saying it's inefficient. I thought it was better to have a lot of double. Well, well, more is law will slowly compact that stuff. So even the dumb things will be smarter than us. The dumb things are going to be smart or they're going to be smart enough to talk to something that's really smart. You know, it's like, well, just remember like a big computer jump. Yeah. It's like an inch by an inch and, you know, 40 microns thick. It doesn't take very much, very many atoms to make a high power computer and 10,000 of them can fit in a shoe box. But you know, you have the cooling and power problems, but you know, people are working on that. But they still can't write compelling poetry or music or understand what love is or have a fear of mortality. So we're still winning. Neither can most of humanity. Well, they can write books about it. So but speaking about this, this walk along the path of innovation towards the dumb things being smarter than humans, you are now the CTO of of 10 store and two as of two months ago, they build hardware for deep learning. How do you build scalable and efficient deep learning? This is such a fascinating space. Yeah. Yeah. So it's interesting. So up until recently, I thought there was two kinds of computers. There are serial computers that run like C programs and then there's parallel computers. So the way I think about it is, you know, parallel computers have given parallelism. Like GPUs are great because you have a million pixels and modern GPUs run a program on every pixel. They call it a shader program. Right. Or like finite element analysis, you've you've built something, you know, you make this into a little tiny chunks to give each chunk to a computer. So you're given all these chunks of parallelism like that. But most C programs, you write this linear narrative and you have to make a go fast. They make a go fast. You predict all the branches, all the data fetches and you run that more parallel, but that's found parallelism. AIs. I'm still trying to decide how fundamental this is. It's a given parallelism problem. But the way people describe the neural networks and then how they write them in PyTorch, it makes graphs. Yeah. That might be fundamentally different than the GPU kind of parallelism. Yeah, it might be because when you run the GPU program on all the pixels, you're running. Like, you know, it depends, you know, this group of pixels say it's background blue and it runs a really simple program. But this pixel is, you know, some patch of your face. So you have some really interesting shader program to give you impression of translucency. But the pixels themselves don't talk to each other. There's no graph. Right. So you do the image and then you do the next image and you do the next image and you run 8 million pixels, 8 million programs every time and modern GPUs have like 6,000 thread engines in them. So, you know, to get 8 million pixels, each one runs a program on, you know, 10 or 20 pixels. And that's how that's how they work. There's no graph. But you think graph might be a totally new way to think about hardware. So Roger, good to read. I've been having this good conversation about given versus found parallelism. And then the kind of walk as we got more transistors like, you know, computers way back when did stuff on scalar data. Then we did on vector data, famous vector machines. Now we're making computers that operate on matrices. Right. And then the category we said that it was next was spatial. Like imagine you have so much data that, you know, you want to do the compute on this data. And then when it's done, it says, send the result to this pile of data on some software on that. And it's better to think about it spatially than to move all the data to a central processor and do all the work. So especially I mean, moving in the space of data as opposed to moving the data. Yeah, you have a petabyte data space spread across some huge array of computers. And when you do a computation somewhere, you send the result of a computation or maybe a pointer to the next program, some other piece of data and do it. But I think a better word might be graph and all the AI neural networks or graphs. Do some computations and a result here to another computation, do a data transformation, do emerging, do a pooling, do another computation. Is it possible to compress and say how we make this thing efficient, this whole process efficient, this different? So first, the fundamental elements in the graphs are things like matrix, multipliers, convolutions, data manipulations and data movements. Yeah. So GPUs emulate those things with their little singles, you know, basically running a single threaded program. And then there's an, you know, an envy to cause it to warp or they group a bunch of programs that are similar together. So for efficiency and instruction use. And then at a higher level, you kind of, you take this graph and you say this part of the graph is a matrix multiplier which runs on these 30 use res. But the model at the bottom was built for running programs on pixels, not executing graphs. So it's emulation. Awesome. Yes. So it's possible to build something that natively runs graphs. Yes. So that's what 10 store and did. So where are we on that? How like in the history of that effort, are we in the early days? Yeah. 10 store and started by a friend of mine, LeBisa Bajek and I, I was his first investor. So I've been, you know, kind of following him and talking to him about it for years and in the fall when I was considering things to do. I decided, you know, the, we, we held a conference last year with a friend organized it. And we, we wanted to bring in thinkers and two of the people were Andre Karpathy and Chris Ladner and Andre gave this talk. It's on YouTube called software 2.0, which I think is great, which is where we went from programs, computers, where you write programs to data program computers, you know, like the future is, you know, of software as data programs, the networks. And I think that's true. And then Chris has been work, he worked on LLVM, the low level virtual machine, which became the intermediate representation for all compilers. And now he's working on another project called MLIR, which is mid level, intermediate representation, which is essentially under the graph about how do you represent that kind of computation and then coordinate large numbers of potentially heterogeneous computers. And I would say technically 10st torrents, you know, two pillars of those, those, those two ideas offered 2.0 in mid level representation, but it's in service of executing graph programs. The hardware is designed to do that. So it's including the hardware piece. And then the other cool thing is for a relatively small amount of money they did a test chip and two production chips. So it's like a super effective team and, and unlike some AI startups where if you don't build the hardware to run the software that they really want to do, then you have to fix it by writing lots more software. So the hardware naturally does, agents multiply, convolution, the data manipulations and the data movement between processing elements that you can see in the graph, which I think was all pretty clever. And that's what I'm working on now. So the, I think it's called the Grace call processor introduced last year. It's, you know, there's a bunch of measures of performance we're talking about horses. It seems to outperform 368 trillion operations per second. Seems to outperform Nvidia's Tesla T4 system. So these are just numbers. What do they actually mean in real world performance? Like what are the metrics for you that you're chasing in your horse race? Like what do you care about? Well, first, so the native language of, you know, people who write AI network programs is PyTorch now. PyTorch's TensorFlow. There's a couple others. The PyTorch is one over TensorFlow. It's just I'm not an expert on that. I know many people who have switched from TensorFlow to PyTorch. Yeah. And there's technical reasons for it. And I use both, both. There's still awesome. Those are still awesome. But the deepest love is for PyTorch currently. Yeah. There's more love for that. And that may change. So the first thing is when they write their programs, Ken, the hardware executed pretty much as it was written. Right. So PyTorch turns into a graph. We have a graph compiler that makes that graph. Then it fractions the graph down. So if you have big matrix multiply, we turn it in the right size chunks to run on the processing elements. It hooks all the graph up at least at all the data. There's a couple of mid-level representations of it that are also simulatable. So that if you are writing the code, you can see how it's going to go through the machine, which is pretty cool. And then at the bottom, it's scheduled kernels like mass, data manipulation, data movement kernels, which do this stuff. So we don't have to run, write a little program to do a matrix multiply, because we have a big matrix multiplier. Like there's no SIMD program for that. But there is scheduling for that. Right. So that one of the goals is if you write a piece of PyTorch code that looks pretty reasonable, you should be able to compile it, run it on the hardware without having to tweak it and do all kinds of crazy things to get performance. There's not a lot of intermediate steps. Right. It's running directly as right now. Like on a GPU, if you write a large matrix multiply naively, you'll get five to 10% of the peak performance of the GPU. Right. And then there's a bunch of people publish papers on this. And I read them about what steps do you have to do? And it goes from pretty reasonable, well, transpose one of the matrices. So you do row order, not column ordered, you know, block it so that you can put a block of the matrix on different SMs, you know, groups of threads. But some of it gets in the little, little details like you have to schedule it just so so you don't have registered conflicts. So the, the, the, the, the column coot in inches. Coot in inches. I love it. To get to the optimal point, you either write a pre, use a pre written library, which is a good strategy for some things, or you have to be an expert in micro architecture at the program. Right. So the opposition step is more complicated with the GPU. So our, our goal is if you write PyTorch, that's good PyTorch, you can do it. Now there's, as the networks are evolving, you know, they've changed from convolutional to matrix multiply. The people are talking about conditional graphs. We're talking about very large matrices. They're talking about sparsity. They're talking about problems that scale across many, many chips. So the native, you know, data item is a, as a packet. Like so you send the packet to a processor, it gets processed. It does a bunch of work and then it may send packets to other processors. And they execute and like a data flow graph kind of methodology. Got it. We have a big network on chip. And then 16, the next second chip has 16 ethernet ports to hope lots of them together. And it's the same graph compiler across multiple chips. So that's where the scale comes in. So it's built to scale naturally. Now my experience with scaling is as you scale, you run into lots of interesting problems. So scaling is a mountain climb. Yeah. So the hardware is built to do this. And then we're in the process of these are software part to this with with Ethan and all that. Well, the, you know, the protocol to bottom, you know, we send, you know, we, it's an ethernet, five, but the protocol basically says send the packet from here to there. It's all point to point. The header bit says which processor to send it to. And we basically take a packet off our on chip network, put an ethernet header on it, send it to the other end, strip the header off and send it to the local thing. It's pretty straightforward. Human interaction is pretty straightforward to when we get a million of us. We just crazy stuff together. Come here. So is that the goal is scale? So like, for example, I have been recently doing a bunch of robots at home for my own personal pleasure. Am I going to ever use 10 store and what is this more for? There's all kinds of problems like there's small inference problems or small training problems or big training problems. What's the big goal? Is it the big infant training problems or the small training problems? There's no one of the goals is the scale from 100 millawatts to a mega watt. You know, so like really have some range on the problems in the same kind of AI programs work at all different levels. So that's cool. The natural since the natural data item is a packet that we can move around. It's built to scale. But so many people have, you know, small problems. Right. Right. But but you know, they're like inside that phone is a small problem to solve. So do you see 10 store potentially being inside a phone? Well, the power efficiency of local memory, local computation and the way we built it is pretty good. And then there's a lot of efficiency on be able to do conditional graphs and sparsity. I think it's it's for complicated networks that want to go into small factors. It's quite good. But we have to prove that that's what it's a fun problem. And that's the early days of the company, right? It's a couple of years you said. But you think you invested, you think they'll legit and see join. Yeah. Well, that's well, it's also it's a really interesting place to be like AI was really exploding. You know, and I looked at some other opportunities like build a faster processor, which people want. But that's more on incremental path than what's going to happen in AI in the next 10 years. Yeah. So this is kind of, you know, an exciting place to be part of the revolutions will be happening in a very space. And then lots of people working on it, but there's lots of technical reasons why some of them, you know, aren't going to work out that well. And that's that's interesting. And there's also the same problem about getting the basics right. Like we've talked to customers about exciting features. And at some point, we realized that each of them was realizing they want to hear first about memory bandwidth, local bandwidth, compute intensity, program ability. They want to know the basics, power management, how the network ports work. Where are the basics? Do all the basics work? Because it's easy to say we got this great idea that, you know, the crack, GPT three. But the people we talked to want to say, if I buy that, so we have a piece of express card with our chip on it. If you buy the card, you plug it in your machine, you download the driver. How long does it take me to get my network to run? Right. Right. No, that's a real question. It's a very basic question. So, yeah, is there an answer to that yet? Or is it trying to get a goal? It's like an hour. Okay. One can I buy a test warrant? Pretty soon for my for the small case training. Yeah, pretty soon. Month. Good. I love the idea of you inside a room with the Karpathy, under Karpathy and Chris Ladner. Very, very interesting, very brilliant people, very out of the box thinkers, but also like first principles thinkers. Well, they both get stuff done. They only get stuff done to get their own projects done. They talk about it clearly. They educate large numbers of people and they've created platforms for other people to go do their stuff on. Yeah. The clear thinking that's able to be communicated is kind of impressive. It's kind of remarkable. Yeah. I'm a fan. Well, let me ask because I talked to Chris actually a lot these days. He's been one of the, just to give him a shout out in the, he's been so supportive as a human being. So everybody's quite different. Like great engineers are different, but he's been like sensitive to the human element in a way that's been fascinating. Like he was one of the early people on this stupid podcast that I do to say like, don't quit this thing and also talk to whoever the hell you want to talk to. That kind of from a legit engineer to get like props and be like, you could do this. That was, I mean, that's what a good leader does, right? It's just kind of let a little kid do his thing. Like go, go do it. Let's see, let's see what turns out. That's a, that's a pretty powerful thing. But what do you, what's your sense about? He used to be, he, no, I think stepped away from Google, right? He said, sci-fi, I think, what's really impressive to you about the things that Chris has worked on? Because it's that we mentioned the optimization that compiled design stuff, the LLVM. Then there's, he's also a Google work that the TPU stuff. He's obviously worked on Swift, so the programming language side, talking about people that work in the entirety of the stack. What, from your time interacting with Chris and knowing the guy, what's really impressive to you? It just inspires you. Well, well, like LLVM became, you know, the platform, the de facto platform for, you know, compilers. Like, it's amazing. And, you know, it was good code quality, good design choices. He hit the right level of abstraction. There's a little bit of the right time and the right place. And then he built a new programming language called Swift, which, you know, after, you know, let's say some adoption resistance became very successful. I don't know that much about his work at Google, although I know that, you know, that was a typical, they started TensorFlow stuff. And, you know, it was new is, you know, they wrote a lot of code. And then at some point it needed to be refactored to be, you know, because it's development slowed down. Why pie, pie towards started a little later and then passed it. So he did a lot of work on that. And then his idea about MLIR, which is what people started to realize is the complexity to suffer stack above the low level IR was getting so high that forcing the features of that until a level was, was putting too much of a burden on it. So he's splitting that in the multiple pieces. And that was one of the inspirations for our software stack where we have several intermediate representations that are all executable. And you can look out and do transformations on them before you lower the level. So that was, I think we started before MLIR really got, you know, far enough along to use. But we're interested in that. He's really excited about MLIR. That's just like little baby. So he, and there seems to be some profound ideas on that that are really useful. So each one of those things has been as the world of software gets more and more complicated. How do we create the right abstraction levels to simplify it in a way that people can now work independently on different levels of it. So I would say all three of those projects, all of you, I'm swayed and MLIR did that successfully. So I'm interested what he's going to do next in the same kind of way. Yes. On either the TPU or maybe the NVIDIA GPU side, how does 10 store and you think or the ideas and relying it doesn't have to be 10 store and just this kind of graph focused. Graph centric hardware, deep learning centric hardware, beat and videos. Do you think is possible for it to basically overtake Nvidia? Sure. What's that process look like? What's that journey look like, you think? Well, GPUs were built around shader programs on millions of pixels, not to run graphs. Yes. So there's a hypothesis that says the way the graphs, you know, our built is going to be really interesting to be inefficient on computing this. And then the primitives is not a SIMD program. It's matrix multiply convolution. And then the data manipulation are fairly extensive about how to do a fast transpose with a program. I don't know if you ever written a transpose program. They're ugly and slow, but in hardware, you can do really well. Like I give you an example. So when GPU accelerators started doing triangles, like, you have a triangle, which maps on the set of pixels. So you built, it's very easy, straightforward to build a hardware engine that'll find all those pixels. And it's kind of weird because you walk along the triangle to get to the edge. And then you have to go back down to the next row and walk along. And then you have to decide on the edge. If the line of the triangle is like half on the pixel, what's the pixel color? Because it's half of this pixel and half the next one. That's called rasterization. And you're saying that could be done in hardware? No, that's an example of that operation as a software program is really bad. I've written a program that did rasterization. The hardware that does it is actually less code than the software program that does it and it's way faster. Right. So there are certain times when the abstraction you have rasterize a triangle, you know, execute a graph, you know, components of a graph. But the right thing to do in the hardware software boundary is for the hardware to naturally do it. So the GPU is really optimized for the rasterization of triangles. Well, no, that's just, well, like in a modern, you know, that's a small piece of modern GPUs. What they did is that they still rasterize triangles when you're running a game. But for the most part, most of the computation here in the GPU is running shader programs. But there's single threaded programs on pixels, not graphs. That's the honest. Let's say I don't actually know the math behind shader shading and lighting and all that kind of stuff. I don't know what they look like. It's a little simple floating point programs or complicated ones. You can have 8,000 instructions in a shader program. But I don't have a good intuition why it could be paralyzed so easily. No, it's because you have 8 million pixels in every single. So we have a light, right? Yeah. That comes down. The angle, you know, the amount of light, like, like say this is a line of pixels across this table. Right. The amount of light on each pixel is subtly different. And each pixel is responsible for figuring out where to run. Figure it out. So that pixel says, I'm this pixel. I know the angle of the light. I know the occlusion, I know the color I am. Like every single pixel here is a different color. Every single pixel gets a different amount of light. Every single pixel has a subtly different translucency. So to make it look realistic, the solution was you run a separate program on every pixel. See, but I thought there's a reflection from all over the place. Is it every pixel? Yeah, but there is. So you build a reflection map, which also has some pixelated thing. And then when the pixels looking at the reflection map has to calculate what the normal of the surface is. And it does it per pixel. By the way, there's both loads of hacks on that. You know, like you may have a lower resolution light map, reflection map. There's all these, you know, tax they do. But at the end of the day, it's per pixel computation. And it's so happen that you can map graph like computation onto the pixel-centric complex. You could do floating point programs on convolution and the matrices. And Nvidia invested for years in CUDA, first for HPC, and then they got lucky with the AI trend. But do you think they're going to essentially not be able to hardcore pivot out of their hole? We'll see. That's always interesting. How often do big companies hardcore pivot? Occasionally. How much do you know about Nvidia, folks? Some. Some. Yeah. I'm curious as well, who's ultimately as a... Oh, they've innovated several times. But they've also worked really hard on mobile. They worked really hard on radios. You know, they're fundamentally a GPU company. Well, they tried to pivot. It's an interesting little game and play in autonomous vehicles, right? With... Or semi-autonomous like playing with Tesla and so on and seeing that's a dipping at toe into that kind of pivot. They came out with this platform, which is interesting technically. Yeah. It's $3,000 watt. You know, $1,000 watt, $3,000 dollar GPU platform. I don't know if it's interesting technically. It's interesting for us off-cally. Technically, I don't know if it's the execution, the craftsmanship is there. I'm not sure. But I didn't get a sense. I think they were repurposing GPUs for an autonomous solution. Right. It's not a real pivot. They didn't build a ground up solution. Right. Like the chips inside Tesla are pretty cheap. Mobilized been doing this. They're doing the classic work from the simplest thing. They were building 40 millimeter square millimeter chips. And Nvidia, their solution had 800 millimeter chips and 200 millimeter chips. And like, both those are really expensive DRAMs. And it's a really different approach. The mobile I fit the, let's say, automotive, cost-informed factor. And then they added features as it was economically viable. Nvidia said, take the biggest thing and we're going to go make it work. And that's also influenced waymo. There's a whole bunch of autonomous startups where they have a 5,000 watt server and a trunk. But that's because they think, well, 5,000 watts and $10,000 is okay because it's replacing a driver. Elon's approach was that port has to be cheap enough to put it in every single Tesla, whether they turn on autonomous driving or not. Which, and mobile I was like, we need to fit in the bomb and cost structure that car companies do. So they may sell you a GPS for 1,500 bucks. But the bomb for that's like $25. Well, and for mobile I, it seems like neural networks were not first class citizens, like the computation. They didn't start out as a... Yeah, it was a CB problem. Yeah. And then classic CB and found stoplights and lines. They were really good at it. And they never, I mean, I don't know what's happening now, but they never fully pivoted. I mean, it's like, it's the Nvidia thing. And then as opposed to, if you look at the new Tesla work, it's like neural networks from the ground up. Yeah, right. Yeah, and even Tesla started with a lot of CB stuff and it non-draight has basically been eliminated. Yeah. No, move everything into the network. So without this isn't like confidential stuff, but you sitting on a porch looking over the world, looking at the work that Andre is doing, that Elon's doing with Tesla autopilot, do you like the trajectory of where things are going in the heart? Well, they're making serious progress. I like the videos of people driving the beta stuff. I get to take into pretty complicated intersections and all that, but it's still an intervention per drive. I mean, I have autopilot, the current autopilot, my Tesla, I use it every day. Do you have full self-driving beta or no? So you like where this is going? They're making progress. It's taking longer than anybody thought. My wonder was, is hardware 3, is it enough computing off by 2, off by 5, off by 10, off by 100? Yeah. And I thought it probably wasn't enough, but they're doing pretty well with it now. And one thing is the data that gets bigger, the training gets better, and then there's this interesting thing is, you sort of train and build an arbitrary size network that solves the problem, and then you refactor the network down to the thing that you can afford to ship. Right? So the goal isn't to build a network that fits in the phone. It's to build something that actually works. And then how do you make that most effective on the hardware you have? And they seem to be doing that much better than a couple of years ago. Well, the one really important thing is also what they're doing well is how to iterate that quickly, which means like it's not just about one time deployment, one building, it's constantly iterating the network and trying to automate as many steps as possible, right? And that's actually the principles of the software 2.0, like you mentioned with Andre, is it's not just, I mean, I don't know what the actual, his description of software 2.0 is, if it's just high level philosophical or there's specifics, but the interesting thing about what that actually looks in the real world is, it's that what I think Andre calls the data engine. It's like, it's the iterative improvement of the thing. The annual network that does stuff fails at a bunch of things and learns from it over and over and over. So you constantly discovering edge cases. It's very much about like data engineering, like figuring out, it's kind of what you were talking about with TestToin is you have the data landscape, you have to walk along that data landscape in a way that it's constantly improving the annual network. And that feels like that's the central piece itself. Yeah, so there's two pieces of it. You find edge cases that don't work and then you define something that goes get you data for that. But then the other constraint is whether you have to label it or not. Like the amazing thing about like the GPT-3 stuff is it's unsupervised. So there's essentially infinite amount of data. Now there's obviously infinite amount of data available from cars of people successfully driving. But the current pipelines are mostly running on labeled data, which is human limited. So an app becomes unsupervised. Right. It'll create unlimited amount of data, which then will scale. Now the network that may use that data might be way too big for cars, but then there'll be the transformation from now, if unlimited data, I know exactly what I want. Now can I turn that into something that fits in the car? And that process is going to happen all over the place. Every time you get to the place where you have unlimited data, and that's what software 2.0 is about unlimited data training networks to do stuff. About humans writing code to do it. And ultimately also trying to discover like you're saying this self-supervised formulation of the problem. So the unsupervised formulation of the problem. Like in driving, there's this really interesting thing, which is you look at a scene that's before you, and you have data about what a successful human driver did in that scene, you know, one second later. It's a little piece of data that you can use just like with GPT-3 as training. Currently, even though Tesla says they're using that, it's an open question to me. How far can you, can you solve all of the driving with just that self-supervised piece of data? And like I think that's what common AI is doing. That's what common AI is doing, but the question is how much data, so what common AI doesn't have is as good of a data engine, for example, as Tesla does. That's where the organization of the data, I mean, as far as I know, I haven't talked to George, but they do have the data. The question is how much data is needed, because we say infinite, very loosely here. And then the other question, which you said, I don't know if you think it's still an open question, is are we on the right order of magnitude for the compute necessary? That is this, is it like what Elon said, this chip that's in there now is enough to do full self-driving or do any other order of magnitude? I think nobody actually knows the answer to that question. I like the confidence that Elon has, but... Yeah, well, see, there's another funny thing is you don't learn to drive with infinite amounts of data. You learn to drive with intellectual framework that understands physics and color and horizontal services and laws and roads and all your experience from manipulating your environment. There's so many factors going into that, so then when you learn to drive, driving is a subset of this conceptual framework that you have. So self-driving cars right now are teaching of the drive with driving data. You never teach a human to do that. You teach a human, all kinds of interesting things, like language, like don't do that, watch out. There's all kinds of stuff going on. This is where you, I think, the previous time we talked about, where you poetically disagreed more than my naive notion about humans. I just think that humans will make this whole driving thing really difficult. Yeah, all right. I said humans don't move that slow. The fullest experience. The humans are a ballistics problem, which is like poetry to me. It's very possible in driving there, indeed, purely a ballistics problem. And I think that's probably the right way to think about it. But I still continue to surprise me with those damp pedestrians, the cyclists, other humans and other cars. Yeah, but it's going to be one of these compensating things. So when you're driving, you have an intuition about what humans are going to do. But you don't have 360 cameras in radars and you have an intention problem. So the self-driving car comes in with no attention problem, 360 cameras, a bunch of other features. So they'll wipe out a whole class of accidents. And emergency braking with radar, and especially as it gets AI enhanced, will eliminate collisions. But then you have the other problems of these unexpected things where you think your human intuition is helping, but then the cars also have a set of hardware features that you're not even close to. And the key thing, of course, is if you wipe out a huge number of accidents, then it might be just way safer than a human driver, even though even if humans are still a problem, that's hard to figure out. Yeah, that's probably what happens. The times cars will have a small number of accidents humans would have avoided, but they'll get rid of the bulk of them. What do you think about Tesla's Dojo efforts, or it can be bigger than Tesla in general? It's kind of like the tense, torrent trying to innovate. This is the economy that should accompany, try to from scratch build its own neural network training hardware. Well, first I think it's great. So we need lots of experiments. Right? And there's lots of startups working on this and they're pursuing different things. I was there when we started Dojo and it was sort of like, what's the unconstrained computer solution to go do very large training problems? And then there's fun stuff like, we said, well, we have this 10,000 watt board to cool. Well, you go talk to guys at SpaceX and they think 10,000 watts is a really small number, not a big number. And there's brilliant people working on it. I'm curious to see how it'll come out. I couldn't tell you, I know it pivoted a few times since I left. So the cooling, this need to be a big problem. I do like what Elon said about it, which is like, we don't want to do the thing unless it's way better than the alternative. Whatever the alternative is. So it has to be way better than like racks of GPUs. Yeah. And the other thing is just like, you know, the Tesla autonomous driving hardware, it was only serving one software stack. And the hardware team and the software team were tightly coupled. Now, if you're building a general purpose AI solution, and you know, there's so many different customers with so many different needs. Now, something Andrei said is, I think this is amazing. 10 years ago, like vision, recommendation, language were completely different disciplines. And he said, the people who couldn't talk to each other. And three years ago, it was all neural networks, but the very different neural networks. And recently it's converging on one set of networks. They vary a lot in size, obviously, they vary in data, vary in outputs. But the technology has converged a good bit. Yeah, these transformers behind GBT3, it seems like they could be applied to video, they could be applied to a lot of, yeah. And it's like, and they're all really. And it was like, literally replace letters with pixels. Yeah. It does vision. It's amazing. So. And then size actually improves the thing. So the bigger it gets, the more compute you throw at it, the better it gets. And the more data you have, the better it gets. So. So then you start to wonder, well, is that a fundamental thing? Or is this just another step to some fundamental understanding about this kind of computation? Which is really interesting. I assume is don't want to believe that that kind of thing will achieve conceptual understandings you were saying. Like you'll figure out physics, but maybe it will. Maybe. Probably will. Well, it's worse than that. It'll understand physics in ways that we can't understand. I like your Stephen Wilhelm talk where he said, you know, there's three generations of physics. There was physics by reasoning. Well, big things should fall faster than small things, right? That's reasoning. And then there's physics by equations. Like, you know, but the number of programs in a world that solves us the single equations relatively low, almost all programs have, you know, more than a one line code, maybe a hundred million lines of code. So he said, then we're going to physics by equation, which is his project, which is cool. I might point out there, there was two generations of physics before reasoning habit. Like all animals, you know, no things fall and birds fly and, you know, predators know how to, you know, solve a differential equation to cut off a accelerating, you know, curving animal path. And then there was, you know, the gods did it. Right. So, yeah. Right. So there was, you know, there's five generations. You know, software 2.0 says programming things is not the last step. Data. So there's going to be a physics, fast Stevens, Wilhelm's comp. That's not explainable. That's not too achievable. And actually, there's no reason that I can see while that even that's a limit. Like there's something beyond that. I mean, usually, usually when you have this hierarchy, it's not like, well, if you have this step and this step and this step and the real qualitatively different, conceptually different, it's not obvious why, you know, six is the right ant number of hierarchy steps in, not seven or eight or well, then it's probably impossible for us to comprehend something that's beyond the thing that's not explainable. Yeah. But the thing that, you know, understands the thing that's not explainable to us, well, it conceives the next one and like, I'm not sure why there's a limit to it. Click your brain heart, since this had story. If we look at our own brain, which is an interesting illustrative example in your work with test torrent and trying to design deep learning architectures, do you think about the brain at all? Maybe from a hardware designer perspective, if you could change something about the brain, what would you change or do? Funny question. Like, how would you do that? So your brain is really weird. Like, you know, your cerebral cortex where we think we do most of our thinking is what, like six or seven neurons thick. Yeah. Like, that's weird. Like all the big networks are way bigger than that. Like way deeper. So that seems odd. And then, you know, when you're thinking, if it's, if the input generates a result you can lose, it goes really fast. But if it can't, that generates an output that's interesting, which turns into an input and then your brain, to the point where you mull things over for days and how many trips through your brain is that, right? Like, it's, you know, 300 milliseconds or something, it gets through seven levels of neurons. I forget the number exactly. But then it does it over and over and over as it searches. And the brain clearly, it looks like some kind of graph because you have a neuron with, you know, connections and it talks to other ones and it's locally very computationally intense. But it's also does sparse computations across a pretty big area. There's a lot of messy biological type of things and it's, it's meaning like, first of all, there's mechanical, chemical and electrical signals that's all that's going on. And there's the, the asynchronicity of signals and there's like, there's just a lot of variability. It seems continuous and messy and just the mess of biology and it's unclear whether that's a good thing or it's a bad thing because if it's a good thing that we need to run the entirety of the evolution, well, we're going to have to start with basic bacteria to create something. You could build a brain with 10 layers. Would that be better or worse or more, more connections or less connections or, you know, we don't know to what level our brains are optimized. But if I was changing things like, like, you know, you can only hold like seven numbers in your head. Yeah. Like, why not 100 or a million? And that was out of that. Like, and why can't, like, why can't we have like a floating point processor that can compute anything we want? Like and see it all properly. Like, that would be kind of fun. And why can't we, we see in four or eight dimensions. Like, like, like, three days kind of a drag. Like all the hard mass transforms are up in multiple dimensions. So there's, you know, you could imagine a radar architecture that, you know, you could enhance with a whole bunch of features that would be, you know, really useful for thinking about things. It's possible that the limitations you're describing are actually essential for like, the constraints or essential for creating like the depth of intelligence, like that, the ability to reason, you know, it's hard to say because like, your brain is clearly a parallel processor, you know, you know, 10 billion neurons talking to each other at a relatively low clock rate. But it produces something that looks like a serial thought process. It's a serial narrative in your head. That's true. But then there are people famously who are visual thinkers, like, I think I'm a relatively visual thinker. I can imagine any object rotated in my head and look at it. And there are people who say they don't think that way at all. And recently I read an article about people who say they don't have a, they don't have a voice in their head. They can talk. But when they, you know, it's like, well, what are you thinking? They'll describe something that's visual. So that's curious. Now, if you're saying, if we dedicated more hardware to holding information like, you know, 10 numbers or a million numbers, like with that, just distract us from our ability to form this kind of singular identity. Like it dissipates somehow. But maybe, you know, future humans will have many identities that have some higher level organization, but can actually do lots of more things in parallel. Yeah, there's no reason, if we're thinking modularly, there's no reason we can have multiple consciousnesses in one brain. Yeah. And maybe there's some way to make it faster so that the, you know, the, the area of the computation could, could still have unified feel to it, but while still having way more ability to do parallel stuff at the same time, could definitely be improved. Could be improved. Yeah. Well, it's, it's pretty good right now. Actually, people don't give it enough credit. The thing is pretty nice. Then the, you know, the, the fact that the right ends seem to be on, give a nice like spark of beauty to the whole experience. I don't know. I don't know if it can be improved easily. It could be more beautiful. I don't know how I, what do you mean? What do you mean? How? All the ways you can't imagine. No, but that's the whole point. I wouldn't be able to imagine the fact that I can imagine ways in, in which it could be more beautiful means. But you know, you know, in banks, the stories. So the, the super smart AIs there live, mostly live in the world of what they call infinite fun. Because they can create arbitrary worlds. So they interact and, you know, the story has it. They interact in the normal world and they're very smart and they can do all kinds of stuff. And you know, given mine can, you know, talk to a million humans at the same time because we're very slow. And for reasons, you know, artificial, the story, they're interested in people and doing stuff. But they mostly live in this, this other land of thinking. My inclination is to think that the ability to create infinite fun will, will not be so fun. That's sad. Well, there are so many things to do. Imagine being able to make a star move planets around. Yeah. But because we can imagine that as wildlife is fun, if we can, if we actually were able to do it, it would be a slippery slope where fun would even have a meaning because we just consistently desensitize ourselves by the infinite amounts of fun we're having. The sadness, the, the dark stuff is what makes it fun. I think I, I think that could be the Russian. It could be the, could be the fun makes it fun and sadness makes it bittersweet. Yeah, that's true. Fun could be the thing that makes it fun. So what do you think about the expansion, not through the biology side, but through the BCI, the brain computing interfaces? Yeah, you got a chance to check out the neural link stuff. It's super interesting. Like, like humans, like, like our thoughts to manifest this action. Like, like as a kid, like shooting a rifle was super fun driving many bike, doing things. And then computer games, I think for a lot of kids became the thing where they, you know, they can do what they want. They can fly a plane. They can do this. They can do this, right? But you have to have this physical interaction. Now imagine, you know, you could just imagine stuff and it happens, right? Like really richly and interestingly. Like we kind of do that when we dream. Like dream dreams are funny because like if you have some control or awareness in your dreams, like it's very realistic looking or not realistic, it depends on the dream. But you can also manipulate that. And you know, what's possible there is is odd. And the fact that nobody understands it's hilarious. But do you think it's possible to expand that capability through computing? Sure. Is there some interesting from a hardware designer perspective? Is there, do you think it'll present totally new challenges in the kind of hardware that required that like so this hardware isn't standalone computing? Well, this just not working with the brain. So today, computer games are rendered by GPUs. Right. Right. So, but you've seen the GAN stuff. Yep. Right? Where train neural networks render realistic images, but there's no pixels, no triangles, no shaders, no light maps, no nothing. So the future of graphics is probably AI. Right. Yes. Now that AI is heavily trained by lots of real data. Right. So, if you have an interface with a AI renderer, right? So if you say render a cat, it won't say, well, how tall is the cat? And how big it, you know, it'll render a cat. You might symbol a little bigger, a little smaller, you know, make it a tabby shorter hair, you know, like you could tweak it. Like the amount of data you'll have to send to interact with a very powerful AI renderer could be low. But the question is, will brain computer interfaces would need to render not onto a screen, but render onto the brain? And like directly so that there's a band. Well, we could do it both ways. I mean, our eyes are really good sensors. We could render onto a screen and we could feel like we're participating in it. You know, they're going to have, you know, like the Oculus kind of stuff. It's going to be so good when a projection to your eyes, you think it's real. You know, there's slowly solving those problems. Now, I suspect when the renderer of that information into your head is also AI mediated, you know, they'll be able to give you the cues that, you know, you really want for your depths and all kinds of stuff. Like your brain is probably faking your visual field, right? Like your eyes are twitching around, but you don't notice that. Occasionally they blank. You don't notice that. You know, there's all kinds of things like you think you see over here, but you don't really see there. Yeah. It's all fabricated. Yeah. So a peripheral vision is fascinating. So if you have an AI renderer that's trained to understand exactly how you see and the kind of things that enhance the realism of the experience could be super real, actually. So I don't know what the limits are, but obviously if we have a brain interface that goes in inside your, you know, visual cortex in a better way than your eyes do, which is possible. It's a lot in neurons. Yeah. Maybe that'll be even cooler. Well, the really cool thing is it has to do with the infinite fun that you're referring to, which is our brains need to be very limited. And like you said, the computation is very plastic, very plastic. Yeah. So it's a, it's a, it's a calm, interesting combination. Now, the interesting open question is the limits of that in your plasticity. Like how, how flexible is that thing? Because we don't, we haven't really tested it. We know about that experience where they put like a pressure pad on somebody's head. And had a visual transducer, pressurize it and somebody slowly learn to see. Yep. It's like, it's, especially at a young age, if you throw a lot at it, like what, what can it, uh, uh, get it complete? So can you like arbitrarily expand it with computing power? So connected to the internet directly somehow. Yeah, there, yes, there's probably us. So the problem with biology and ethics is like, there's a mess there. Like us humans are perhaps unwilling to take risks in, uh, into directions that are full of uncertainty. So it's like 90% of the population is unwilling to take risks. The other 10% is rushing into the risks, unated by any infrastructure whatsoever. And, you know, that's, that's where all the fun happens in, you know, society. It's been huge transformations. Yeah. In the last, you know, a couple thousand years. Yeah, it's funny. I mean, I got in the chance to interact with, uh, uh, there's Matthew Johnson from John to Hopkins. He's doing this large scale study of psychedelics. It's becoming more and more. I've got in the chance to interact with that community of scientists working on psychedelics. But because of that, that opened the door to me to all these, uh, what are they called? Psychonauts, the people who, like you said, the 10% who like, I don't care. I don't know if there's a science behind this. I'm taking the spaceship to, if I'm being the first on Mars, I'll be, uh, the, you know, psychedelics, interesting in the sense that in another dimension, uh, like you said, it's a way to explore the, uh, the limits of the human mind. Like, what is this thing capable of doing? Because you kind of, like when you dream, you detach it. I don't know exactly in your science of it, but you detach your, like reality from what your mind, the images your mind is able to conjure up and your mind goes into weird places. And like entities appear somehow, Freudian type of, like trauma is probably connected in there somehow, but you start to have like these weird, vivid worlds that like, so do you actively dream? Do you? Why not? I feel like six, six hours of dreams and I, it's like a really useful time. I know I, I haven't, uh, I don't for some reason, I just knock out and, uh, I have sometimes like anxiety inducing kind of like very pragmatic, like nightmare type of dreams, but not nothing fun, nothing, nothing, nothing fun. I try, I, I unfortunately have mostly have fun in, uh, the waking world, which is very limited in the amount of fun you can have. It's not that limited either. Yeah, that's what we will have to talk. Yeah, and you instructions. Yeah. Yeah. But there's like a manual for that. You might want to. I looked it up, I'll ask you on what, uh, would you dream? You know, years ago when I read about, you know, like, you know, a book about how to have, you know, become aware of your dreams. I worked on it for a while. Like, just just trick about, you know, imagine you can see your hands and look out and, I got somewhat good at it. Like, but my mostly, when I'm thinking about things or working on problems, I, I, I prep myself before I go to sleep. It's like, I, I pull into my mind all the things I want to work on or think about. And then that, let's say, greatly improves the chances that I'll work on that while I'm sleeping. And then, and then I also, you know, basically asked to remember it. And I often remember very detailed within the dream, or outside the dream. Well, to bring it up in, in my dreaming and remember it when I wake up, it's just, it's more of a meditative practice. You say, you know, the prayer yourself to do that. Like, if you go to, you know, the sleep, still gnashing your teeth about some random thing that happened that you're not that really interested in, you'll dream about it. That's really interesting. Maybe, but you can direct your dreams, perhaps somewhat by prepping. You know, I'm going to have to try that. It's really interesting. Like, the most important, the interesting, not like what, what are these guys and an email kind of like stupid, worried stuff, but like, fundamental problems you're actually concerned about. Yeah. And interesting things you're worried about. Or, you know, some great conversation you had or some, some adventure you want to have. There's a lot of space there. And it seems to work that, you know, my percentage of interesting dreams and memories went up. Is there a, is that the source of, if you were able to deconstruct like where some of your best ideas came from? Is there a process that's at the core of that? Yeah. Some people, you know, walk and think, some people like in the shower, the best ideas hit them. If you talk about like Newton, Apple hitting them on the head. Now, I, I found out a long time ago, I'm, I, I processed things somewhat slowly. So I can college, I had friends who could study at the last minute, get an A next day. I can't do that at all. So I always front load at all the work. Like, I do all the problems early, you know, for finals like the last three days, I wouldn't look at a book. Because I want, you know, because like a new fact day before finals made screw up my understanding of what I thought I knew. So my, my goal was to always get it in and, and give it time to soak. And I used to, you know, I remember when we were doing like 3D calculus, I would have these amazing dreams of 3D surfaces for normal, you know, calculating the gradient and just is like, oh, come up. So, it was really fun. Like very visual. And if I got cycles of that, that was useful. And the other is, just don't over filter your ideas. Like I like that process of brainstorming where lots of ideas can happen. I like people who have lots of ideas. And then there's a set. Then there's a, yeah, let them sit and let it breeze a little bit. And then reduce it to practice. Like at some point, you really have to. Does it really work? Like, now is this real or not? Right. But you have to do both. There's greatest tension there. Like how do you be both open and, you know, precise? If you had ideas that you just, that sit in your mind for like years before the, sure. It's an interesting way to, it's generated ideas and just let them sit, let them sit there for a while. I think I have a few of those ideas. You know, it was so funny. Yeah. I think that's, you know, creativity, this one or something. For the slow thinkers in the, in the room, I suppose. As I, some people, like you said, are just like, like the, yeah, it's really interesting. Like there's so much diversity in how people think. You know, how fast they're slow. They are. How well they remember. I don't, like, you know, I'm not super good at remembering facts, but processes and methods. Like in our engineering, I'm with the Penn State. And I'm almost all our engineering tests were open book. I could remember the page and not the formula. But as soon as I saw the formula, I could remember the whole method if I, if I'd learned it. Yeah. So it's a funny, where some people could, you know, I had swatched friends, like flipping through the book, trying to find the formula, even knowing that they'd done just as much work. And I would just open the book. I was on page 27. But half, I could see the whole thing visually. Yeah. And, you know, and you have to learn that about yourself and figure out what the, yeah, function optimally. I had a friend who was always concerned. He didn't know how he came up with ideas. He had lots of ideas, but he said they just sort of popped up. Like he'd be working on something, he had this idea, like, where does it come from. But you can have more awareness of it. Like, like, like how you, how your brain works as a little murky as you go down from the voice in your head or the obvious visualizations. Like, when you visualize something, how does that happen? Yeah. If I say, you know, visualize volcano, it's easy to do, right? And what does it actually look like when you visualize it? I can visualize to the point where I don't see the very much out of my eyes and I see the colors of the thing of visualizing. Yeah, but there's like a, there's a shape, there's a texture, there's a color, but there's also conceptual visualization. Like, what are you actually visualizing when you're visualizing volcano? Just like with peripheral vision, you think you see the whole thing. Yeah, yeah. That's a good way to say it. You have this kind of almost peripheral vision of your visualizations. They're like these ghosts. But, you know, if you work on it, you can get a pretty high level of detail. And somehow you can walk along those visualizations that come up in the night, yeah. Which is, but weird. But when you're thinking about solving problems, like you're putting information in your exercising, the stuff you do know, you're sort of teasing the area that you don't understand and don't know. Which can almost, you know, feel that process happening. That's how I, like, like I know sometimes when I'm working really hard on something, like I get really hot when I'm sleeping. And, you know, it's like, we got the blanks throw all the blanks throw on the floor. And you know, every time it's while I wake up and think, wow, that was great. You know, are you able to reverse engineer what the hell happened there? Well, sometimes it's vivid dreams and sometimes it's just kind of like you say, like shadow thinking that you sort of have this feeling you're going through this stuff, but it's not that obvious. It's not so amazing that the mind just does all these little experiments. I never, you know, I thought I always thought it's like a river that you can't, you're just there for the ride, but you're right. If you prep it. Oh, it's not understandable. The meditation really helps. You got to start figuring out you need to learn language if you're on mind. And there's multiple levels of it, but yeah, abstractions again, right? It's somewhat comprehensible and observable and feelable or whatever the right word is. You know, you're not long for the ride. You are the ride. I have to ask you hardware engineer working on your own networks now. What's consciousness? What the hell is that thing? Is that just some little weird quirk of our particular computing device? Or is it something fundamental that we really need to crack open for to build like good computers? Do you ever think about consciousness? Like why it feels like something to be? I know. It's really weird. So yeah. I mean, everything about it's weird. First is to have a second behind reality. Right. What does talk narrative about what happened? You've already done stuff by the time you're conscious of it. And your consciousness generally is a single threaded thing, but we know your brain is 10 billion neurons running some crazy parallel thing. And there's a really big sorting thing going on there. It also seems to be really reflective in the sense that you create a space in your head. Like we don't really see anything, right? Photons hit your eyes. It gets turned into signals that go through multiple areas. The neurons, you know, like I'm so curious that, you know, that looks glassy and that looks not glassy. Like how the resolution of your vision is so high yet to go through all this processing. Yeah. For most of it, it looks nothing like vision. Like there's no theater in your mind. Right. So we have a world in our heads. We're literally disisolated behind our sensors, but we can look at it, speculate about it, speculate about alternatives, problem solve. What if, you know, there's so many things going on and that process is lagging reality. And it's single threaded, even though the underlying thing is like mass-lipped parallel. So it's so curious. So imagine you're building an AI computer if you wanted to replicate humans while you'd have huge rays of neural networks and apparently only six or seven deep, which is hilarious. They don't even remember seven numbers, but I think we can upgrade that a lot. Right. And then somewhere in there, you would train the network to create basically the world that you live in. Right. So like tell stories to itself about the world that is per se. Well, create the great the world, tell stories in the world and then have many dimensions of, you know, like side jokes to it. Like we have an emotional structure. Like we have a biological structure. And that seems hierarchical to like, like if you're hungry, dominate your thinking. If you're mad at dominate your thinking, like, and we don't know if that's important to consciousness or not, but it certainly disrupts, you know, intrudes in the consciousness. Like so there's lots of structure to that. And we like to dwell on the past. We like to think about the future. We like to imagine we like to fantasize. Right. And the somewhat circular observation of that is the thing we call consciousness. Now if you created the computer system, did all things create worldviews, create the future alternate histories, you know, dwelled on past events, you know, accurately or semi accurately. You know, it's, it's, it's, we're conscious. Just spring up like, well, with that feel, look and feel conscious to you. Like you see, just to be with, I, I'm external observer. Yeah. Do you think a thing that looks conscious is conscious? Like do you, again, this is like an engineering kind of question, I think, because, like, if we want to engineer consciousness, is it okay to engineer something that just looks conscious? Or is there a difference between? Well, we have all consciousness because it's a super effective way to manage our affairs. Yeah, yeah. Social element. Yeah. Well, it gives us a planning system, you know, we have a huge amount of stuff. Like when we're talking, like the reason we can talk really fast is we're modeling each other. Really high level of detail and consciousness is required for that. And well, all those components together manifest consciousness. Right. So if we make intelligence and beings that we want to interact with that we're like, you know, wondering what they're thinking, you know, looking forward to seeing them. You know, when they interact with them, they're interesting, surprising, you know, fascinating. You know, they will probably be feel conscious like we do and we'll, we'll perceive them as conscious. I don't know why not, but never know. Another fun question on this because what's in from a computing perspective, we're trying to create something that's human like or superhuman like. Let me ask you about aliens. Aliens. Do you think there's intelligent aliens civilizations out there? And do you think their technology, their computing, their AI bots, their chips are of the same. Nature's hours. Yeah, I got no idea. If there's lots of aliens out there, they've been awfully quiet. There's speculation about why there seems to be more than enough planets out there. There's a lot. There's some talks in life on this planet that seems quite different. You know, like, you know, dolphins seem like plausibly understandable octopuses don't seem understandable at all. If they live longer than a year, maybe they would be running the planet. They seem really smart. And there are neural architectures completely different than ours. Now, who knows how they perceive things? I mean, that's the questions for us intelligent beings. We might not be able to perceive other kinds of intelligence if they become sufficiently different than us. Yeah, like, we live in the current constrained world. It's three-dimensional geometry and the geometry defines a certain amount of physics. And, you know, there's like how time works seems to work. Like, there's so many things that seem like a whole bunch of the input parameters to the, you know, another conscious being or the same. Yes. Like if it's biological, biological things seem to be in a relatively narrow temperature range. Right? Because, you know, organics don't, aren't stable, too cold or too hot. So, if you specify the list of things that input to that, but soon as we make really smart, you know, beings, and they go solve about how to think about a billion numbers at the same time and how to think in end dimensions. There's a funny science fiction book where all the society had uploaded it into this matrix. And at some point, some of the beings in the matrix thought, I wonder if there's intelligent life out there. So, they had to do a whole bunch of work to figure out like how to make a physical thing, because their matrix was self-sustaining. And they made a little spaceship and they traveled to another planet when they got there. There was like life running around, but there was no intelligent life. And then they figured out that there was these huge, you know, organic matrix all over the planet inside there, where intelligent beings had to upload it themselves into that matrix. So, everywhere intelligent life was, soon as it got smart, it upleveled itself with something way more interesting than 3D geometry. Yeah, it escaped. Whatever the... No, not escaped, but it's... The upload was better. Yeah. The essence of what we think of as an intelligent being, I tend to like the thought experiment of the organism, like humans aren't the organisms. I like the notion of like Richard Dawkins and memes that ideas themselves are the organisms, like that are just using our minds to evolve. So, like we're just like meat receptacles for ideas to breed and multiply and so on. And maybe those are the aliens. So, Jordan Peterson has a line that says, you know, you think you have ideas, but ideas have you. Yeah. Right. Good line. Which... And then we know about the phenomena of groupthink, and there are so many things that constrain us. But I think you can examine all that and not be completely owned by the ideas and completely sucked into groupthink. And part of your responsibility as a human is to escape that kind of phenomena. Which isn't... You know, it's one of the creative tension things again. You're constructed by it, but you can still observe it, and you can think about it, and you can make choices about to some level how constrained you are by it. And it's useful to do that. And... But at the same time, and it could be by doing that, you know, the group in society, your part of becomes collectively even more interesting. So, you know, so the outside observer will think, wow, you know, all these lexes running around with all these really independent ideas have created something even more interesting in the aggregate. So, so I don't know, I'm... Those are lexes to look at the situation. But it's... I'll give you some inspiration, but I don't think they're constrained. Right. You know. As a small little quirk of history, it seems like you're related to Jordan Peterson, like you mentioned. He's going through some rough stuff now. Is there some common you can make about the roughness of the human journey, ups and downs? Well, I became an expert in benzavitrol, like which is... You took benzavit as beans, and at some point they interact with GABA circuits, you know, to reduce anxiety and do a hundred other things. Like there's actually no known list of everything they do because they interact with so many parts of your body. And then once you're on them, you habituate to them, and you're... You have a dependency. It's not like you're a drug dependency. We're trying to get high. It's a... It's a metal ball of dependency. And then if you discontinue them, there's a funny thing called kindling, which is if you stop them and then go, you know, you'll have a horrible throw all symptoms. If you go back on them at the same level, you won't be stable. And that unfortunately happened to him. Because it's so deeply integrated into all the kinds of systems in the body. It literally changes the size and numbers of neurotransmitter sites in your brain. So there's a process called the Ashton Protocol where you taper it down slowly over two years. The people go through that, go through unbelievable hell. And what Jordan went through seemed to be worse because... Yeah, on advice of doctors, you know, we'll stop taking these and take this. It was the disaster. And he got some... Yeah, it was pretty tough. It seems to be doing quite a bit better intellectually. You can see he was brain-clicking back together. I spent a lot of time with him. I've never seen anybody suffer so much. Well, his brain is also like this powerhouse, right? So I wonder... Does a brain that's able to think deeply about the world suffer more through these kinds of withdrawals? I don't know. I've watched videos of people going through withdrawal. They all seem to suffer unbelievably. And, you know, my art goes out to everybody. And there's some funny math about this. Some doctors said, as best he can tell, you know, there's the standard recommendations don't take him for more than a month and then taper over a couple of weeks. Many doctors prescribe him endlessly, which is against the protocol, but it's common, right? And then, something like 75% of people, when they taper, it's, you know, half the people have difficulty, but 75% get off, okay? 20% have severe difficulty and 5% have life-threatening difficulty. And if you're one of those, it's really bad. And the stories that people have on this is heartbreaking and tough. So you put some of the fault that the doctors, they just not know what the hell they're doing? Oh, no, it's hard to say. It's one of those commonly prescribed things. Like, one doctor said, what happens is, if you're prescribed them for a reason and then you have a hard time getting off, the protocol basically says you're either crazy or dependent. And you get kind of pushed into a different treatment regime, drug addict or a psychiatric patient. And so, like one doctor said, you know, I prescribed him for the 10 years thinking I was helping my patients and I realized I wasn't really harming them. And, you know, the awareness of that is slowly coming up. The fact that they're casually prescribed, the people is horrible. And it's bloody scary. And some people are stable on them, but they're on them for life. Like, once, you know, it's another one of those drugs that, but Benzo's long range have real impacts on your personality. People talk about the Benzo bubble where you get disassociated from reality and your friends a little bit. It's really terrible. The mind is terrifying. We're talking about how the infinite possibility of fun, but like, it's the infinite possibility of suffering too, which is one of the dangers of, like, expansion of the human mind. It's like, I wonder if all the possible human experiences that an intelligent computer can have is it mostly fun or is it mostly suffering? So like, if you, if you brute force expand the set of possibilities, like, are you going to run into some trouble in terms of like torture and suffering and so on? Maybe our human brain is just protecting us from much more possible pain and suffering. Maybe the space of pain is like much larger than we could possibly imagine. The world's in a balance. You know, all the literature on religion and stuff is, you know, the struggle between good and evil is, is balanced for very finely tuned for reasons that are complicated. That's a one false, off-core conversation. Speaking of balance that's complicated, I wonder because we're living through one of the more important moments in human history with this particular virus. It seems like pandemics have at least the ability to kill off most of the human population at their worst. And there's just fascinating because there's so many viruses in this world. I mean, viruses basically run the world in a sense that they've been around very long time. They're everywhere. They seem to be extremely powerful in their just, in their just to be kind of way, but at the same time they're not intelligent and they're not even living. Do you have like high level thoughts about this virus that like in terms of you being fascinated or terrified or someone between? So I believe in frameworks, right? So like one of them is evolution. Like we're evolved creatures, right? Yes. And one of the things about evolution is it's hyper-competitive. And it's not competitive out of a sense of evil. It's competitive as a sense of there's endless variation and variations that work better when. And then over time there's so many levels of that competition. You know, like multisolier life probably exists because of, you know, the competition between, you know, different kinds of life forms. And we know sex partly exists to scramble our genes so that we have, you know, genetic variation against the invasion of the bacteria and the viruses. And it's endless. Like I read some funny statistic like the density of viruses and bacteria in the ocean is really high. And one third of the bacteria die every day because of viruses and maybe them. Like one third of them. Wow. Like I don't know if that number is true, but it was like this. Like there's like the amount of competition and what's going on is stunning. And there's a theory as we age we slowly accumulate bacteria as viruses and as our immune system kind of goes down, you know, that's what slowly kills us. It just feels so peaceful from a human perspective when we sit back and are able to have a relaxed conversation. And there's wars going on out there. Like right now you're you harrowing how many bacteria and you know, the ones many of them are parasites on you and some of them are helpful and some of them are modifying your behavior and some of them are. No, it's just really, it's really wild. But you know, this particular manifestation is unusual. You know, in the demographic, how it hit in the political, you know, response that engendered in the health care and responsive engendered in technology. It's gendered. It's kind of wild. Yeah, the communication on Twitter that it's a level of all the kind of stuff. I've ever, ever feel lovely. But what usually kills life, the big extinctions are caused by meteors and volcanoes. That's the one you're worried about as both the human created bombs and solar flares are another good one. Can't you know, occasionally solar flares hit the planet? So it's nature. Yeah, it's all pretty wild. On another historic moment, this is perhaps outside, but perhaps within your space of frameworks that you think about that just happened. I guess a couple of weeks ago is, I don't know if you're paying attention at all is the game stop and Wall Street bets. That's fun. So it's really fascinating. There's a kind of a theme to this conversation today because it's like, you know, on that works, it's cool how there's a large number of people in a distributed way. Almost having a kind of fun, we're able to take on the powerful elites, elite hedge funds, centralized powers and overpower them. Do you have thoughts? I mean, there's all saga. I don't know enough about finance, but it was like the Elon, you know, Robin Hood guy when they talk. Yeah, where did you think about that? Well, Robin Hood guy didn't know how to finance system worked. He was clear, right? He was treating like the people who settled the transactions as a black box. And suddenly somebody called him up and said, hey, black box calling you, your transaction volume means you need to put out $3 billion right now. And he's like, I don't have $3 billion. I don't even make any money on these trades. Why do I have $3 billion while you're sponsoring a trade? So there was a set of abstractions that, you know, I don't think either, like now we understand that. Like this happens in chip design, like you buy whaffers from TSMC or Samsung or Intel and you know, they say it works like this and you do your design based on that. And then chip comes back and doesn't work. And then suddenly you start having to open the black boxes like the transistor is really work like they said, you know, what's the real issue. So, so there's a whole set of things that created this opportunity and somebody spotted it. Now people spot these kinds of opportunities all the time. So it's been flash crashes. There's been, you know, there's always short squeezes are fairly regular. Every CEO I know hates the shorts because they're manipulating. They're trying to manipulate their stock in a way that they make money. And, you know, deprived value from both this, you know, the company and the investors. So the fact that, you know, so many stocks were so short it's hilarious. But this hasn't happened before. I don't know why and I don't actually know why some serious hedge funds didn't do it to other hedge funds. And some of the hedge funds actually made a lot of money on this. Yes. So my, my guess is we know 5% of what really happened. And a lot of the players don't know what happened. And you probably made the most money aren't the people that they're talking about. Yeah. Do you think there was something, I mean, this is the, this is the cool kind of Elon. You're the same kind of conversationalist, which is like first principles questions of like, what the hell happened? Just very basic questions of like, was there something shady going on? What, you know, where the party's involved? Is the basic questions that everybody wants to know about? So like we're in a very hyper competitive world, right? But transactions like buying something so in stock is a trust event. You know, I trust the company representative sells properly. You know, I bought the stock because I think it's going to go up. I trust that the regulations are solid. Now inside of that, there's all kinds of places where you, you know, humans over trust. And, you know, this, this expose, let's say some weak points in the system. I don't know if it's going to get corrected. I don't know if the, I don't know if we have close to the real story. Yeah. My suspicion is we don't. Yeah. And listen to that guy, you look like a little wide eyed about it and then he did this and then they did that. And I was like, I think you should know more about that, your business than that. But again, there's many businesses when like this layer is really stable. You stop paying attention to it. You pay attention to the stuff that's bugging you or new. You don't pay attention to the stuff that just seems to work all the time. You just, you know, skies blew every day. California. And I remember once while I was like, you know, the rain's there. I was like, what do we do? Somebody go bring in the lawn furniture. You know, like it's getting wet. You don't know. It's getting wet. Yeah, it doesn't. I was a loser. I'll lose for a little more. 100 days. And now it's, you know, so. But part of the problem here with Vlad, the CEO of Robinhood is the scaling. Because that would go with talking about is there's a lot of unexpected things that happen with the scaling. And you have to be, I think the scaling forces you to then return to the fundamentals. Well, it's interesting because when you buy in-sale stocks, the scaling is, you know, the stocks don't only move in a certain range. And if you buy a stock, you can only lose that amount of money. On the short, short market, you can lose a lot more than you can benefit. Like it has a, it has a weird cause, you know, cause function or whatever the right word for that is. So he was trading in a market where he wasn't actually capitalized for the downside. If it got outside a certain range. Now, whether something the various has happened, I have no idea. But at some point, the, the financial risk to both him and his customers was way outside of his financial capacity. And his understanding how the system work was clearly weak or he didn't represent himself. You know, I don't know the person. And I listened to him, Nick. Yeah. It could have been the surprise question was, like, and then these guys called him. You know, it sounded like he was treating stuff as a black box. Maybe he shouldn't have. But maybe his whole pilot expert somewhere else and it was going on. I don't know. Yeah. I mean, this is, this is one of the qualities of a good leader is under fire. You have to perform. And that means to think clearly and to speak clearly. And he dropped the ball on those things because, and understand the problem quickly, learn and understand the problem. Like at this, like, basic level, like what the hell happened? And my guess is, you know, at some level it was amateur's trading against, you know, experts slash insiders, slash people with, you know, special information. Outside of this is insiders. Yeah. The insiders, you know, my guess is the next time this happens, we'll make money on it. The insiders always win. Well, they have more tools and more incentive. I mean, this always happens like the outsiders are doing this for fun. The insiders are doing this 24th. But there's numbers in the outsiders. This is the interesting thing is there's numbers on the insiders too. Like, like, different kind of numbers. But this could be a new era because I don't know, I at least I didn't expect that a bunch of redditors could, you know, there's, you know, millions of people get to get to the next one will be a surprise. But don't you think the crowd, the people are planning the next attack? We'll see. Good has to be a surprise. Can't be the same game. And so the, like, it could be there's a very large number of games to play and they can be agile about it. I don't know. I'm on an expert. Right. That's a good question. How the space of games, how, how restricted is it? Yeah. And the system is so complicated, it could be relatively unrestricted. And also, like, you know, during the last couple of financial crashes, you know, what set it off was, you know, sets of derivative events where, you know, the, you know, Nessim Talibs, you know, saying is they're, they're trying to lower volatility in the short run, but creating tail events. And the system's always evolved towards that and then they always crash. Like, like S curve is the, you know, star low ramp, plateau crash. It's 100% effective. In the long run, let me ask you some advice to put on your profound hat. What, there's a bunch of young folks who listen to this thing for no good reason whatsoever. Undergraduate students, maybe high school students, maybe just young folks, a young heart looking for the next steps of taking life. What advice would you give to a young person today about life, maybe career, but also life in general? Get good at some stuff. Well, get to know yourself, right? Get good at something that you're actually interested in. You have to love what you're doing to get good at it. You really got to find that. Don't waste all your time doing stuff. That's just boring or bland or numbing. Right? Don't let old people screw you. People get talked into doing all kinds of shit and writing up huge student, you know, student deaths and like, there's so much crap going on, you know. And then drains your time and drains your point of view. And you know, thesis that, you know, the older generation won't let go. They're trapping all the young people. Interesting. Interesting to that. Yeah. Well, just because your old doesn't mean you stop thinking, I know that's a really original old people. I'm an old person. So, but you have to be conscious about it. You can fall into the rut and then do that. You know, when I hear young people spouting opinions, it sounds like they come from Fox News or CNN. I think they've been captured by group thinking memes and. I suppose they think on their own. You know, so if you find yourself repeating what everybody else is saying, you're not going to have a good life. Like, like, that's not how the world works. And maybe it seems safe, but it puts you at great jeopardy for. Well, be boring or unhappy or. How long to take you to find the thing that you have fun with? Well, I don't know. I've been a fun person since I was pretty little. So everything I've gone through a couple periods of depression in my life. Or good reason or for the reason that doesn't make any sense. Yeah. Like, something's hard. Like, you go through mental transitions in high school. It was really depressed for a year. And I think I had my first midlife crisis at 26. I kind of thought, is this all there is? Like, I was working at a job that I loved. And, but I was going to work and all my time is consumed. What's the escape out of that depression? What's the answer to is, is this all there is? Well, my friend, I asked him because he was working in S.S. I said, what's your work life balance? Like, there's, you know, work, friends, family, personal time. Are you bouncing in that? I said, work 80% family, 20% and I tried to find some time to sleep. Like, there's no personal time. There's no passion at a time. Like, you know, young people are often passionate about work. So, and I was sort of like that. But you need to have some space in your life for different things. And that's, that creates, that makes you resistant to the whole, the, the, the, the, the deep dips into depression kind of thing. Yeah, well, you have to get to know yourself too. Meditation helps some physical, something physically intense helps. Like the weird places your mind goes kind of thing. Like, and why does it happen? Why do you do what you do? Like triggers like the things that cause your mind to go to different places kind of thing or like your events, like, you're upbringing for better or worse, whether your parents are great people or not. You, you, you come into, you know, adulthood with all kinds of emotional burdens. Yeah. And you can see some people are so bloody stiff and restrained and they think, you know, the world's fundamentally negative. Like you maybe, you have unexplored territory. Yeah. Or you're afraid of something. Definitely afraid of quite a few things. You then you got to go face them. Like, I think, like, what's the worst thing that can happen? You're going to die, right? Like that's inevitable. You might as well get over that, like a hundred percent test rate. And people are worried about the virus, but, you know, the human condition is pretty deadly. There's something about embarrassment that's, I've competed a lot in my life. And I think the, if I'm too introspective, the thing I'm most afraid of is being like humiliated, I think. No, nobody cares about that. Look, here's the only person on the point. I thought you'd be an humiliating. Exactly. So it can really useless stop. It is. It's like, you know, humiliating something happened in a room full of people and they walk out and they didn't think about it one more second. Or maybe somebody told a funny story to somebody else. And then it just fades it throughout. Yeah. Yeah. No, I know too. I mean, I've been really embarrassed about shit that nobody cared about myself. Yeah. It's a funny thing. The first thing ultimately is just, yeah. Yeah, but that's the cage. And then you have to get out of it. Yeah. Like once you, here's the thing, once you find something like that, you have to be determined to break it. Because otherwise you'll just, you know, so you accumulate that kind of junk and then you die as a, you know, a mess. So the goal, I guess it's like a cage within a cage. I guess the goal is to die in the biggest possible cage. Well, ideally you'd have no cage. Well, people do get light and I've not a few. It's great. You found a few. There's a few out there. I don't know. Of course, sir. Either that or they have, you know, it's a great sales pitch. There's like a light and people write books and do all kinds of stuff. It's a good way to solve books. I'll give you that. You've never met somebody you just thought they just killed me. Like this. Like mental clarity humor. No, 100%. But I just feel like they're living in a bigger cage. They have their own. You still think there's a cage. You see, barely suspect there's always a cage. There's no, there's nothing outside the, the universe. There's nothing outside the cage. You were, you were, you were, you worked in a bunch of companies. You led a lot of amazing teams. I don't, I'm not sure if you've ever been like in the early stages of a startup. But do you have advice for somebody that wants to do a startup or build a company, like build a strong team of engineers that are passionate, just want to solve a big problem? Like is there more specifically on that point? You have to be really good at stuff. If you're going to lead and build a team, you better be really interested in how people work and think. The people or the solution to the problems. There's two things, right? One is how people work and the other is the problem. There's quite a few successful startups that are really clear. The founders don't know anything about people. Like the idea was so powerful that it prepped them. But I suspect somewhere early, they hired some people who understood people. Because people really need a lot of care and feeding the collaborate and work together and feel engaged and work hard. Startups are all about out producing other people. You're nimble because you don't have any legacy. You don't have a bunch of people who are depressed about life, just showing up. So startups have a lot of advantages that way. Do you like the C-Jobs talked about this idea of A-players and B-players? I don't know if you know this formulation. Oh yeah, no. Organizations that can take them over by B-players are leaders. Often really underperform their HERSC players. That said, in big organizations, there's so much work to do. And there's so many people who are happy to do what the leadership or the big idea people can consider menial jobs. And you need a place for them, but you need an organization that both values and rewards them but doesn't let them take over the leadership of it. Got it. So you need to have an organization that's resistant to that. But in the early days, the notion with Steve was that one B-player in a room, of A-players will be destructive to the whole. I've seen that happen. I don't know if it's always true. You run into people who clearly B-players, but they think they're A-players and so they have a loud voice at the table and they make lots of demands for that. But there's other people who are like, I know who I am. I just want to work with cool people on cool shit and just tell me what to do and I'll go get it done. So you have to, again, this is like people's skills. What kind of person is it? I've met some really great people I love working with. That weren't the biggest ID people. They're most productive ever, but they show up. They get it done. They create connection and community that people value. It's pretty diverse. I don't think there's a recipe for that. I got to ask you about love. I heard you into this now. Into this love thing? Yeah. You think this is your solution to your depression? No, I'm just trying to, like you said, the lighten people in occasion trying to sell a book. I'm writing a book about love. You're writing a book about love? No, I'm not. I'm not. I'm not. I'm afraid of I'm going to put it. You should really write a book about that. You're on your management philosophy. You said it'd be a short book. Well, that one was all pretty well. What role do you think love, family, friendship, all that kind of human stuff, play in a successful life? You've been exceptionally successful in the space of running teams, building cool shit in this world, creating some amazing things. What did love get in the way? Did love help? Did love have to have to have the family get in the way the family help. I want the engineer's answer. But please come on. So, like, first love is functional, right? It's functional in a way. So, we have bitch you, ate ourselves the environment. And actually Jordan told me, Jordan Peterson told me this line. So, you go through life and you just get used to everything, except for the things you love. They remain new. Like, this is really useful for, you know, like other people's children, and dogs, and you know, trees. You just don't pay that much attention to your own kids, your monitor, and really closely. Like, and if they go off a little bit because you love them, if you're smart, if you're going to be a successful parent, you notice it right away. You don't habituate just things you love. And if you want to be successful at work, if you don't love it, you're not going to put the time in somebody else. That's somebody else that loves it. Like, because it's new and interesting and that lets you go to the next level. So it's the thing, it's just a function that generates newness and novelty and surprises, you know, those kinds of things. It's really interesting. Right. And there's people figured out lots of frameworks for this. Yeah. Like, like humans seem to go in partnership, goes through, you know, interest. Like, suddenly, suddenly somebody's interesting. And then you're infatuated with them. And then you're in love with them. And then you, you know, different people have ideas about parental love or mature love. Like, you go through a cycle of that, which keeps us together. And it's, you know, a super functional for creating families and creating communities and making you support somebody, despite the fact that you don't love them. Like, and, and it can be really enriching. You know, no, no. In the work life balance scheme, if all you do is work, you think you may be optimizing your work potential. But if you don't love your work or you don't have family and friends and things you care about, your brain isn't well balanced. Like everybody knows the experience of your works on something a whole week. You went home, took two days off and you came back in the odds of you working on the thing. You picking up right where you left off is zero. Your brain refactored it. But being above is great. It's like changes to color of the light in the room. It creates a spaciousness that's, that's different. It helps you think. It makes you strong. Bukowski had this line about love being a fog that dissipates with the first light of reality in the morning. That's depressing. I think it's the other way around. It lasts. Well, you like you said, it's just a function. It's a thing that generates you to be the light that actually in live in your world and creates the interest and the power and the strengths and the to go do something. Well, it's like, like that sounds like, you know, there's like physical love emotional love intellectual love spiritual. Yeah. Isn't it all the same thing kind of? You should differentiate that. Maybe that's your problem in your book. You should, you should refine that a little bit. Different chapters. Yeah. There's different chapters. What's that? What's these are? Aren't these just different layers of the same thing of the stack? No. Physical people, people, some people are addicted to physical love and they have no idea about emotional intellectual love. I don't know if they're the same things I think they're different. That's true. That could be different. I'd be it. I guess the ultimate goal is to be the same. Well, if you want something to be bigger and interesting, you should find all its components and differentiate them, not cloning it together. The people do this all the time. They, yeah, the modularity get your abstraction layers right and then you can you have room to breathe. Well, maybe you can write the forward to my book about love or the afterwards. You really tried. I feel like Lutz has been a lot of proud of this book. Well, you have things in your life that you love. Yeah. Yeah. And then they are, you're right, they're modular. It's this question. Well, there, and you can have multiple things with the same person or the same thing. But, yeah. Depending on the moment of the day. Yeah, there's like what Bokoski described is that moment when you go from being in love to having a different kind of love. And that's the transition. But when it happens, if you've read the owner's manual and you believed it, you would have said, oh, this happened. It doesn't mean it's not love. It's a different kind of love. But, but maybe there's something better about that is you grow old. If all you do is regret how you used to be, it's sad. Right. You should have learned a lot of things because like who you can be in your future self is. It is actually more interesting and possibly delightful than, you know, being a mad kid and love with the next person. Like that's super fun when it happens. That's, that's, you know, 5% of the possibility. Yeah, that's right. That there's a lot more fun to be had in the long lasting stuff. Yeah. Or meaning, you know, if that's the thing, which is a kind of fun. It's a deeper kind of fun. And it's surprising. You know, that's like the thing I like is surprises. You know, and you just never know what's going to happen. Yeah. But you have to look carefully. You have to work out it. You have to think about it. You know, it's, yeah, you have to see the surprises when they happen, right? You have to be looking for it. From the branching perspective, you mentioned regrets. Do you have regrets about your own trajectory? Oh, yeah, of course. Yeah, some of it's painful, but you want to hear the painful stuff. I would say, like in terms of working with people, when people did say stuff I didn't like, especially if it was a bit in the various, I took it personally. And I also felt it was personal about them. But a lot of times, like humans are, you know, most humans are a mess. Right. And then they act out and they do stuff. And this psychologist, I heard a long time ago said, you tend to think somebody does something to you. But really what they're doing is they're doing what they're doing while they're in front of you. It's not that much about you. Yeah. Right. And as I got more interested in, you know, when I work with people, I think about them and probably analyze them and understand them a little bit. And then when they do stuff, I'm way less surprised. And I'm way, you know, and if it's bad, I'm way less hurt. And I react way less. Like I sort of expect everybody's got their shit. Yeah. And it's not about you as much. Not about me that much. It's like, you know, you do something and you think you're embarrassed, but nobody cares. Like, and somebody's really mad at you. The odds of it being about you. Now they're getting mad the way they're doing that because of some pattern they learned. And, you know, and maybe you can help them if you care enough about it. Or you could, you could see a coming and step out of the way. Like, like I wish I was way better at that. I'm a bit of a hot head. And so regret that you said with Steve, that was a feature not a bug. Yeah. Well, he was using it as the counter for so orderly. And if that would crush his work, you were doing the same. Maybe I don't think I don't think my, my vision was big enough. It was more like I just got pissed off and did stuff. I'm sure that's the, yeah, you're telling me. I don't know if it had the, it didn't have the amazing effect that created the Trillion Door Company. Or like I just got pissed off and left. And, or made enemies that he shouldn't have. Yeah, it's hard. Like I didn't really understand politics until I worked at Apple, where Steve was a master player of politics. And his staff had to be or they wouldn't survive him. And it was definitely part of the culture. And then I've been in companies where they say it's political, but it's all, you know, fun and games compared to Apple. And it's not that the people at Apple or bad people is just they operate politically. At a higher level. You know, it's not like, oh, somebody said something bad about somebody, somebody else, which is most politics. That's, you know, they had strategies about accomplishing their goals. Sometimes, you know, over the dead bodies of their enemies. You know, with some games, more games of thrones, and more sophistication, and like a big time factor rather than a, you know. Well, that requires a lot of control over your emotions, I think, to have a bigger strategy in the way behave. Yeah. And it's effective in the sense that coordinating thousands of people to do really hard things, where many of the people in there don't understand themselves, much less how they're participating, creates all kinds of, you know, drama and problems that, you know, our solution is political and nature. Like how do you convince people, how do you leverage them, how do you motivate them, how do you get rid of them, how do you know, like there's, there's so many layers of that that are interesting. And even though some of it, let's say, may be tough, it's not evil. Unless, you know, you use that skill to eat purposes, which some people obviously do. But it's a skill set that operates. And I wish I'd, you know, I was interested in it, but I, you know, it was sort of like, I'm an engineer, I do my thing. And, you know, there's times when I could have had a way bigger impact. If I, you know, knew how to, if I paid more attention and knew more about that, about the human layer of the stack. Yeah, that human political power, you know, expression layer of the stack, just complicated. And there's lots to know about it. I mean, people are good at it or just amazing. And when they're good at it and let's say relatively kind and oriented, a good direction, you can really feel, you can get lots of stuff done and coordinate things that you never thought possible. But all people like that also have some pretty hard edges, because, you know, it's a heavy lift. And I wish I spent my time with that one. I was younger, but maybe I wasn't ready. You know, I was a wide eyed kid for 30 years. It's a little bit of a kid. What do you hope your legacy is when there's a book like a H Hikers guy to the galaxy and there's like a one sentence entry bodge and from like that guy lived at some point. There's not many, you know, not many people would be remembered. You're one of the sparkling little human creatures that had a big impact in the world. How do you hope you'll be remembered? My daughter was trying to get, she added my Wikipedia page to say that I was a legend in the guru. But they took it out so she put it back in she's 15. I think I think that was probably the best part of my legacy. She got her sister and they were all excited. They were like trying to put it in the references because there's articles in that I'm telling you that. So the eyes of your kids here are legend. Well, they're pretty skeptical because they know be better than that. They're like dad. So yeah, that's not super that kind of stuff is super fun in terms of the big legend stuff. They don't care. I don't really care. He's just an engineer. They've been thinking about building a big pyramid. So I did debate with a friend about whether pyramids or craters are cooler. And you realize that there's craters everywhere, but you know, they built a couple pyramids 5,000 years ago. And they remember you for a while. We're still talking about it. I think that would be cool. Those aren't easy to build. Oh, I know. And they don't actually know how they built them. It's just great. It's either a GI or aliens could be involved. So I think I think you're going to have to figure out quite a few more things than just the basics of civil engineering. So I guess you hope your legacy is pyramids. That would that would be cool. And my Wikipedia page, you know, get enough data by my daughter periodically. Like those two things would pretty much make it. Jim, it's a huge honor talking to you again. I hope we talk many more times in the future. I can't wait to see what you do with time. So I can't wait to use it. I can't wait for you to revolutionize yet another space in computing. It's a huge honor to talk to you. Thanks for talking today. This is fun. Thanks for listening to this conversation with Jim Keller. And thank you to our sponsors. Athletic greens all in one nutrition drink, Brooklyn and sheets, express VPN, and bell camphor grass fed meat. Click the sponsor links to get a discount to support this podcast. And now let me leave you with some words from Alan Turing. Those who can imagine anything can create the impossible. Thank you for listening and hope to see you next time. Thank you.