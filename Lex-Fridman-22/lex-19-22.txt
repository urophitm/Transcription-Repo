 The following is a conversation with Brendan Eich, creator of the JowlScript programming language, co-founder of Mozilla, which created the Firefox browser, and now co-founder and CEO of Brave Software, which has created the Brave browser. Each of these are revolutionary technologies. JowlScript is one of the most widely used and impactful programming languages in the world. Firefox pioneered many browser ideas that we love today or even take for granted today, and Brave is looking to revolutionize not only the browser but content creation online and the nature of the internet to make it fundamentally about respecting people's control over their data. Quick mention of our sponsors, the Jordan Harmerge Show, Sambasca Mild Delivery Service, Better Help Online Therapy, and Aid Sleep Self-Coloring Matress. Click the sponsor links to get a discount and support this podcast. As a side note, let me say that there's a tension between theory and engineering that I've been thinking a lot about. I tweeted something like, good execution is more important than a good idea, but one helps the other. I think the wording of that sucks, but what I mean is a good idea is a must, but in my experience, good ideas are in abundance. Good execution on the other hand is rare. I think some mix of good timing, good idea, and good execution is essential. Getting that mix right is tough, and Brandon somehow, multiple times as a career, they just that. I'm starting to believe it's more art than science, like most interesting things in life. If you enjoyed this thing, subscribe on YouTube, review it on Apple Podcast, follow on Spotify, support it on Patreon, or connect with me on Twitter, Alex Friedman. As usual, I'll do a few minutes of ads now and no ads in the middle. I try to make these interesting, but I give you timestamps, so if you skip, please still check out the sponsors by clicking the links in the description. It is, in fact, the best way to support this podcast. This episode is sponsored by the Jordan Harbinger Show. Go to jordanharbinger.com slash flex. Subscribe to it, listen, you won't regret it. I've been bingeing on this podcast for many months now. Jordan is a great interviewer. He gets the best out of his guests, dives deep, calls them out when it's needed, and makes the whole thing fun to listen to. His interview, Kobe Bryant, Mark Cuban, Neil de Gas Tyson, Garik Asparov, and many more. Perhaps more importantly, he's unafraid of addressing challenging, even controversial topics with thought and grace. I especially like his feedback Friday's episodes where this combination of fearlessness and thoughtfulness is especially on this play. Touching topics of sex, corruption, mental disorders, hate, love, and everything between. Again, go to jordanharbinger.com slash flex. It's how he knows I sent you. On that page, there's links to subscribe to the show, on Apple Podcasts, Spotify, and everywhere else. The show is also sponsored by Sunbasket. Sunbasket delivers fresh, healthy, delicious meals straight to your door. As you may know, my diet is pretty minimalist, so it's nice to get some healthy variety into the mix. They make it easy and convenient with everything pre-portioned and ready to prep and cook. You can enjoy a delicious healthy dinner in as little as 15 minutes. I've enjoyed a lot of meals from their menus that fit my, what they call, carb-conscious ways. They have prepared meals, meal kits, and even raw ingredients, just a nice New York strip steak, rainbow trout, like a filet, wild, chilly and sea bass, king salmon, and much more. Right now, Sunbasket is offering 35 bucks off your order when you go to sunbasket.com slash flex and enter promo code, Lex at checkout. Again, visit sunbasket.com slash and use code, Lex to get 35 bucks off your order. This episode is sponsored by BetterHelp, spelled HELP. They figure out what you need and match with the licensed professional therapist in under 48 hours. I chat with a person on there and enjoy it. Of course, I also have been talking to Mr. David Goggins over the past few months, who is definitely not licensed professional therapist, but he does help me meet my and his demons and become comfortable to exist in their presence. In fact, in early March, I'm doing a 48 mile run with him, four miles every four hours for 48 hours. You should check out Gogginschallenge.com for more information about that. I often talk about struggle. I think it's essential for creation, but I think you can struggle beautifully in a way that doesn't destroy you. Therapy can help there. BetterHelp is easy, private, affordable, available, worldwide. You can communicate by text anytime and schedule weekly audio and video sessions. Anyway, check out BetterHelp.com slash Lex. That's BetterHelp.com slash Lex. This episode is also sponsored by 8th sleep and its pod pro mattress. It controls temperature with an app, is packed with sensors, and can cool down to as low as 55 degrees on each side of the bed separately. It's amazing. It's been a game changer for me. I just enjoyed sleep on Power and Apps way more now. I feel like I fall asleep faster and get more restful sleep. Combination of cool bed and warm blanket is amazing. Now, if you love your current mattress, but still are looking for temperature control, 8th sleep's new pod pro cover adds dynamic cooling heating capabilities onto your current mattress. You can cool down to 55 degrees or heat up to 110 degrees. I don't know why you would want to do that. Maybe let's keep it under 100 degrees. You can do so on each side of the bed separately. Also, you can track a bunch of metrics like heart rate variability, but cooling alone is honestly worth the money. Go to 8sleep.com slash Lex. When you buy stuff there, you'll get special savings as listeners at this podcast. That's 8sleep.com slash Lex. And now, here's my conversation with Brendan Eike. When did you first fall in love with programming? I didn't program a lot when I was in high school, but I had a friend who had a Commodore pet. After we saw Star Wars, he said, hey, let's make a basic program that does the Death Star trench run. It was just simple 2D graphics. I didn't know what I was doing. I just helped him out on the math and stuff like that. I was a math and science kid. I was really into the HP calculators of the early mid 70s. These were the RPN. They were really strongly built. They were all right, gold finger instead of gold, divinely heavy. There's probably some gold in them too. Gold medalization. But they were awesome calculators and they had all the scientific functions. I was really into that. I aimed towards physics. I was a little late for the 20th century golden age. I read a lot of science fiction. I was like, yeah, it's on the hybrid drives and warp drives. Physics was not going to get there quickly. I started hacking on computers while I was studying physics as an undergraduate at Santa Clara University. I dodged the Fortran bullet because I was in the science department instead of the engineering department where they still did Fortran card decks. I think they had an auto collater. We were using Pascal. I got one of the first portable sea compilers ports to the deck mini computers we were using. I fell in love with programming just based on procedural abstraction Pascal. Now it would be considered old school structured programming from the 70s. Niklas Veert, the creator of Pascal, was a good writer and a good pedagogy. He was at ETH with do these courses where it's like build your own computer, build your own compiler, build your own operating systems. I know some people who are grad students under him and said he would torture the students with things like this custom email system that had 25-word limit and things like that. Unfortunately, dodged both the Pascal and the Fortran bullets. Could you maybe linger on the Pascal? What kind of programming language was it? What is the reminiscent of of today? Because it sounds like it may have had an impact on your own trajectory. It was in the Algole family. The big successful language design and compiler project in the 60s had a successor called Algole 68, which was ambitious but not as successful. But Pascal was kind of a wordy procedures and functions language. It distinguished between functions which were a turn of value in procedures which don't which is just compute. You could say that whole Algole family went into ETA. Pascal had a second life thanks to Borland with Turbo Pascal, which was hugely successful. I think a large part due to Anders Helstberg who then went to Microsoft and did C-Sharp and done that with his team there and done really well. Doing Type script, Type JavaScript. There's a lineage here. But I was also interested in C and Unix by the time I was in undergrad because people were bringing Unix up along all sorts of hardware. I had some friends who were doing their own wire wrap computers, 68, 20 maybe. I was wire wrapping engineering course, 68, 19 or something simpler, building a computer on board. I wanted to build a more ambitious one and port Unix to it. But I picked the wrong processor. I picked the National Semiconductor NS-16032, which was this amazing sysc complex instruction set computer. The reduced instruction set computers that were just being contemplated into the mid 80s. And risk ultimately went out. Risk one in some ways. It dissolved into that you have both. Now you have these super scalar architectures where Intel has kept probably too much backward compatibility at the instruction level. But that's just a front end that parses that into these wide internal instructions. So the very long instruction word research that was also interesting at the time kind of became the micro architecture inside the backward compatible Intel. But I picked the National Semichip and it never got made successfully. It was full of bugs and I never could have brought it up. But I went on out of physics after three years into math computer science. I said I did it because I saw I was being sort of childlike in naive about physics and I thought meanwhile the valley is go go for computers. The Apple II, right, the PC, the Intel 8086, 888 base PC, IBM, you know, gig Microsoft the future for somewhat fishy deal. So it was wide open in the computing space but in physics, you were as optimistic about physics as. No, I mean I was one of three brothers who were all in the same grade. I have a twin and a younger brother who skipped second grade was with us the whole time after that. And you know, he went on. He actually studied under Kip Thorne at Caltech. But he also didn't even enough at software. Does it make you sad that the theoretical physics, even with strength theory, hasn't really had any foundation breakthroughs in the latter part of the 20th century in the. Yeah, I'd say the problem is theory over over experiments. I would say, you know, we need more Aristotle unless Plato. You know, mathematics is not all physical. There are lots of mathematics that cannot be realized as far as I know in this world. So to understand the world, you need to do experiments. You need to not just dream up inductive theories that could have lots of alternative theories competing with them with no way to decide between them except aesthetics, which is not a good guide in my opinion. I don't know if you are friends with a relationship with Elon Musk. Where's the in terms of like what you would love to see our society investing in building up? Is it closer to Elon or is it closer to Feynman and Einstein and those. Well, those gentlemen and only with us. And I think that's noticed. So like I said, the real glory day is physics, the famous pictures from Germany before the Second War were just a fantastic assembly of brains, you know, Schrodinger and Einstein. And physics, I think took a wrong turn that maybe all of I would say Western science took in going for models over reality, right? You see this in all sorts of fields. Now we can build models that are very predictive and generative and then we build actual devices or you know, semiconductors, things like that. That's that's good. I'm not dismissing that. We need good models. We need to experiment and prove them and and test them. But the problem I've seen in physics, which you see certainly in economics, the dismal science and you see surprisingly, in other so called hard sciences is models that don't really have to be tested against reality. They can instead become policy tools where they can become like I said, one of a large family of alternate theories that could be as predictive, but nobody's doing the yeah, we're knowing out. That's such an interesting tension in society. You see this in even the softer sciences, which have a deep love for like psychology. You see this in epidemiology now, the virus. Absolutely. It's this tension of, you know, how much of the world can we understand through just a beautifully fit model? And then at the same time, my main work is a machine learning where it's like there is no provable thing usually. It's just kind of you it's all about just getting the right data set and getting tricks and so on. And if there's this tension, even in my own soul of like I grew up on theoretical computer science, like I loved approximation algorithms like all of that like different complexity classes. Just those little puzzles. I mean, I don't know, do you do you as somebody who was in math and computer science and then end up going into places where you engineer some of the most impactful things in this world? Do you see the P versus NP all that whole space is interesting at all? Yeah, it's it's not that useful in practice, right? People are using it with sort of crypto analysis or asymptotic arguments about, you know, can can we have a quantum resistant crypto algorithm, things like that, which may not be practical, right? If you if you follow Mikhail Diyakanov or Gil Kali, there are there are big questions about how how quantum computing will scale up, how practical it will be. Is that something that you think about quantum computing and not except for spare time? Like you said, I'm not using this kind of computer science in practice because almost everything now is engineering and finding ways to get computers to be more useful for people, which goes from, you know, design problems, which are really kind of an art. Like you said, anything you can't automate is an art. Well, we can have, you know, machine learning composed music and it can imitate, you can train it and it can sound kind of decent, but you'd be lacking that genus aqua, but you know, user interface still I think requires human art. So speaking of things that didn't follow a perfect theory and model, JavaScript, so there's two things. One had an impact on the world, a huge scale, obviously, and it's also still is one of probably the most popular programming language in the world. So can we go back to the origin story? Can you tell the story of how JavaScript was created? Yeah, I was at Silicon Graphics after graduate school for seven years and it got to be big and successful and division-ized and political and I thought kind of boring and a friend who'd been there went to one of the last of the super companies, the super startups in the early 90s, there were several, I suppose general magic was a little after that around the same time, but microunity was that company that I went to and it was because my friend Jeff Weinstein had gone there from Silicon Graphics, he recruited me and microunity was doing everything. So this was like the ultimate sort of pretend grad school. It was doing a new fab, new semiconductor process, it was doing new analog and digital circuits on the same very large but not way for scale chip. Originally it was five centimeters on a side, it was really hot too, so I needed a water cooler, it was a craiciller and then they shrunk it and they tried to do a home sort of media processor that was essentially a barrel processor, but you could think of trying to do all the things that we now see in modern architectures with short vector instructions and sort of wide instructions or multiple issue and doing a lot of the stuff in software because the second iteration, the set top box was really for avoiding the cost to the cable company of rolling the trucks out to replace your garbage general Atlantic set top box with a new or less garbagey one. So if you could have software a gradeable set top boxes, the cable companies thought they could save a lot of money and add features. Is this assembly or which level of the software? It was like we were writing in we were using GCC, we were writing C++ and C somebody I worked with there, really very smart guy hired from a sort of Wall Street hotshot programming consultancy did his own hardware design as well as software and we were working on how to make not only short vector units but general bit softwares and promoters so you could do things like crypto algorithms efficiently and you could do demodulation of the cable no complex quadrature amplitude modulated signal. So you're basically taking a to D converters dumping things in buffers and then doing the rest in software, all the framing and the read Solomon and Viterbi and all that error correction. So that was really great learning experience but it was not going to work. It was doing too many risky things at once. If you as Jim Clark said to me when I hopped in that scape after three years at my community said oh yeah you do 10 things each one in 10 odds it's going to be one in 10 billion right. The multiplication principle so you know that's capable it's already a rocket and I passed a chance to go there in 1994. I knew the founders because I worked at SGI Clark's company. Could you pause for a second and a escape one was the launch of this rocket. 94 was the launch of an escape and I went there in early 95 in April. Okay but oh so you said you missed the launch. Well I missed the the end the first floor employment opportunity but the IPO was was August 1995 so I was there for that. How obvious was it the Netscape was like world changing? What was the layout was Netscape one of the first big browsers? Yes so when when I was at micro unity still in 93 we saw a browser called mosaic and up till then we'd used email and we'd used use net the NNTV protocol. We'd use newsreaders. We used FTP we used all these old internet protocols all relying on the DNS and TCP IP and UDP for that matter. When I was at Silicon Graphics we brought up the whole stack right we had to you know discover how how to find the ethernet addresses on your network and then find IP addresses for them. Our protocol all that stuff and it was great because nobody knew in the 80s what was going to win all the proprietary stacks like IBM SNA and Decknet and all these other protocols were saying it's we're going to do it or it's going to be heterogeneous future and instead it was you know Berkeley Unix and the TCP IP stack that dated back to the ARPnet the one and I think we knew it we all knew it at sgm but the salespeople didn't and so they kept trying to get multiple network stacks interoperating but in the end it won and so that was the internet and it was email and texty and it was used and very texty and then Tim Berners-Lee did this thing but I don't think I was paying attention and I think the date when he first did it or when he wrote the famous emails when pushed back to 89 but I noticed a mosaic in 93 because one of the things that Mark and Druson and Eric Bina did at NCSA was they innovated on on the HTML early HTML standard they in particular marks sent to the email saying hey everybody we think you should be able to put an image in a page and you know when he sent that Eric Bina had already written the code and you know I talked to Tim Berners-Lee more recently just a few years ago and he was like oh we had another way of doing it and I didn't work out because Mark shipped his in mosaic and this convinced me of several things one the internet meant there was a huge first mover advantage and being fast getting on first mattered a lot and so you know Richard Gabriel of scheme and poetry fame I has written about this the famous poetry what poetry well he's a poet oh actually poetry he's like he dug was a kind of something no I mean he's a founder of lucid which is where Jamie Zawinsky worked before in that skate and lucid was doing you know compilers and lucid emax which was a fork of emax famously Jamie fighting against Richard Stalman Stalman and so Richard Gabriel you know very very brainy computer guy but also a poet but he wrote a nice essay that gets abused all the time in fact Jamie's put a kind of warning in front of his version of it on his site jdbc there called worse is better and this is about survival advantage of software in the network world in my opinion it's about unix it started up being framed as unix and list good news bad news because all the list people the MIT people were like oh you know this is the crown jewel right scheme this is pepper j egg or common list this giant cathedral of course we're going to win this is civilization and those you know those farmers in New Jersey to borrow from the sopranos this this takes down a bell labs that they're just you know there's nothing sound there it's all hacking yeah um well guess what one wow so you're saying this is a fundamental like principle of the internet is moving fast winds you could say in in almost any network system like biological evolution you see successful allele sweet populations and they don't always have um you know they aren't free of flaws that heterosigus advantage right you can get both parents give you the gene variant and you get sickle so anemia right but but if one of them does you're more resistant to malaria and so this isn't a beautiful process except at large scale and then you realize that because it moves fast and can adapt it it can win and people still struggle with this i i used to struggle with this because JavaScript was done in such a hurry and the force of web compatibility meant early mistakes couldn't be fixed and even the standards process injected new mistakes that's it will but often standards bodies go back and making compatible changes you can't do that with the web it's more like again like biology you you you preserve what still works you don't want to break ATP metabolism or whatever so um you have to kind of resign yourself to the reality of um worse is better being enshrined in actual design points you might not like um and that happened with JavaScript and i'm way over it but uh it also i think was a huge advantage is why JavaScript has kind of swept a lot of programming domains um people will say oh it's not because of merit well you're right but we also improved it over time in the standards body i spent 20 years doing that and uh you don't get that choice it it's like i'm not saying that that was the best language i'm just saying that was the right time to do it and i like to say the alternative was not to do it i could have told net scape i can't do this it's too rushed and it would have been visual basic script it would have been bad uh so that's a go way to present the alternative but so you it was in net scape and you were you have written it how many days and why was it only that many days and what was the the goal and underlying principles in your mind of them so the whole uh i'm sort of describing worse is better in a frenetic way because it fit the the model of net scape when um it was known that jim claire and mark and viers were founding net scape and they did the first release in nineteen eighty four that browser took over from mosaic in fact that's why mosella is called that it's the mosaic killer it's like the giant monster that kills mosaic it's awesome and um they knew that you know it wasn't it wasn't that uh again it's not like you're doing advanced scientific research that is changing the world you're more like taking down uh uh uh the last iteration of the browser marketed which had images and you know other affordances before you stopped working on it and you're making net scape the new thing that has images plugins which was the way to do video back in the day it had something that's kind of died now for tiled windows called frames and frame sets um yeah yeah yeah yeah yeah yeah hdmell tables that was new eric bina did tables in net scape one one so when i got there they were heading toward IPO clerk wanted to IPO early i think his instinct was right and that kicked off the whole dot com era right there was a recession in the u.s. in 91 you can see old law and order reruns where they talk about their session how hard it's hitting New Yorkers and after that uh green span really goose things that the federal reserve and technology had been sort of fermenting in a way that came together with the internet and that's scape made it you know possible to do pets dot com to do ebay to get people to recognize that you are all on a billboard and then type it in when they get home and that was huge um that that was so fast moving a rocket that uh mark and um the engineering team there thought we we need to make this a programmable browser not just a a document viewer not just a video it was all html with images and tables and also like you said frames and really plugins there's no dynamic element at all yeah the most dynamism we get was from a plugin which there are a few of them then flashed and existed at that point uh it was i think um java applets yet or no well that's the thing we did to deal with sun in fact i was recruited to go do scheme in the browser remember guy stealing general susbans beautiful list variant i was going to do it in the browser because my friends mess j i thought hey we like scheme you like scheme and i'm like a hard labor use scheme it's not really used in industry except in sort of silos um but i like it okay i'll come do scheme in the browser i have a slide from my 2017 uh talk where i have Bruce Wallace crawling through the duct and die hard and say come out to the coast you love fun come on do scheme in the browser um but when i got there there was no scheme in the browser because they'd started to deal with sun micro systems and my best contact there was bill joy who i admired as a Berkeley Unix founder and you know sun founder uh and bill got the idea of making the browser programmable too and so the idea made an idea was to put the java vm which at that point was not really easy to embed into net scape including the net scape version of windows that was still most popular which was the 16 bit windows 31 which was going away microsoft was coming out with windows 95 and everyone was afraid they were going to do you know internet explorer i guess two at that point three the next year they already bought uh or invested in somehow spyglass this other company that shot out from ncsa universal annoy um and in fact microsoft to try to buy net scape in late 94 before i got there and i heard about this later i heard they offered way too little money and so you know jim barks down jim clerks had get out of here in pound sand but then they realized oh this is going to hurt us because now they're gonna copy us didn't happen right away i'm not sure when gates internet title wave memo was written that's the famous memo he wrote when bill gates realized that microsoft was going down this old copy aol path or copy comp usur path a project called blackbird presumably after this or 71 i don't know but they were going to make a you know dial up service with the custom content language stack and custom rendering it wasn't the web um you know they could have content partners uh they have a lot of money but it still wasn't to scale the web it wasn't going to be compelling and gates realized this and he turned the company united dime and they couldn't buy net scape again i'm not sure the timing so they decided to copy it and once we realized that everybody inside net scape felt even more urgency and more of a frenetic mood and so my chance to do scheme disappeared when the java deal started brewing but there was still a chance to do a companion language to java because java was a compiled is a compiled language it's evolved and improved quite a lot since then too but it was for sort of a serious advanced program was the cost of certain salary or hourly rate and people observed bill don't don't judge observed and i mark and reason and i observed that in a mature stack like microsoft you really benefit from having a scripting language like visual basic which became visual basic script in i3 but didn't take on didn't take over uh kill java script that you need two languages one is for the component writers who are higher price and more expert and the other is for uh scriptors certify public accountants uh designers graphic designers with some programming inclination anybody amateurs doesn't matter there's uh much more demonic uh approach there for programming the components together gluing them together some people say duct tape language which i don't really like but we saw that bill joy and market reason and i we saw the need for companion language and the gleam in our i was to call it java script i didn't like it that was marketing plan mark called it mocha which i liked and that's gay marketing i think didn't like that so they said oh there's some trademark and some software somewhere that uses mocha so we can't use that and they tried live script in august and that didn't last and then finally we got the trademark license in december 1925 but the work i did to prove that it could be done was important because i came in in april and even then that's capable growing so fast that they couldn't find an open hiring requisition in the client team for me so they hired me into the server team and i worked for a month on server team on what became h1 1 so i was actually i had done protocol work at silicon graphics with great chesson uh for bell evs intern grad student intern who knew all the unix founders and gregg was very interested in taking um protocols to the next level with vlsi because he thought that cpus wouldn't wouldn't scale up he was mistaken in that unfortunately more is a lot more than kept up and you have you know gigabit ethernet running with conventional processors but i worked on protocols at sgi as well as unix kernel hacking and nfs and things like that so i i came into net scape to work on the server side for a month but i was i was thinking the whole time what should this language be like should it be easy to use might it syntax even be more like natural language like um hyper talk which is bill aconsense language in hypercard if you have a reuse hyper card on early mac uh and i thought uh well i'd like to do that but my management is saying make it look like java which looks like c from a distance what was that mean is it braces we're talking about visually yeah yeah what what was management to then understand what they know marketing didn't know but but management did like Rick shell vp venture new and we had a plan even that was if you have this companion language you're going to glue things together between java and javascript so you're going to have commerce in memory in the heap with data types so you're going to want some of the data types in java to reflect in the javascript you're going to want the primitive types that java unfortunately severed it from objects so at least some of them number double let's call it in javas terms from the c term for double precision floating point um or strings or bullions um and objects and so right away there was this constraint looking like java meant kind of the c curly brace syntax but also some of the data types analogics like objects and so on yeah i thought i thought it'd call comparison operator all the garbage collection yeah garbage yeah uh even the bitwise operators and shift operators including the unsigned right shift which java had because it didn't have unsigned inner true types it's it's said if you want to do unsigned operations use an operator and that turned out to be important much later i'll tell it story five time but um javascript inherited set of uh operators the expression grammar the statement grammar up to a point from java but i wanted a functional language i wanted scheme a little bit of scheme even though it wasn't as clean as scheme i wanted you had a love starting to drop you had a love for scheme and list but that that that functional language yes i wanted first class functions because i saw the need for callbacks in the browser where it's a single threaded program wow all the early browsers were single threaded and it's the right model for users most users weren't ready for mutual exclusion and yeah threading so in a single threaded world you you cannot block these interface so you have to use a callback and run later and the without getting too fancy and trying to capture the continuation like call cc does in scheme i thought i'll just make it easy to have fun arcs first class functions you passed you know downward and they can call back they be called back um and java didn't have that at the time it had it took forever to get proper first class functions uh lamb does now into into java java seven or eight i think it did have concurrency right yes from from the very beginning but you're you were thinking that the java script in the browser would not have the luxury of being concurrent that's right and the reason was java was going to run in a plug-ins so it could fork threads and go go to town but the main action in the browser was in the single threaded program single unix process on on unix on windows uh and it was where you had service the event loop and then go you know do things respond to the network layout some html render it turn you know widths into heights by filling containers boxes the early will become the css box model uh and run scripts to you know make the thing live layer respond to user input and all that event driven programming was in part like hypercard because hypercard had this on event names syntax and so that's why you have in java script on click run together as the name of the event handler and there's some funny ones on mouse over and on mouse out people still complaining about those but you know um there were many more events now over the years standardized but it was a mix of event driven single threaded programming because it had to run in the main thread of the browser where the action is and java never got there which meant java could not interact easily or quickly or in a nested way with the document with the objects reflected from the html document with the tables and forms and so on and that that is one of the reasons i think javascript survived and java kind of died java was in this plugin prison it essentially was confined to a rectangle the app with rectangle and while we even built a next year uh nictosan friend from sgi who was an intern grad student at cm u at the time built the first version of live connect to glue java and javascript together to deliver on that vision where you do have commerce between the data types and the heap did it work it worked but your java was in charge javascript was in charge and java was just these components these helper opium added a lot to everything in javascript and what happened over time it's like an evolutionary filter it just kind of who needs the plugin and in fact son mismanaged java as a plugin they they thought oh that's capable of giving us the distribution vehicle and we don't care about the browser it's just about getting java out there and that was a big miscalculation they then tried because microsoft's killing that's k five years they tried getting into microsoft and you may remember there was a son microsoft deal which famously blew up and and microsoft kicked java out of windows and that's when they really pulled the trigger i think they already evaluated it and liked it on andershelsbergs.net and you know c sharp and decided we're gonna just not have java we don't want you know any of that sun stuff we don't want the patent risk we don't want i'm not sure what the fights were about there was some patent angle to it i think and up till then microsoft had been using java components like in outlook web access which had a lot of javascript to be a webmail like hotmail like user interface they had to call the what the mail server through hdp and they they used a java object to do this and when they gave the boot to son they suddenly other you know the left hand gave the boot and the right hand said we better do something else and outlook web access what are we going to do and they said let's just add an active x component which is their own the native way of embedding things in languages will make it it'll be what became xml htp request which is now a web standard for calling asynchronously and it's been replaced by the fetch API in html five or html living document but this whole lineage goes back to java being successfully the loser and getting kicked out and after microsoft kicked it out it was a plug-in and you would find it required for like smart card banking in in the Nordic countries where that was mandated by law but really didn't get used much or you know there were pilots who used it for flight information but flash which nettscape could about but fortunately didn't they really didn't yeah that we were a shooter that well what year were talking about was flash I think after that p.o so it was probably late 95 and flash was around was it adobe no it was no it was it was called future splash and it was these brothers Jonathan gay I think his name was he he came knocking and the marketing guy at nettscape who was screening the technology partners or want to be acquisitions was brutal and just everybody wanted to get in on the nettscape you know stock gravy train and he sent them packing and they they ended up selling the macro media and macro media was where flash was created and the good thing about macro media was it was a tool company so it invested in you know the best ideas I think which are still somewhat lost to us a flash the timeline animation has sort of been immutable function over time the tooling were on that too like that dream weaver there's a flash flash director they were a bunch of them yeah I mean yeah they that was a flash builder was one of the last ones these tools were used by real artists and you know special effects people and designers all the restaurant websites around 2005 were done in flash which is you know we were trying to do h-05 at the same time that was the Firefox era we were trying to make the web capable enough you didn't need flash but if you recall you go to a restaurant it's like this is kind of like a game or something it's like a flash all the font looks small you didn't like flash from the beginning you like this is this doesn't feel right not really I actually admire flashes technology and I'm pretty pragmatic about these things and I realized that you know it doesn't matter if you're dealt a bad hand like JavaScript was a rush job or if you have flash as a plugin and you can invest in the tools and make it pretty good you should you should make it better for your users and grow it as best you can and what happened with the browser due to Microsoft's monopoly abuse for which they were convicted and you know even after that until I think Firefox and then Chrome was people kept saying oh the web can't do x can't do y we'll have to have a plug in we'll have to have a new approach well we'll clean the slate and have a new web and everyone who said that failed and the reason they failed is because there's too much value in the web this huge network and the worst is better principle means that you can not only start bad which they all sneer at but get on first and get why distribution get sort of evolutionary advantage in priority of place but you can also improve it over time yes and so if you're going to improve flash and for some reason flash is now at a favorite Steve Jobs said you can't have flash on the iPhone that was probably the death now put your energy into JavaScript and that happened right so we did things and was all with Adobe to improve which bought my macro media to improve flash and to improve the version of JavaScript that was in flash we tried to standardize that that's right I'm getting ahead of myself with it program for yeah that's that that's right yeah can we just rewind to the magical like you know it's a special moment in the history of all of computing it's we'll talk about it later but it's arguable it's possible that the entirety of the world will run on JavaScript at some point yeah so like it's like those are those days it would be it would be interesting if you could just describe you actually zooming in on the how the cake was baked from you know the the several days that you were working on it what was in your mind how much coffee were you drinking or you nervous why freaking out I'll try to remember it I mean you're right there with these pregnant moments you see in hindsight maybe they're overrated but like Hagle sees Napoleon on horseback in right and Yena says there's the world spirit on horse and I knew that there was a chance to do it Mark knew and he was my you know executive sponsor and he was the one you know sort of brainstorming how the JavaScript should be right there in the page that was important for him to say that because I I thought so too but a lot of people were like well you can't write programming language in the middle of the markup and indeed there are problems if you did it naively you'd see the code laid out as like random gibberish so I had to figure out how to hide that that was a challenge is that is that a breakthrough idea I mean so you mark thinking about this idea that you just inject code in the middle of the market of the web page yeah I was considered kind of heretical there was an s gml guru I forget his name but he corresponded with me and at first he was angry like you should have used a marked section why didn't you use a marked section and I said well s gml marked sections are not part of hdml by the way and they're not supported in the browser and so I did some hack that was equivalent and over time you could do the proper s gml thing but it eventually came around and it was again sort of a revolutionary necessity it was almost like integration like like you know the idea which limar ghoulies I think helped get across that we have to consider mutualism biology that maybe you know mitochondria were ancient procaroids that got into the cell and became beneficial somehow the same sort of thinking applies you have to embed javascript in hdml it's going to be a good virus the code becomes data in the sense it just gets carried carried along but is there is there's the side of the so you were focusing on the nest cape at that time doesn't the browser have to support interpret correctly this a mix of HTML and whatever code I had to hide it from old browsers including that scape one one which was predominant then so I used a n hdml comment but the inside the container that comment lived in the script tag which is a new element I could make different semantics in that scape two where those HTML comment delimiters instead of being multi line brackets became one line or essentially one line you see your the so javascript was written the programming language was written as a comment a comment for all browsers and a set of brackets that were ignored with real code for and it was this two way comment hiding hack as I called it that was absolutely necessary for us to get out the ground we couldn't have bootstrapped javascript without it we didn't have scripts that were loaded from a separate file the only scripts in that scape two were in line in the document what were the challenges here what what like what you know typing what were the choices you were thinking about garbage clustered garbage clustered I didn't have time to write a garbage cluster so I just I didn't at first the thing was using essentially arenas or what can you calls obj pulls and just would run out of memory eventually and I added reference counting in a hurry after the 10 days in which I had so after I was in the server team doing htp11 and thinking about the language I finally got transferred to the client team in early may and that's when I you know I got the go sign from mark and it was like we can't wait because people inside net scaper doubting even people inside son are definitely doubting bill joy was the champion but he was like alone in that seeing there was a role for javascript as the the as I call it the sidekick language robin the boy hostage frangmiller put it in the dark night returns that there was a silly little language that would be the glue language it could become important over time and and you were better off having that complementarity that pairing of languages just like Microsoft stack did with visual c++ so what was the big moment of I'm done so I had to do a demo I I forget the date I think I for a history of programming languages paper the Alan were sprock did with my healthy did a lot of the writing I think it was the 10 days from like Thursday evening through to the following weeks you know all the whole that week and then to the Monday I guess sleep not not not enough and I was really going fast because I'd already used a lot of um C compiler and front end compiler knowledge that I'd gained from undergraduate school when I started getting into computing as a renegade physics major people were formalizing more efficient bottom up grammar as parsers for bottom of languages really LALR one was the big thing and I studied all this and learned how to parse them and in the end if you're doing C language is you often do what what Dennis Richie did anyway which is the recursive descent parser you can hand coded and I did that for JavaScript in a blazing hurry mostly got it right I didn't you know have precedence inversion problems or other bugs but I copied a lot from job and C and I tried to keep things simple like the equality operator in those 10 days sprint between two objects of different dynamic type said no they're not equal they're types are different and then after that I had internal early adopters and they were using JavaScript to like match a number against a database field that had been stringized and they said oh can we just have implicit conversion and like an idiot I agreed I gave them what they wanted I was trying to please them and get adoption and that you know broke what what equivalence relation nature there was to the double equal you know there's some for edge cases with not a number that break that too but it really broke it having implicit conversions in the operator is something that people still roast me over so let's let's talk about two things one it sounds like the comparison operator the equality operator is the thing that you regret so maybe making it sloppy yeah making it sloppy so what is the biggest thing you regret in those 10 days and what is the biggest thing you're proud of so that that making it sloppy came after the 10 days and my lesson there which I've tweeted is when people come do you think can you please make it sloppy or add this cute feature the answer should be no and I should have known that because I think Niklaus Viert one of my heroes said the essence of design is leaving things out but during the 10 days I also like I said I was in such a hurry I left out garbage collection came back to haunt me but I got reference counting in in time that people weren't running out of memory right away on on long live jobs but what happens when you don't have garbage collection you have objects well you just run out of memory and you know love it at first you write a short script and hate doesn't last longer it doesn't do a lot it's okay I see yeah yeah but if you're writing a game or something and you're doing event based allocation you run out of memory and this was noticed in the summer of 1985 and people were like what's going on I said oh yeah I got to get I got better go back and do reference counting and then the rep problem the reference counting is you're writing the language in the runtime in C and unsafe language and if you're reference counting and you overflow the counter you mismanage it so it goes high it gets stuck high you leak memory again you run out if you underflow it you pre-memory that's still in use and even then we knew what all the the security hackers came to know that you therefore have a potentially a remote code execution vulnerability because this is before things like non-executable heap memory and stack defenses against taking over memory so if you can from the the remote side write some HTML and JavaScript that just happens to exploit a bug in memory safety like causes JavaScript to underflow reference counter and the script still has its hands on that object and it's trying to call a method on it and there's some kind of look up function table in the object but you've managed to stuff the heap with strings that forge their own lookalike for the function table you can call some other code and this was a problem right away so security you know JavaScript up the ante Java had this problem too but in its own VM and it just was you know a separate headache for sonda worry about we had this problem in that escape so net scape 2 came out after my 10 days and after these you know follow on work to embed JavaScript better in the browser and to add garbage or collection through reference counting really I call it reference counting and get it shipped we had a bunch of dot releases where we fix security bugs like maniacs but what is the thing you're you know when you sit back on a porch and just look out into the sunset what are you most proud of from those 10 days I think the first class functions shines I think especially since java didn't have it and it was somewhat unusual the scheme made it in somehow it's the end of the day I mean people complain because scheme has you know minimalism it has you know six or seven special forms it has hygienic macros it has call CC it has sort of a beautiful complete set of forms to make the land of calculus pleasant to use in practice and javascript is you know kind of multi paradigm or shambhal like just a small tangent you mentioned mark on recent it sounds like and bill joy but staying on mark it sounds like he had an impact on you in that he sort of believed in what you were doing there can you can you talk about like what role mark had in your life yeah we would meet at the the pencil like creamery and downtown palato and mark was just fresh out of you know grad school or whatever he was doing and he was big dude and he he got fitter later he had hair he he would order giant milkshakes and burgers and we would meet there in brainstorm about what to do and it was very direct because we didn't that much time the the sort of we didn't talk about it but the implication was microsoft's coming after us mark was saying things boldly a pre-ipo like net'scape plus java kills windows right so ambitious make make a browser programmable it becomes the new runtime for programs you know so meta oh assets their placement oh as um but he still saw value in javascript yes but even though he was saying that and java was the big name hence the trademark license uh he saw javascript is important and he even thought who what if we got i told this another review as i can say he thought what if we had um my friend kip hickman who had been at net'scape from the beginning and who was a kernel hacker at sji when i joined he started writing his own jbm before we consummate at the sun deal and got our hands on their code and the java compiler java c which uh are there vent hoffit written very nice code was all written in java it was self hosted or so called bootstrap and so we could use that as soon as kips java vm could run the bytecode from the the sun uh jbm running the the self hosted compiler to emit the bytecode so once we could bootstrap into kips vm we wouldn't need sun and mark was like well maybe we can just that you know ditch sun of kips java vm well if you're a javascript vm we now we need graphics so mark was thinking far ahead because he knew you could do things with html and images but at some point you really want the dynamic graphics or yeah like dimensional like even sji had already started its downfall because the first four to be a side team there had gone off to do 3dfx and all these other companies that made the graphics card on your pc right doom was was big and quake and so you were we were all playing quake i was old so i was terrible um but why not put that graphics capability on the web and in fact it finally happened uh and mozilla with firefox area with the glad bookiechevich taking open glle s and reflecting it as webgeal but opengelle s is the mobile version of opengeal which is a standard based on sji glle so this whole lineage of graphics libraries or really graphics languages for what became the gpu and mark was thinking ahead is like we need graphics too and i thought okay i try to get somebody i knew at sji but he's a grad student at my t he was studying in the barber list cough he laughed when he heard about this later in rmires he's a Cornell longtime thank you so full professor and mark said great well get him i'm not sure he's going to come well throw money you know we'll stock options we never did it and they did the sun deal so kip nobly put aside his own jb m and we used the sun jb m so that was an ambitious period and mark was very generative because he was pushing hard he was ambitious and he wanted to have net scape possibly be in control of the ball and maybe you can speak to the this dance of uh net scape versus an explorer you've uh you've uh thrown thrown some loving words towards microsoft throughout this conversation but that's a theme with uh i mean Steve jobs at a similar sort of commentary from a big sort of philosophical principle perspective can you comment on like the approach that microsoft has taken with internet explorer from i.e. one to edge today is there something that you see as valuable that they're doing in the in the occasional copying and that that's kind of stuff or is it um is the world worse off because an explorer exists so i'm going to segment this into historical errors because i think microsoft is today was sat yeah it's quite a different company and what they're doing with edges different but back then um gates you know aggressive character not really original in my view uh not an originator Steve job famously said once he doesn't have any taste and i don't mean this in a small way it's no taste i mean you can see this one we we apple at the time i had beautiful typography and you know ligatures and kerning and the fonts look great and windows had this sort of ugly system font that was carefully aligned with pixel so it didn't get any way what what is it i'm sorry to keep interrupting but why did why was internet explorer winning throughout the history of these competition distribution distribution matters not anything and this is why um you know even now we're seeing in the browser wars edge doing better because it's being foisted on people of windows we have windows ten boxes at home we have some windows seven boxes we or laptops we keep running too because we we don't connect them to the internet generally but um but but uh once you have that operating system to hold you can you can force you know edge and apple did it with safari too it's not unique to microsoft that's sad by the way uh this is the matters and that's why uh i think i was going to win and that's why everybody at nescape felt were doomed this was something michael toy and jamey would say we're doomed um but for a while there we had a chance and we innovated in net escape to we met the big platform push java java script and uh plugins more plugins and um you know more hdml table features and and it really started making a prayerable stack out of what were pretty static web languages and even in the beta released in net escape two people were using javascript to build what you would call single page applications like gmail and they were using javascript locally to compute things and to call the server on a hidden frame in the background so it was prefiguring a lot of what came later as a jacks or dynamic javascript and mhdml so people saw that i mean even then they saw it yeah that's kind of um i don't know but from my perspective that seems quite brilliant this seems like really innovative that you would have code run in the browser it did impress me with something um which i learned later about from eric von hippel of my tea which is user innovation networks lead user effects that throwing out javascript even though we weren't doing open source we were doing beta releases early and permissively with net escape getting early developer feedback absolutely critical i loved it i did some of that with sgi with some of the products i worked on but it really came to the foreign net escape and that you know culminated in mozilla where you're dealing with developers all the time and early adopters lead users but lead users helped to improve javascript even in those last few betas where i can hardly change things as under pretty rigid change control so we're talking about just a small collection of individuals that are just like up front these guy named bill dorsche you can find his work in the web archive still from nineteen ninety six it's a single page application it's an artist gallery of mountain art uh these javascript doesn't quite work he uses javascript locally he says local database what you would think of now is json but it's all pure javascript code a bunch of objects being constructed that's so cool so how is uh if you can do sort of a big sweeping progress of javascript how is javascript changed over the years interview from those early ten days with a quick addition of garbage collection of fixes of non security how is this evolution that now it's taken over the world in this it's been a bumpy ride because the standards body got shut down after microsoft i think took over the web and then felt punished by the usv microsoft antitrust case can you speak to this antibody like that was a fun ride too because net scape had taken the lead with the web and html innovations like frames and frames at tables and the w3c was sort of off even then sort of an s gml land heading toward xml law law land i'm going to be a little harsh on it was that jml i'm sorry s gml was the the precursor markup language to html or was sort of the more extensible standard generalized markup language it was it was a xml like 20 brackets but it had all sorts of elaborate syntax for doing different semantics and this is why i think you know tbl and others who wanted to do the semantic web then took xml forward but they had this uh some of them anyway had this strange idea they could replace the web with xml or that they would upgrade the web to be xml and it couldn't be done worst is better had concrete meaning the web was very forgiving of html including sort of minor syntax errors that could be error corrected like error correction isn't generally done in programming languages because that's another amazing thing about html is like it's more like biology than programming yeah exactly and so xml was in its standard form super strict and could never have admitted you know the kind of users who were committing these errors and the funniest part was microsoft said hey we're doing xml but the way they put it in internet explorer under the default media type put it through the html error corrector so they kind of bastardized it to make it popular and usable and accessible and so xml as a pure you know thing was never going to take over and what w3c was kind of not fully functional because nesshapes wasn't cooperating with them we thought about where to take javascript and we realized our standards guru Carl cargo realized there was a european standards body that had already given microsoft fits by standardizing parts of the windows 3-1 api which european governments insist on they said microsoft we can't use your operating system without some standards and microsoft said you know here's our docs and and the government said no we need a european standard so this body called the european computer manufacturer association eckma which eventually became global and became a proper noun and said acronym right it's just one capital e now with a lowercase cma right and as uh... one of the early microsoft guys i met when we first convened a working group to talk about javascript said it sounds like a skin disease but it gave uh... i mean maybe you'll speak to that but it gave the name to javascript of eckma script that was the standard name because java was a trademark of sons they were so aggressive they were sending cease and desist letters to people whose middle european heritage meant their their surname was jabonco and they called their website jabonco.com and son would sent them a letter saying you're using jva at the start of your domain name you must cease and desist i love marketing more than anything else in this world uh... so so eckma script and now is popularly named as es plus version i would say people use js more than anything people still say javascript javascript in all the books so i mean when you're referring to it's usually javascript and when you want to refer to a version of javascript you'll say yes six yes five yes or now they've gone to year is which is kind of confusing because it's an offset of two thousand nine yes six yes two thousand sixteen uh yeah it doesn't match the years perfect yeah yeah so so what uh what what were the choices made and how did javascript evolve here so we took this this new standards body which had we thought uh... sort of uh... proven record of standing up to microsoft but microsoft sent a lot of people they sent some some people who were pretty good and then when they realized that i was there in net skate was not gonna you know just bend over and do whatever they wanted they sent somebody really good here's smart guy he did a lot of work on the first draft of the spec uh... shank hats and burger he's left microsoft he even did what i sort of did he told us bosses i stopped bugging me to do other things i'm focused on this because it took a lot of focus work to create the first draft of the and i was still holding i was spending almost all the plates i had like part time help in certain areas and on the front end integrations i had the front end guys but i i couldn't take as much time as shank was to write the draft spec but i had to participate because i was essentially helping write down what the language did in areas where we didn't like what it did and microsoft didn't agree we sometimes you got away with slight changes and that's the story of standards you have different implementations and depending on their market power they interoperate where you have agreement and where they don't the dominant one usually sets the de facto standard and then you should probably reflect that into the disjury standard and this happened with javascript over time his net skate went down and microsoft went up we did the first edition of the standard codified in 1997 in france we had a trip to nices uh... which was very memorable for any interesting reason or just because nices and and ectmas european and i bm and others were you know there uh mic kowashon i bm fellow was a british and we the guy who ran ectmas time yon vending belt was quite a uh... a racon tur on a a very fun guy and he had us out for you know the great you know sweet amer the boi abay's and was the standardization process beautiful painful that those early days you as a designer the light was painful because it was rushed now guy steel was contributed by sun so even more than shan you had this giant brain guy steel helping bringing some of that scheme magic even brought Richard gave real for fun and Richard wrote the fourth clause of the ecma standard about which is kind of intro to what javascripts all about so we had some really good people and we didn't fight too much there were some tension where i was fixing bugs and i was late to a meeting in shan katsumberg microsoft was actually mad like where is he we need him and when i got there i saw that only he saw this sort of off by one bug somewhere in the spec and i saw it too and i said there's a fence post bug there and then we kind of locked eyes and we realized we were on the same page and we kind of he wasn't mad anymore what were the features that are being like struggled over and debated and thought about and it was mainly writing down what worked and what we thought should work in the edge cases that didn't interoperate or that seemed wrong uh... but we were already laying the groundwork for the future additions that i was already implementing cst i was still trying to lead the standard by using the dominant market power to write the code that actually shipped so the de facto standard lead the dessert standard and i was putting in the missing you know function forms that i didn't have time for in the ten days so this is the engineering mindset versus the theoretician so you didn't want to create the perfect language but one that was the popular and shipped and all that kind of stuff and you could say there was i was standing out of shoulders of giants so there was a staged process where i had to hold back things that were well designed by others and other languages that i could imitate but i couldn't do them all in the ten days so they came in in nineteen ninety six in ninety seven and they came into the third edition of the standard which was finally finalized in nineteen ninety nine but at that point netscape had been sold to aol and was which was a decent exit considering and uh... you know had previously been mercilessly crushed that netscape was selling the browser along with server software that it acquired after its IPO and microsoft was just underpricing it so there was no way to compete with that microsoft was also you know it making internet explorer the default browser in windows which is called tying in antitrust law and they were doing even more brutal things there's a famous investor he did very well on google so he's a billionaire rom shrew rom and he was sales guy head of sales at netscape and he got off the phone looking ashen faced after compact called and said microsoft just told us they're going to pull our windows license if we ship netscape as the default browser wow this is so there is some bullying going on it was totally in material in the antitrust case but but net dot script escaped into the standard setting where there was fairly good cooperation microsoft had a really good guy on it and you know guy steal was there for a time and there was some good work but after the antitrust case and you know netscape kind of dissolving into aol not really going anywhere quickly mozilla took years to really bring up the standard froze and by 2003 even though they've been sort of noodling around with advanced versions javascript 2 I'd given the keys to the kingdom to another MIT grad Baltimore or hot very big brain and still google I think he won the putt them in 86 so he's yeah very math magic he he designed this successful language javascript 2 but it only showed up in mutated form in microsoft's asp dot net server side and it wasn't last there and it showed up in flash and that's what became action script 3 which action script interesting and then and then flash was declined and so how do we arrive at yes six words it's like there's so many where everyone okay there's this history of javascript that people were it was just like cool when you're like having beers to talk crap about javascript everyone loves to hate like people who are married say ah married sucks is they just want to get let let off some steam even though everyone uses the language yeah but yes six everyone it's become this like uh reputable like it fixed major pain points I think uh it added things to the language and added something that was already yes five strict mode but made it implicit in class bodies and module bodies it was a big jump but it accumulated some of the es 4 designs that we'd done with at Adobe for what we hoped would be the fourth edition of eckna script that were supposed to fold in some of these old javascript two ideas that had come into action sort of three so you look at the family tree and you see these forks and the main ones are the the ones that go into Adobe flash acquired from acrimedia and the one that went into the service side of microsoft's stack which kind of died um and then trying to bring them back into the standard and not quite succeeding es 4 was was was mothballed but all the good parts that everyone liked made it into yes six and so that that was a success and I said earlier I had the wrong year I think it's 2015 so it's off by four yes yeah it was done finalized in 2015 it took a little longer than we hoped but um because es 5 was 2009 and that was a smaller increment from yes three we skipped four again we mothballed and we had a split in the committee where some people said you know es 4 is too big we're going to work on incremental improvements no new syntax in particular they promised not quite true but they they added a bunch of interesting APIs out on where sproch my co-author of the hobble paper and he was at microsoft's time I ended up hiring a mozilla he wanted to get the mozilla and keep doing the sort of editoring editor job of the javascript standard eckna script um and when we got es 6 done it was it was a little late 2015 and we switched to your numbers so people still call it es 6 I call it yes 6 yeah but if you remember you know off by nine plus two thousand yeah I mean es 6 is such a big job I mean like you said there's a third that connects all of it but yes 6 is one that's like became this language that it almost feels ready to take over the world completely more programming on the large features more yeah features you need for larger teams and it software engineering microsoft did something smart too they anderson company look hoben who's left microsoft also did typescript and they realized uh something I think that galah brok is also popularized and and uh he was involved in darted google if you don't worry about soundness in the type system you don't try to enforce type checks at runtime in particular just use it as sort of a warning system a tool time type system you can still have a lot of value for developers especially in large projects so typescripts been a roaring success for microsoft well what do you think about type what do you think about typescript is it adding confusion or is it ultimately beneficial I think it's beneficial now it's technically a super set of JavaScript so of course I love it right the shortest JavaScript program is still a typescript program any JavaScript program is a typescript program which is brilliant because then you can start incrementally adding type annotations getting warnings yes learning how to use them microsoft had the kind of look around corners at the standards body and guess how their version of modules or decorators should work and the standards body then may change things a bit so I think they're obligated with typescript either to carry their own version or to bring it back with incompatible changes toward the standard over time and I think they've played generally fair there there's some sentiment that why don't they standardize typescript well they've been clear they don't want to they have a proprietary investment it's valuable they've control the ball and in some ways you you can say the same thing to any of the other big companies in the standards body why isn't Google standardize it stuff so you think it'll continue being like a kind of a dance partner to JavaScript to the base JavaScript there's a hope that at some point if they keep reconverging it and the standard doesn't break them and goes in a good direction we will get at least the annotation syntax and some semantics around them because when you're talking about type annotations they're generally on you know parameters and return values and variable declarations they're cast operators you want that syntax to be reserved and you want it to work the same in all engines and this is where ideas like galods plugable type systems might might be good though then you could create the same problem you have with the list and scheme where there's a bunch of macro libraries and they don't agree and you you can conflict between them but the plugable type systems could be one way to standardize what do you think about the giant ecosystem of frameworks in JavaScript it feels like because I mean this is a side effect of how many people use JavaScript a lot of entrepreneurial spirit like create their own JavaScript frameworks and they're actually awesome in all different ways and that this is an interesting question about almost like philosophically about biological system and evolution all that kind of stuff do you see that as good or should it like should some of them die out quicker I think that maybe they should now jQuery was a very clever thing John Rezeg made this library that was sort of query and do and blended sort of CSS selector syntax with JavaScript sort of object graph or DOM query and made it very easy for people to do things almost like they were learning jQuery as its own language domain specific language and that I think reflected in part the difficulty of using the document object model these APIs that were originally designed in the 90s for Java as well as JavaScript they were very object oriented or even procedural they were very kind of verbose and it took like a constructor call on three different you know the hockey polkae dances to do something whereas jQuery it's just one line yeah right so that fed back finally into the standard didn't it didn't mean we standardize jQuery it wasn't quite that concise but you find now with the modern standards that we were working on in the HTML5 sort of effort that things became simpler the fetch API and the query selector API document query selector a lot of things can be done now in raw JavaScript that you would make more concise and terse in jQuery but it's it's not bad it's it's pretty good whereas in the old DOM of 15 years ago it was just too provoked so maybe the frameworks were born kind of because JavaScript lacks some of the features of jQuery and so like now the JavaScript is swallowing what jQuery was then the frameworks will only the ones that truly add value will stick around and the other ones will die out and that highlights this also this division between the core language JavaScript which can show up in other places like Node.js on the server side and the browser specific APIs or the document object model APIs which are even managed by the w3c the standards body that was off an XML la la land when we were doing real JavaScript standard to ECMA and you you you have this division of labor division of responsibility and division of style and sort of aesthetics and also speed so that document object model really stagnated after Microsoft kind of de-invested in the web and Microsoft did something in their haste in the spirit of Netscape doing things quickly and getting on first called DHTML and some of their innovations that were like an alternative document object model didn't really get standardized until HTML5 when we pragmatists set up for at the time eNXN who went to Google Apple and Mozilla said let's let's XML is not going to replace HTML HTML 4 is too old let's standardize HTML5 based on all this good stuff including that DHTML variant dynamic HTML5 feels like to me maybe you can correct me like a beautiful piece of design work it was it's not often with web stuff you have this breath of just like whoever did this is they fit it just feels good is that what are your thoughts about HTML is it am I being too romantic a little bit are their flaws fundamental flaws to it that I'm just not aware of my you know my old friend Hixie did a great job he was a another renegade physics student he and he was a basically a QA guy at opera but he obviously a fit trained physics you know student and someone who could write a Britisher he he developed test suites and he started thinking about them more axiomatically now this is this can be good because you can sort of system as high as in a way that makes a better HTML or you can get caught in the pragmatism of saying well we have to handle all these edge cases so we're just going to have sort of a test matrix and if the matrix is large it will not be beautiful by many people slice everyone likes to minimize along their preferred dimensions the seven special forms in scheme or whatever but but reality is HTML needs to be big it's kind of shambhalic it's a creative multi paradigm and Hixie did a good job I would say with a bunch of it other people came in in the spirit of inhix and to do HTML5 work and they've carried on that effort and it's a so it's a mix of pragmatism de facto standards from the past being sort of combined or written down for the first time and then rethought in a way that has a simpler syntax like the fetch API instead of XMLHTP request video too as well it ultimately it feels like maybe you can correct me feels like it was the nail in the coffin of flash Steve jobs saying no flash on the iPhone in my opinion was the extra that stick to the hard but but well I'm not sure what trope you want to use this flash was a zombie for until just this year right or last year I think last year was the end of flash main browsers but jobs really did the death blow and yeah you're right we had to make HTML5 competitive I still don't think we got that beautiful timeline animation the timeline things you like the time I mean me from a you know I used to animate all kinds of stuff inside flash plus there's the programming element yes it was a little bit I don't know if you comment on that but to me it was a little bit like go to statement like in a sense that there's a little bit too chaotic like I didn't that OCD part of me as a programmer wasn't satisfied by flash it feels like there was bugs that were introduced through the animation process that I couldn't debug easily yes I heard that too I didn't use it so I'm doing the grasses greener thing here yeah the thing I liked about the animation model was that it was this immutable function of time so you could time warp and you could if you dodge these bugs or work to carefully you could really make it sing in ways that I think still a little challenging with web animation standards but are just using raw canvas and web GL but there's so many tools now that maybe it doesn't matter and and yet we had to you know do video we had to do web GL and then evolve it we had to do web audio but once we did all these things that helped flash die thanks to Steve Jobs we had something that people didn't realize we had that vision that market reason have this graphics capable to the metal portable runtime and we had Mozilla realized this and we we saw JavaScript was something that you could compile to use Adobe had somebody in the Adobe labs doing this too he had a project called alchemy we had somebody who's now Google alone Zakai who did his own LLVN based compiler that would take C or C++ and it would emit JavaScript and you would think this is crazy you're going from this sort of machine types low level you know controlled memory allocation language to this garbage collected dynamically typed high level higher level language but alone sort of just phenomenologically carved nature of the joint and found the forms that were fast in JavaScript and then with Dave Herman who I'd recruited from North Eastern University who was a type theorist and Luke Wagner who's still a Mozilla who was the compiler guy and the jet guy they figured out how to codify what Alonan done into a typed subset of JavaScript called asm.js and this is a strange thing to think about because it doesn't have new syntax the types are casts that occur in dominator positions in the control flow graph so it's like a hack on JavaScript and it's a subset and it uses those bitwise operators that I talked about copying from Java to basically cast numernic types which are double precision flowing point into integers and so inside JavaScript in the kernel semantics are integers and if you use these operators if a compiler emits them in the right places you can then treat them as typed values typed memory locations and you can type check your program you can not only type check it you can compile it and this is all in sort of linear time oh and you can compile it to have deterministic performance it doesn't touch the garbage collector it calls a bunch of functions that come from the c functions or c++ code that you're compiling and you can make the epic unreal engine go in 30 frames a second yeah and when we did this in 2013 in the fall you know Tim Sweeney I met didn't think it could be done quickly thought I would take years and the team went to rolly to epic and in four days they had unreal engine ported by pressing a compile button right they had to but they had to have web jail which came from open jail yes came open jail it came from silken graphics jail they had to have web audio so they could map open al which was another audio library standard to web audio which was kind of a chrome idiosyncratic thing but they they could make it work and they had to have asmj asked for fast c++ to javascript and if you didn't have that fast compiler step the javascript you'd write by hand trying to do an unreal game would be too big and too slow it would touch the garbage collector it would not keep up with 30 frames a second on the hardware 2013 hardware so we demoed that at at this was been fall 2012 that I think about it because we demoed gdc game developer conference 2013 and people were stunned that's like unreal engine unreal tournament running in my browser window no plug in no flash no Java no so what those the early days of because javascript now is able to run basically on par with a lot of the like c++ yeah and even before then you had the fast javascript vms in 2008 when chrome came out just before came out mozilla my friend Andreas gal and I another hacked out trace monkey our trace based jit the squirrel fish extreme team at apple did their jit and we were all competing on this crazy performance benchmarks it was a little bit too much tuning in the benchmark but javascript started getting fast and developers started noticing it but it was still kind of this its own high level language with garbage collection the asmg s step helped us go further because until we really proved the concept people were still saying well javascript is okay it's getting faster thanks to v8 everybody gave google credit especially google but we need something to kill flash let's use the portable native client code that google had acquired native client which is a separate lineage for taking basically ccode compiling it into a software fault isolated container of some sort using some kind of virtualization technique and maybe it can even be in process and still remember you save that would be awesome but they ended up using process isolation too and that kind of weakened it and in the end it was like portable native client okay you know meet the new boss same as the old boss this is the google flash right but but when we get asmg s and we showed unreal engine working I think it was only a matter of time before google through in the tile and in fact everybody agreed in spring of 2015 we're going to take what was proven by asmg s and make a new syntax a binary syntax sufficient that loads into the same javascript vm the javascript loads into so there'll be two source languages one vm very important one garbage locker one memory manager one set of compiler stages uh and that's called web assembly and that's the successor to asmg s and it's important that it have binary syntax because at the end of the day especially i'm mobile if you're downloading javascript even if you're using elz compression on the wire that's cool but you've got to blow it out into memory and then parse the silly eight character function keyword that i picked why i could have used something shorter i picked it because of aq the unix tool so anyways i'm not falling i want to but i'm not falling the octrade yeah don't want it sorry i said surprising to you that uh how damn fast javascript is these days i mean like you've been through the whole journey i know every step of the way but is it like i mean it's how it feels incredible it does but i knew so the funny thing is computer science is this big karmic wheel right wheel of fortuna um and uh in the it's not the 97 i was loaned by netscape to do due diligence for son in their acquisition of anamorphic which was uh david auger uh come and and friends um people uh kreg i'm forgetting his name he went to microsoft uh these stanford language buffs who would take in small talk and then david create itself it as a simpler sort of small talk language and may really fast just in time compiling vm's for and they you know well ahead of java hot spot or javascript v8 or any of these modern vm's figured out how to make dynamic code fast because small talk is dynamic language right it has classes it has i think more lockdown declarative syntax than javascript but it's fun to millithenemic you don't declare the types um but you could infer the types as the program runs and you start to form ideas about what types are actually flowing through key operations and you form little so called paulomorphic inline caches that are optimized machine code the cache is the machine code that assume it does a quick check to make the sort of type is right and if it's not right it bails to the interpreter and if it is right you go pretty fast and that short test is a predicted branch so things are things are pretty quick all that amazing stuff i knew about the 90s and i i didn't have time to do it and anamorphic got bought by son and they did hot spot and you needed that even in java because at scale java has some dynamic aspects due to invoke interface you can have basically collections of java code where you don't know at the time each each module or packet is compiled exactly what's being called what what subclass or what implementation of an interface is being called and so you want to optimize using this sort of dynamic paulomorphic caching there and they did that hot spot amazing amazing beast i've met like 13 people who all claim they created it i think i think one of them maybe deserve credit more than others um but i didn't get to do that in java script and when we knew that the google was going to do the room browser which we knew it musula around 2006 i also met the team that did v8 and it turns out it was lar's bach who was one of the young engineers from anamorphic got acquired by son and so lar's is like the one of the world's expert on these kinds of virtual machines and he picked my brains about java script i could tell he didn't like it at the time but he had to do it and oh really interesting yeah in 2006 launch at google's campus um and and then i had another friend who was devoral at chrome and he said yeah we don't know what they're doing this is getting 2007 to fall getting toward 2008 we're trying to get chrome out and we don't know what's going with the v8 team they're often all who's Denmark you know rewriting their engine four times which is good that's the right way to do this kind of development you know they were learning java script including all its quirks which they came to hate the fire of a thousand sons which is one of the reasons that lar's and company did dart their own language but they also made the language fast and meanwhile we knew this was happening so we got our act together with um trace monkey our tracing jit at musula and apple i think was also aware and so they were doing their own jit so the the era of jitted fast java script in 2008 had this prehistory going back to small talk itself and anamorphic and the again the lineage is interesting because you had lar's and anamorphic and then he ends up at google yeah and today we have an incredibly fast language that like you said still you know without hate you can't have love so i think there's both loving hate for this dance this rich complex dance of java script throughout its history there's a dialectic of sure for sure that today java script is the most popular language in the world why by many measures why do you think that is is there some fundamental ideas they've already spoke a little bit sort of broader that you think it's the most popular language in the world so i think i did you know by doing first class functions and taking the the good parts of the sea operator hierarchy and and just keeping things um simple enough maybe it could have been simpler but had had to make it look like java and interoperate with java that there was uh you know inherent goodness and iris teeteling quality there and people perceive that even through all the quirks and warts and then over time working on it with the standards body working on it not only in as a core language but in the context of html5 and making the browser better uh listening to developers thinking about this is something that niktolson wrote nicely about on the heckrenius i was very flatter he said java was this thing where the experts were writing the code and it was compiled and you had to declare all your types and son didn't really give a damn about you know the average programmer who wanted to build real web apps dynamic things and i was in there meanwhile doing uh you know bunch of people's jobs making javascript survive those early years when it was kind of touch and go right javascript was considered uh Mickey mouse language it was for annoyances like the scrolling text at the bottom of the browser in the status bar uh but i kept listening to developers working with them and trying to make that it run in that single threaded event loop in a useful way and i think that forge something that people have come to love now you don't always love you know the best thing right i talked about shakespear sonnet about um i mistriessize or nothing like the sun or you know the scene from uh josh weedans film uh serenity at the end where the actual piece in the score by david newman is called love where uh met cap and mall is teaching uh river tam about how to pile the ship and she's a super genius super solider she knows how to do it already and he's he's basically talking about how you have to love the ship because if you don't it's going to kill you and then the piece falls off the ship it's kind of like javascript you have to love it you have to love it because now it people say uh it's we're stuck with it because it got this priority of place but there's love underpinning that and actually the listening to developers that that's kind of beautiful there's uh most successful products in this world with all the messes with all the flaws perhaps the flaws themselves are actual features but that's a whole another that's a discussion about love but underneath it there's something that just connects with people and it has to keep connecting if javascript kind of went off in this people sometimes can play about e a six or you put classes in javascript i hate classes you know you ruined it but it's not true it's a dynamic language small talk had classes um python has classes um there are lots of list variants that have classy systems um common list um so you know people who don't reject it based on some sort of fashion judgment do use it and do interact with the standards body the standards body is competing browser vendors mainly but also now big companies that use javascript heavily the pay pals and the other such companies uh sales force and they have to cater to web developers they have to hire developers who know javascript they have to keep um their engines up to the latest standard and this creates all this sort of social structure around javascript that is unusual i mean you you get c++ buffs to follow the inner workings of you know c++ what is it now 21 something i don't know i've lost track but it's it's a more rare if i group it's more like the old language you know gray hairs uh where it's javascript is a younger and more you know vibrant and large crowd there's a community feel to it there's uh echoes that perhaps i don't want to draw too many similarities maybe you can comment on it there's a c++ is like wall street and javascript is like wall street bets from the recent events is like there's a chaotic community of all and there's some power from that distributed crowd of people that's more themotic it's more of the people uh it it lets people in without requiring these credentials i remember in the late 90s into the nautis people were all getting java credentials and i knew people um and friend new people who became java programmers and you knew they really should have in like nature guides or pilots they hated programming but they thought i got to make my job in program do you have some uh because it's such a monumental moment in our current history as a quick aside do you have thoughts about this huge distributed crowdsourced financial happenings uh with wall street bets that's like nobody could have well you could have predicted but the scale and the impact of this kind of emerging behavior from independent parties that could happen i said my own experience with the dismal science uh as with physics led me to reject a lot of bad models and you know economics was almost compromised by politics but it politically economy um you could also argue that it was it used to be a branch of moral philosophy so it was concerned with the good and it became divorced and became sort of in this causing the toning way just about everything's just running by itself don't worry about it you know this probably crushing your net escape company but that's just nature and economics couldn't or doesn't really have good models for the wall street bets subreddit you know they they know how to squeeze a short right so um the amazing thing is you have um robin and app which was again supposedly for the demos for the people and eliminated the fee through various kinds of um you know straddles or some kind of um spread operation that helped them eliminate the fee and you read the fee and in fact you know as a broker in these days because it takes two days to settle there's counterparty risk as as they found out and um so the wall street bets uh people you know the the the memes are like the terminator robot with six hundred dollar stimme check and the hedge funds the the anime little girl hiding under the desk um um there there's a problem which i talked about in the recent podcast which i'm conscious of from the history of the web and that is you could say it's monopoly which antitrust wasn't enforced after USU Microsoft for a long time and um a lot of this was due to the money interests buying control of politicians and you know in play those five regimes that's oligarchy yes that's that's where we are and now we're seeing a fight against the oligarchs i don't know if it'll work but you're definitely seeing it and it's also kind of hackerish right it's got a hacker ethos you know hey robinhood no fees oh interesting hey you know um looking by a fraction of a share in this thing right and keep buying with my stimulus check so uh i mentioned hegel seeing Napoleon on the horse right hegel also talked about the the cunning of reason that you have the sort of you know god see history in full and if you believe in god or you know we don't know the future but there's always this sort of flying the ointment this unintended consequence that confounds the best plans of the powers that be and we're living through it that's i'm glad it's not you know street warfare or or mechanized warfare because it has been in the past um it's it's more like soft power yes and uh people are fighting back do you think it's possible so the java script used to be uh for the front end of the web it's now increasingly so being used for back end like running and stuff that's like behind the scenes and it's also starting to be used uh quite a bit for things like TensorFlow js so starting to actually use like these heavy duty applications that are using your networks where she learning so on in the browser is it possible in 10 20 30 years that's basically most of the world runs on javascript this is a dystopian a nightmare to some people um when i when we did asm jasaweb assembly i would joke and meme people with scenes like neo waking up in his pod in the matrix and he's all skinny and weak and hairless um and you know you realize in the future that you're living in some simulation that it's all running on javascript and you just scream forever um it's possible Gary burnhard uh does these funny talks he did what js and then he did this uh life and death of javascript i think it's called where he he took some clever ideas that actually have a a thread of credibility to them but i mentioned software fault isolation it way in the old days when we were using computers we we said we're gonna use the unix you know monolithic monitor and it's the privilege program this before even had hardware rings of protection those some of the early sixties operating systems used hardware protection zones but unix is privileged and the program that runs user code in a process is is hosted it's the guest in the host and you get to suspend it you get to kill it uh if it crashes it doesn't take down the whole of us it's a wonderful idea um but the call into the kernel is expensive the system calls so called and this is even been optimized now or things like getting the time of day so it doesn't actually enter the kernel and meanwhile hardware architectures and virtualization techniques have gone in a different direction even to the point where you can do software fault isolation very cheaply without entering the operating system kernel so you get unicernals and exocernals and very lightweight VMs and so Gary took this idea and said javascript will take over computing because the system call boundaries too expensive so everything ends up in javascript with these lighter weight isolation enforcement mechanisms it's not totally beyond belief um that's not free web assembly too it's nice to ask you sort of for advice to uh there's so many people they're interested in starting to learning about programming getting into this world is there um some number of languages three to five programming languages that you would recommend people learn or maybe a broader advice on how to get started in programming well so you asked about machine learning and you know javascript is a general purpose language and it's a language that's not um not that great for doing um you know matrix operations or um doing parallel programming i would say without using some extensions or some libraries that have some magic in them so if someone wanted to you know learn um of the they're amazing languages and sort of the apl family that are very useful for i would say linear algebra which gets to a lot of the kernels in machine learning and so apl had like j and then k and their k variants because the guy that did k is still going and he's they're proprietary but he's still innovating there um there are you know python is used so people talk about tennis flow j as well it's not that's surprising because python was heavily used for machine learning and python was always you know they didn't have this fast jessenton compiler tradition there were some projects that tried this and some of them were interesting um pypy was interesting but um the philosophy with python was all you need to go fast right a c plugin and dropping the c code um so i think people should look at multiple languages because they're different tools in the belt if you're trying to do supervision or rapid prototyping you want a dynamic language you want to throw things together and see what works if you're trying to go down to the metal very fast well i'm an old c hacker but i was also the sponsor executive sponsor of rust at mozilla and rust is now escaped you know from that sort of nest uh where it was born to be uh adopted by a bunch of companies and have a foundation in the works uh some of the key core team members are working now at amazon and other places so it looks like rust is as reached escape velocity and rust is an interesting language because one of our goals there one of the reasons i sponsored it was we were all tired of seeing those remote code execution vulnerabilities due to cnc++ uh and we thought can we have a sort of safety property through uh type and effect system or an ownership system and rust has that and that ownership system is interesting because it doesn't just give you memory safety there's a sort of theorem for free a dual that falls out for protection against data races so rust is better for low-level programming you to limit your unsafe code where you do have to be unsafe uh and you can prove certain facts about memory safety and race condition uh avoidance and so i think people should learn these new languages i think go is is great language i admire you know the unix uh people who did that cnc was involved rob Pike of course um david uh what's his name and other people go is a huge success um really on the server side anywhere you have um you know a lot of networking to do and it's garbage collected but it's also very pragmatic and has that sort of sea flavor as an old see hacker i can't get used to the fact that they swapped the type into Clarity in the declaration order i haven't used rust but this is one of the most respected and loved languages currently so it's yeah and it's still young you look at these things javascript is now considered old um that's gone to so many versions that you can fall in love with it all over again 25 plus years you know it's it's it's an adult uh should be out of the house but um could be around another 25 years cannot rule it out so rust will be around for a long time the longer you're around the more likely you're lindy and you're around you know a lot of people ask me like uh i i'm often torn between recommending either python or javascript is the first language to play with because i mean it's difficult because it's so easy to do javascript incorrectly it's much uh it's much easier to do it correctly these days or like well like learn about programming but the the cool thing about javascript is that you can create stuff that will put a smile on your face like as a as a develop you can create stuff and it'll visually look like something and it'll do stuff and it it makes you feel good it makes you fall in love with programming with python you could do the same it's a little slower and with c++ it takes five to ten years to write a program that actually does something yeah so like there's that tension between is javascript the right first step or is it python and i've been going back and forth on those two i'm my python right it came from a lineage of abc which was a pedagogical language in in the Netherlands um and um it uh you know um it it it it was a good teaching language too i think it is a good teaching language and it's a little more restrictive in that if you misspell something in a way that javascript might let run let reach runtime it'll get stopped at uh syntax check in python that's good for beginners i think the the sloppiness that some people object to like people were just tweeting at me uh having just learned javascript they said i could take a number and i can index and do it and get undefined out of it as a property and why is that a number is not an object and i explained why it is because like in java the primitive types which unfortunately are not objects can be automatically boxed or wrapped by an object and i made that implicit uh in in java it's it's typed and you have to declare things and you'll get type errors um but there are cases in java where you get auto boxing or auto wrapping because you've declared that you want it um in javascript it just happens and so once i explained it like oh wow i get it but it also means that you can commit a blunder that right just you don't get punished for you don't detect and this uh to get undefined value and you don't know where it came from right i've been reading a lot about military history recently and one way to paint the the picture of browsers in jener browsers is through the various wars throughout its history i don't know if that's a useful way to look at it but we've already talked a little bit about net scape and and i'd explore uh in the early days can you tell the story of the different wars if that's a all an interesting way to look at it of the 90s and to today yeah so i mentioned that microsoft you know which was convicted for it did abuse its monopoly but they had a pretty good team by the time they did i4 and net scape unfortunately i was like second floor and i was friends with all the first floor people the front end guys who did the javascript event cook up and things like that um that that team was fairly burnt out and i think having gone public the man upper management wanted to buy a bunch of companies to try to go ahead to head with microsoft didn't work but buying a bunch of companies usually doesn't work i think the moderans sort of approach it roughly is like mark zuckerberg uh took which is to keep them at arms length and let them do their thing and now that he's pulling what's that been and people are fleeing it because it's tied into the ad surveillance but um you know for a while they're keeping it separate really does work because you bought it for its value it's complimentary and you're not messing with it with net scape when they bought a bunch of companies they had some of the first floor people or the founders burned out they had newcomers who wanted their turn to do the browser and they hadn't really done browsers or understood them and so net scape 4 was originally supposed to be 3 and it was so light they renumbered it when we did a 3 released jamey and a few others put some extra effort into secure mind was supported in the mail built in mail program and net scape 4 was late and it was only on windows at first and microsoft had really started doing better like they do they copy in the first versions trash in the second one you're starting to feel threatened the third one you can tell what's going to happen and the fourth one's good and plus there's the benefit like you said that it comes as a default browser yes and and yet net scape screwing it up and microsoft really putting some quality people on it i4 was good on windows it was good and they did dynamic html innovations the scott isix my old buddy former accountant who programed in basic and became what microsoft calls a program manager which is kind of an elevated position it's you can be a programmer or an engineer trap but you switch to it and you sort of lead a lot of design and standards efforts and so scott isick put in a lot of those funky dhdml APIs that didn't quite have the same flavor as the stuff that i did and neither them was like the later sort of verbose java like tom w3c standardized but i4 was pretty darn good we i remember a friend scott firm and i got invited by scott isix to gordon birschen sannose they were doing a preview of i4 this must have been 1997 and scott said yeah we've got here there's the new graphic stuff we're doing we've got something like your net scape layers we've got vml vector markup language you know we can do like virtual reality and scott and i looked at each other and said we're doomed right and microsoft was starting to fire in all cylinders so i have to get an credit for that even though they abused their market power and maybe it you know i shouldn't get them credit for having the resources to hire talented people but they did a credible job on i4 what really was bad was that face of the browser wars ended with monopoly and perhaps due to the antitrust case perhaps due to regulation europe perhaps just due to microsoft not liking dealing with standardization they they let it rot they just abandoned it i5 5 5 i6 later but these were not well maintained they had a lot of security bugs browser really closed and outdated to even those getting updated it's just weird browser like mosoa and then five bucks were adding tabs opera had a version of tabs and they didn't add tabs and they pop up blocking something i should have done from the start people realized that you can tell when the user clicks something and it goes in javascript to open a little window that you can sort of inspect the stack and see that the click originated that and it's probably okay whereas if you're just loading a script and it opens a new window that's a spam technique and you should block it tabs were brilliant innovation like you said opera had it but like i remember i fully switched to firefox the moment it was i remember like the moments of first using tabs of firefox and like not liking it like for the first few minutes and then like wait a minute you get the groove yeah you get the groove and you understand i mean so that timing what year was this uh so because uh also as a aspiring web designer i used table so we didn't mention layout or css much there's also a change in the way like the frames were going away yeah so there's a change in the way websites looked and behaved and all that kind of stuff css finally which microsoft embraced with i4 and that's capable they really did right css became a better standard over time for doing table layout that relieved you of the need to use what it called spacer gifts spacer gifts right images yeah you would throw into space up tables um you know the the typographic power of the web has gotten better but it's still not on the level of pdf and you can't do advanced typography but um it's gotten really better and even then tables were getting better if you were using firefox that would have been 2004 because it was called firebird until really that you five no yeah i think uh it wasn't well i don't remember it was a firebird which had tabs uh we had tabs the whole way so it's five or it was the last browser it became in 2002 became phoenix there's a bias that has an embedded version of i e and they said we're called phoenix technologies you can't use phoenix and so we said okay we'll call it firebird and then this Australian centered open source database project started really like in the true mad maxed out just screaming at us saying you can't use firebird and i had to sort of be the ambassador and say okay we're gonna rename and i don't believe the aviation they used it we hate you and then we renamed it to firefox and i'm like oh if we love and then i don't haven't heard of them ever since but firefox was a clever name we had to think of something distinctive we wanted to keep the fire going and it turns out there's a red panda right some nickname for so that's the second set of browser wars so well how did you well how was the firefox born how's mazilla born is there a there's a long story there too so netscape got acquired by a well which as i say was a reasonable happy ending for a lot of people because netscape otherwise was going to go out of business because microcell was just killing its market there was no way to charge for browser windows came with i.e. i4 was pretty good and netscape 4 wasn't that good it took a while to get better but the netscape executive said let's do an open source escape pod you know and like in star wars and new hope the gunner won't shoot it because there's no life forms on board right it's not a threat and so we did mozilla in 1998 and it looked like it was going to you know initially just give the world an open source browser but it's really hard to get people to work on this sort of hairball it had been hacked up over by that point four years it also couldn't have the crypto module for secure sockets so called or now transport layer security that was an electronic munition we were not allowed to release that in the full on 101024 bit key strength and yet people one of whom i happened to meet previously at sji when i went on a sales support engineering trip tim Hudson in Brisbane Australia and Eric a young did what became open ssl it was called ssl ea y after erics initials and tim and Eric took their open ssl outside of the purview of the nsa and the department of commerce and they stuck it into mozilla's code and it was perhaps the best hack that was done in the first few months after we open sourced the browser we had other problems the politics inside net escape were driven by these acquisitions so the one acquisition that kind of messed up net escape for also wanted to keep doing a proprietary male and group where program not jamey zewinski's male program that was in net escape two and three and they held it back for open source we didn't have a male program which just a browser we didn't know what a well will do to us turns out they didn't interfere with us for a long time but net escape wasn't the best steward of mozilla we were operating mozilla as a pirate ship without illegal entities so most of us worked for net escape under a separate organization and initially the first engineering manager tom peckwin of net escape was the mozilla founding manager but he he left pretty quickly and he left me as the acting manager which is more like method acting in my case and and I did that was my first management stint but then someone who'd written the licenses Mitchell Baker she was a lawyer in net escape she was involved in the open source license decision making and national writing and construction of those licenses that was Mitchell's job net escape public license and the truly open mozilla public license and there were two because net escape needed because of some encumbered code needed some special rights but that went away over time Mitchell was always interested in mozilla and she came back from attorney leave and she said I'll be the manager if you want and and Jamie and I said sure and then Jamie quit he quit after a year he said this didn't work I'm sorry you know he acted like it was a total failure because mozilla didn't restart the browser market but there's no way it could have right net escape was still shipping variants of net escape for which was based on the old code mozilla was trying to react to code to make greenfield for developers so it was one of my big goals it wasn't a technical goal so much as again a social goal people wanted a more standard space browser they wanted a less of a hairball that had been hacked on by x grad students starting four years prior so we said we're going to make a modular code base we're going to use a variant or an open source version of Microsoft's component logic model has reference counting and standardized vtable virtual calls and c++ and we're going to use java script we're going to have a bridge between those two so you can script those components just like Java components we're going to make a portable front end with a markup language for the user interface not tables not HTML but custom you know menus and dropdowns and toolbars and and that was called zool XML user interface language and some real talent on the net escape side delivered that Dave Hyatt who was instrumental in zool crisp water son joe hewitt Blake Ross and Blake was an intern he was like a high school aged intern in that and at some point we were innovating rapidly in the mozilla world and net escape was still caught up in this management mess from these acquisitions and it wasn't delivering and every year they were wondering if a level is going to come and start be heading the executive because they didn't do anything useful and there was a thought you should take the net escape browser engine and put it in the windows a well client which was the dial up client that all the increasingly aging users of a well we're using never happened it would have been too big a change so it wasn't clear why a lot of botnetscape but a sustainability left alone but net escape didn't leave mozilla alone and so in 2001 Mitchell called me up and said I'm no longer employed and I was like what you quit no no this wasn't my choice and there was a layoff which maybe accidentally or on purpose got rid of Mitchell but the funny thing was we had an open source project we had a lot of the engineers on staff on our side and we had people we'd hired through the muslim community who were top notch they'd risen you know they came in high quality didn't do the code and they actually were better than the average or median hire of net escape and so the funny thing was the executive who thought they'd gotten rid of Mitchell and layoff on the next week's community call around mozilla and what to do there's Mitchell and so this show you can kind of transcend your you know boundaries of corporate open source if you get a project that has enough loyalty even among the paid staff because we had outside people contributing with people at red hat and if you're the places but the majority of the hackers were employed by net escape but a lot of them at that point had had come from the community and others got the community and wanted to work with it and it was really the weakest engineers in net escape who didn't like mozilla and didn't like the crucible competing with the the better programmers so the project is good enough it will rise definitively rise out of the that's exactly right and so we had this this mozilla code base that was getting better in fact it was I think at some point in 2002 when we declared mozilla 1.0 I engineer road map that successively through similar sort of six week five week releases like we all do with browser releases nowadays chrome does and Firefox braves us three weeks we we got to a point where we said you know what it doesn't suck this is like the 1.0 that you want to release because if you hold it back any longer to polish it you're denying other its the ability to use it's like pro engineer the mechanical CAD tool embedded the code they embedded the the layout engine and mozilla 1.0 was like a net escape communication suite we did that point gotten male people to reintegrate male news and we had an editor or phrase to male and it felt like a 90s suite suite where and it felt kind of bloated and the people who were taking that mozilla open source and then adding net escape flavor to it we're not calling the shots right and they were also under a little bit and that they said we should probably put the a all instant messenger checklist on the toolbar we should put the icq you know the other messages in the a all acquired we should put the icq you know button on the toolbar and pretty soon net escape look like a bit of a NASCAR badge to version of mozilla and that also made mozilla more popular and and yet they they had you know contrived to fire or lay off the leader and and and we carried on with an open source structure where mozilla was still you know Mitchell was calling sort of management or project level shots and I was calling technical shots and we we had a popular suite but we thought why not make it just a browser because it'll be simpler it'll do one job well and even then we can strip it down by having extensions so Dave Hyatt and Blake Ross the high school aged intern did the first version which was called Mozilla slash browser it was very the group from all group of us Ian Hicks and asa thoughtsler me Joe hewitt and Hyatt and Blake and and they and Hyatt was really the senior hacker he'd done all these things like amazing cross platform menus through the user interfaces market language and he knew how to do tab browsing he'd implemented it natively on macOS of the time in Camino originally called Camera he'd he'd written multiple rotations which was a thing program where should do it's like the V8 team did for those missing years when the rest of the chrome teams like wars V8 if that Dave's wife Rebecca told me a story about when they were at UIC they were also universal Illinois grad students there was an assignment it was a programming assignment it feels to do it in the semester and Dave's friend was this I'm going to go think and I'm going to design and I'm going to make this you know platonic perfect form of the program and then I'm going to write it at the end when it's due and hi I just went in and started hacking he wrote one version you wrote a second version a third version and the semester comes around the friends not too too well it wasn't perfect and it wasn't written I'm not sure how that story ended but for him but Dave's version was the fifth iteration was great and so he'd done that with everything you need in a tab browser and this really showed well in Phoenix what we called Phoenix and had to rename two more times and you know Blake went to Stanford he became a Stanford student and couldn't work on it Dave Hyatt went to Apple 2001 he was one of the founding Safari team members interesting wow but he was still vlogging about tab browsing I think Apple at some point said you should have tab browsing yeah but it was because of Hyatt yeah Hyatt was quite a feather in their cap the Don Melton who had been the engineering manager at for Safari from the beginning had been in that table also and so this is the diaspora of talent and and yet Hyatt was still kind of writing blog post about how to do tabs right and at some point Apple said don't don't vlog about that that's our proprietary tab technology you know it's like no it's not it was an opera and I've refined it um so we had to replace people and we had Ben Goodger uh New Zealander we tired it in that scale I mean he stepped in to be the Firefox lead and we also had this weird circumstance where AOL finally did notice that net cables kind of a albatross that they bought it for no particular benefit and even then the AOL politics were also heinous sort of East Coast politics I remember taking two trips there because I was a principal engineer and so as principal engineers got trotted out to do dog and pony shows in Dallas Virginia and the the AOL for management was very East Coast in flavor and they were at that time merging with time order which did not go well so one of these years we went out there and we were all doing dog and pony shows and there were these characters it was sort of like marketing guys one of the most wearing a cravat and they were almost named Reggie and they were they were they were they were very um you rather than non you or they were like what's what's domine's metropolitan film UHB urban oh Bush we Bush was the um they were oh Bush was they were um funny and they were kind of useless and kind of preppy and then the next year we went back and I said where's Reggie and it's like oh Reggie's not here anymore because time order realized that the merger wasn't in their interest either and then the sort of knives came out and this was these these mergers really work right this is very difficult you get these giant companies and they think there's gonna be synergy that was the 90s late 90s watchward and there wasn't synergy with AOL buying that's came and there wasn't synergy with time order AOL but did AOL ever really work was it ever really cool like the same kind of fire and excitement that uh fire fox eventually created was that ever there and AOL the AOL was the right time to do a dial up service that got distribution by basically leaflet bombing compact discs on the country and they beat out CompuServe and the other ones prodigy and then the web happened and so you had almost like this um isolated continent like some of the evolutionary biologists I follow make fun of the the funny large mammal you know uh marsupial mammals of australia how how silly they are and so AOL is like australia and and and you saw it over time because they kept aging and they were using AOL to get online and they couldn't really use a web browser and it became sort of a a valued cohort because they still have relatively high socioeconomic status and they have grandchildren but it's going away it's dying at some point towards the end of the odds the that decade and then to the decade uh 2010 plus that fire fox became this incredible I don't I think I'm on chrome came out but 2008 some time 2008 but fire fox was the sexy cool thing that represented a lot of the cutting edge technologies and all that kind of stuff harder to it was amazing cameo rally and jumpethel did the first web two conference which eventually became huge and they split it but that was in 2004 right when fire fox was out craigslist was it was huge it was killing classified revenue for newspapers but um there was just this ferment people starting with the media along there some of the gmail was already done and it was an impressive webmail there were others before like hotmail but gmail is really impressive from google and google maps people started seeing what could be done they thought how can you drag the map around and you know how's that work and it was all javascript and images and the gmail was 2003 for yeah i can actually started quite early it might have been 2002 or 3 but by the time we started dealing with google and firefox to get the search deal which was the main revenue search from usola and still is um 2004 early surge brins one of his trusted engineer guys fritz Snyder made contact with me at musula and we started talking and we realized search and browser need each other and this is deeply true right this is still true this is why a lot of the search engines had their own browsers yeah so in case people don't know the the main revenue source for the browser is the default search engine which is kind of incredible to think about that that that is a revenue source it's a little bit sad yeah it leads to this capture or kill effect where you have the search engine own its own browser and other browsers may struggle to just get this distribution we talked about earlier so where and you said uh you've figured out that uh google is working on its own browser at some point yeah 2006 yeah 2006 so would you say Firefox versus was in our explorer part of the war here or was the Firefox versus Chrome so Firefox didn't quite cause Microsoft to reconvene i.e they did do i.e 7 and i remember being on a plane back from the standards meeting javascript standards meeting from Seattle from redmond and there was some Microsoft guy in front of me it turns out my wife knew him from her past life before we married and he was just this bearded big guy and he was like we should have just killed Firefox in the cradle all we needed to do was add pop up blocking in and tabs and we could have made it in your next world kill Firefox and it's like should I cut a wood a pal and I was right behind him over hearing this um but they didn't they were slow and they i.e 7 wasn't that great and or really got them started I think was um Chrome and you know I talked to Larry Page in 2005 I think I said you know we're talking about the Firefox relationship but he was also saying what about webkit this was Apple's version of the old cage dml engine from from linux in the kd east side of linux um those used in the conqueror browser also with k's that apple had forked and and it 2005 was when apples principles including Dave Hyatt matcha stikoviex and my friends here so they are said we we must stop patch bombing this poor kd kdml project we should make a proper muzzle like organization webkit.org now it wasn't a separate nonprofit or anything it was still Apple it was Apple controlled but they made their fork first class and they made it be something that they all worked in and lived in and that was before chrome and then chrome Larry Page said what about webkit I said yeah it's nice I have friends who work on it you might use that if you do your own browser why don't you do your own browser don't worry about Firefox you should do your own browser you can have your own you know opinion of how it should work and and sure enough they did so by 2006 we knew they've been working on it some of the some of my friends who'd been at Netscape did the original demo and the demo wasn't what you thought it didn't have the fast JavaScript yet that was still often Denmark in the form um it had tabs because all browsers had tabs at this point and it had this software fault isolation I mentioned it was through process isolation so in theory each tab has some operating system process and so the what's going to take your tab down well webkit has bugs that can crash it but flash was still big then all the restaurant sites remember and flash crashed a lot so the demo that I heard about my friends X Netscape X Netscape was all people did inside Google was the sad tab they showed an early version of chrome which is this is bare bones tab browser they loaded a site with a known flash bone and then suddenly flash crashes and everyone expected the whole browser to go down but instead you got this little sad face on the tab and you could reload it and there it is again so this was this was an improvement it was a real move for security it was based on you know a company that quite called green border that had some really big brains like Ulfar Erlingson I think was involved and they had done some exotic security stuff but they ended up simplifying it to this process isolation and um it was good and Firefox didn't have it at the time so we were still struggling with you know security bugs um so we knew chrome was coming but it took two more years to come out and at the time we were still getting you know the Google search revenue we were still um making Google the default engine and Firefox was still growing Firefox grew I think until 2011 that was when it peaked and as it started falling it was because of chrome chrome came out in 2008 and it was at a comic book that leaked accidentally that showed some of the people who worked on it large block was in there and so on it was kind of soft launch because they didn't market it heavily they didn't push distribution but Google had reason to worry about distribution because Microsoft was you know doing a search engine bings since 2007 in fact when they came out with bing Google was worried that Microsoft would just brute force switch the default browser and everyone's unit explorer or even Firefox yes to bing from Google and uh Microsoft wasn't I think ready to dare the antitrust cops that way even though they gone to sleep and uh I don't think bing was ready either but in just the case it happened sundar pichai who rose very well based on this work was sort of uh in charge of getting distribution deals and he got Google toolbar and Google desktop search distribution and remember those pieces of software those were like desktop extensions toolbars or operating system extensions for doing desktop search or senior local files kind of like that's right macOS spotlight sadly died out of all died and there were some features that we still missed that didn't make him into chrome but sundar got oem to bundle those and then he got enough of those deals that by 2007 or eight Google felt well if bing Microsoft does the worst and tries to force bing we can reach in and reset it with that for the presence so that was you know good for sundar's career and it was good for google but it never came to pass that they had to defend Microsoft was still you know slow and by the time they saw chrome come out then they did what would have been iE9 and then they said we're gonna have a fast JavaScript engine to chakra chakra core and they get okay they were another process isolated fast JavaScript browser tab browser so it sounds like there's a deep fundamental coupling of search engine and browser that's mixing this whole thing up and obviously Firefox doesn't have a search engine that's like i mean you're you're partnering with what was somebody with the search engine yeah with with Yahoo or with uh yeah uh with google or so on they tried Yahoo that was unfortunate because i think even though merissa mayor talked about it she never pulled it off and never restored the search uh team that had been laid off i believe Carol Bartz was running Yahoo and Carol said i've got to get rid of one of three expensive things i'm gonna get rid of search and um those researchers went to google and Microsoft and there was no way to put Yahoo search back together so when Firefox tried switching all their users who'd stuck with a default from Google Yahoo like mid-december 2014 but users said what just happened to my fire box and others didn't notice right away but over time they did and so over the next year the the traffic just went away for Yahoo and and yet they were obliged i understand it i i don't have inside knowledge but this is leaked out and Danny Sullivan's written about it search engine land i think the deal was like fixed payments to mazola some mazola was getting a bunch of money for traffic that wasn't staying because users were resetting their default and this shows how defaults are important but they have to be good enough that the user doesn't override them and you know a lot commercial value in popular apps is what about default settings what is the default search yeah but oftentimes there's something just like you said i mean if there's something compelling that's also can beat out the default like tab browser and so on yes and that's where i mean talk about brave browser it feels like now we're in this third stage where there's a chrome firefox edge i guess it's called and brave and these all seem like really exciting i don't know innovative browsers they're all kind of copying off of each other picking up the good stuff there's evolution again especially on tracking protection so privacy is this sort of global wave that's rising i like to call it a wave because it's a large somewhat chaotic structure it's not a unitary good you can't say i'm buying privacy for you know three dollars i'm paying three dollars for privacy some people think of VPN does this and or disappoint it when it fails them but often people use VPNs for region unlocking video or getting the s-net please careful exactly but privacy is not a unitary good it's complex and people are understanding it only over time and as they get burned but there's a genie that's not going back in the bottle there people are fed up apple has responded to this apple was always making safari i think more of a privacy branded browser from the very beginning i think there's a probably Steve jobs safari had private windows private tabs before firefox did and these are only private in the sense that they don't leave local traces if you don't want them to turns out safari does keep them around between shutdown but the canonical model is no local traces after you close the private window no you know leftover traces that you went to you know some site that were embarrassed by or bought a gift for somebody you wanted to keep secret but there's still some level of tracking there's network tracking there's network privacy is not guaranteed at all because you're using the same internet and isp as a public window a non private window but sorry had that early on they also have a cookie blocking policy that might take a little explaining when you if you know what a cookie is it's a little bit of storage in the browser indexed by the name of the site and it's really only the main name of the site like bf a dot com or you know something like npr dot org every site can store some information a cookie every time it's contacted by the browser the previous version is sent back and in response from the server the cookies updated so it's this little bit of storage in the browser that the site can keep updating and it can store an encrypted version of your login credentials with a timestamp so you can stay logged in without having to retype your password every time you navigate which is how it would be if you didn't have cookies the web protocols especially in the 90s are so called stateless protocols so go to your bank you log in you go from your login confirmed page to your account view you didn't have a cookie you'd be logging in again every time you type in so so that was a great thing about cookies lumensually did it in a hurry in 1994 before I joined that escape and he did it for really holding that kind of credential but even then there was the image element embedded in the page and the image gets fetched possibly from a different server and that request carries the last cookie which could be empty at first and the response carries the updated cookie so just by having images and cookies you're tracking because that image server can be serving a little one by one pixel and they still use the word pixel and add tech and that pixel can be served from the same server embedded differently with different URL spellings in the New York Times and ESPN and as you go from one to the other the image server can say I haven't got a cookie for you it's empty initially I'm going to assign you user number one two three four I'm going to put a database entry in and I see by the way I was fetched the name of the path part of the URL that I was in the New York Times so you're a New York Times reader and then you hit ESPN same thing and the database gets updated and the number user one two three four indexes in the database to a profile of you you've been tracked this was not intended and it was too late to undo by the time I got the net escape I think we wanted to do Twinkie he's he called them in he was trying to solve several problems he wanted them to be bigger because initially cookies had a short size limit I think he wanted to solve the third probably problem but Tom Pake when the engineering managed that nope no Twinkies just cookies were done you done son and that's how a lot of that stuff was that's how JavaScript you know got frozen like a flying amber in some ways with that sloppy equality operator that I made because early adopters and the cookie got stuck with this tracking hazard and then because JavaScript can be like images they're embedded in the page by the time a net escape three I made that work you can get a request with the last cookie value and the response updates it that's a tracking mechanism that's why you don't even need images to track now you just use scripts yeah so this whole tracking economy evolved and it it it depended on these accidents of the 90s these unintended consequences well it created some of the richest companies in the world right means the social media all I got was t-shirts all I got is this crappy t-shirt yeah I mean uh so that's that's the fundamental problem the world is facing now they're looking at what social media has created and they're looking at and like a world we're looking at self in the mirror and seeing that privacy is actually something I suppose like a nice thing to have it's something that is actually should be fundamental to the way we interact with the world as part of our tooling and that's where the brave browser comes in and I suppose others as well applying this idea of a brave is at the forefront of that so maybe can you like describe what brave is yes and what are its key principles and uh what's broken what is it brave trying to fix so when I realized that these accidents like the third party cookie the image or script that's tracking you or the um this java scripts that can do it invisibly now that all this stuff wasn't intended and that Firefox had supported extensions that blocked some of these things I thought probably we should have browsers just block some of these things by default these were non-tended and they're now unsafe they're tracking you there could be data breaches the malware distribution um you know bullying and siops and other attacks on people um block that stuff block that javascript I'm doctor Frankenstein I'm about to do the monster here but obviously you go to Gmail there's so much a script there to make that amazing web client that's okay that's first party javascript so how do you tell the first from the third party and it's not easy it's not a matter of just what's embedded from a different server because a lot of publishers use benign scripts from unrelated domains or apparently unrelated domains so you end up having to develop a sort of human and machine learning practice around blocking and at brave we did that from the start and built a research team to help drive it and automate it we realized that protecting people needed machine learning and around 2017 spring I talked to my friends at apple about this too and they were also doing what they call intelligent tracking prevention which uses local machine learning in the browser and the funny thing is we you know great great minds and go like they were taking their third party cookie blocker that was inspired from the old days and making it not have a big loophole because what they did was in 2003 when sorry came out they said we're going to block cookies that are from those third party embedded elements where you've never visited that site before so I'm going to pick an ad company that got sold to AT&T so I'm not picking on anybody on fairly appnexus.com if you ever been to appnexus.com no I've never been there but I guarantee you 10 years ago you probably had if you were using Firefox you had a cookie third party cookie because you're being tracked by them and they were using that cookie to build up a profile of you in safari as long as the user never went to appnexus that cookie would not be set and that was a real move for privacy early on when joseph was still around in safari but it had this loophole that if you do go to appnexus then why it's okay to be a third party cookie and so appnexus did something very naughty they took their ad partners to put the actual ad you click on and they said hey add a little script so that when somebody clicks on the ad before it goes to your landing page redirect to appnexus and we'll redirect the landing page and by doing that I said a first party cookie and they got white listed so as a loophole they exploited intelligent tracking prevention safari was sophisticated enough to counteract this and it did other things and it's evolved since they did it and we've evolved brave too and so when I say machine and human learning there's a real set of techniques here they have to fight fascinating problem things are printing right anytime you have a little bit of storage in the browser associated with a website if the bad guy can get 32 websites each one has a bit of storage that's 32 bits you can turn a bit on or off can make four billion numbers you can make an identifier it's called a super cookie sometimes it's a they're a weaker ways that are statistical they're called fingerprinting you have to block all of them and you have to not only automate you want to work in the web standards body to put privacy in by default by design from the get go not added as an afterthought or you know go hoggoyle with new web APIs add a bunch more local storage or fingerprint surface area and that's been a struggle too because guess who's the new Microsoft and the standards body it's Google and they're not in favor of privacy first they they want to do privacy their way only under I would say market pressure but with Apple and with brave leading the way we we block through party cookies almost without exception so we just blocked them and that gives us a very strong privacy benefit but it also means some sites just don't work right embedded YouTube videos might not work right so we're adapting in a similar way to apples done with it to make third party cookies blocked but to sort of simulate what looks like a working third party cookie for the site it essentially tries to I partition each site and it's third parties into its own sort of kind of jar got it and so and like you said is this both like a human fine tuning issue and a machine learning problem so that's you as a humans learn then they train the machine learning but you know maybe Google site or including Google there's millions of dollars if not be billions of dollars to be made from fighting the ways of brave that's right and it's been interesting change from when we started 2015 we started you know ablocking extensions ablock plus was one of the big ones that started firefox in 2006 I believe had gotten to a certain level of use around the world and browsers like UC web UC browser in Asia had some amount of ablocking built in an on by default so a page fair was a startup and they measured ablocking adoption and they tried to say hey publishers your you know 30% of the visitors to pitch fork or wire to kind of NAS properties are using ablockers if we can somehow convince them to lower their ablocking for your site that could be like a 43% lift right and you three sevenths well that's easier seven done and page fair and others source point many others tried to either smuggle ads through or control the user into letting you know ads appear and it didn't really work and meanwhile the ablocking adoption just continued intelligent tracking prevention safari in 2017 brave from 2016 on with very strong cookie blocking and other protections and this this is not going away the publishers used to rage against it like we would try to say we can help you you're dealing with users who are already blocking all your ads we can try to put back some economics that helped the user and you that led to the basic attention token that we started with Bitcoin we can be your friend don't don't just fingerprint us as an ablocker and treat us as an enemy but in in 2015 or 16 it was like no your ablocker get out of here I hate you and by 2017 or 18 it's like something's happening the ablocking is not stopping and we're all getting sort of pulled on the Google's plantation through AMP AMP or you know we're getting killed by the Google ad system we use because it's taking all the revenue or you know it's permitting or some other offenders we use are committing ad fraud and so a fake New York Times is getting paid by the marketer running an ad that a bot clicks on and the real New York Times it's supposed to get that it doesn't get it and there's something really broken about that kind of system and that that fraud is mediated through Google's ad exchange which is the biggest of them all and Google takes a fee there's a flip side of that which is malware distribution malvertising where fake advertisers put malware payloads in or low exploit get loaders in JavaScript and they smuggle them in ads on to real publisher pages the ad exchange takes the fee now I'm not a log I'm not going to say this is a rico predicate but why is the ad exchange facilitating fraud and malware distribution and taking a fee it's not right as opposed to just fighting this is the really interesting thing about brave is as opposed to just fighting in and being treated like an ad you're providing an alternate there's a there's a philosophical idea here that might change the nature of the internet with the basic attention token yes be it well maybe what is basic attention token BAT and how does it work okay I'll tell the story first by saying how I came to it I realized for a long time at Firefox we were dependent on the school search deal and I thought you know now the crumbs out maybe that's going to go away and they just what at some point Google will say you know Firefox you know like old Yeller you saved me from the rabbit beast now you have to shoot you in the head yeah done your job sad but true goodbye and what can we do and I think this most of it doesn't know what to do this is something that I couldn't solve there and I don't think they can solve but I thought why is the browser the sort of passive servant of these big tech companies why is it a blind runtime for ad tech JavaScript including from Google why doesn't it block some and if it blocks some why can't it reconnect users readers fans with publishers creators websites why can't it help people make direct payments or even possibly get an ad revenue share for private ads that are placed in the browser the ads are all placed in the browser some people have this sort of model that the server is painting the ad into some you know flash combined package or into some giant image and then it all gets sent down that's not how it works all the ads you see on the web are placed in your browser by calling out to various ad tech foreigners and Google's among them and and so if you block those scripts you you break the the advertising flow of money from the brands and their agencies to the publishers and if you want to reconnect it directly with the user you have limited choices the user generally isn't going to sign up with a a ch bank connection or credit card the the publisher isn't going to sign up the user except as a subscriber and then they're going to overcharge you because they want you to cross ups that is all the content by more than you read and all that stuff and how many you know on people are doing great who are big names like New York Times and Washington Post but how many subscriptions are you as a user going to pay for this is why startups like Tony Hale scroll are trying to do a portable subscription system but by the way just done a small tangent there even then you're at times really annoying how difficult that is to subscribe there's way to any clicks they don't make it easy and I had friends for years ago I think they fixed this who would pay for the paper and then they'd go online and they get upcharged for the digital and they there was no break there was no connection between them yeah um but publishers are not that technical and they're they can't all get you to subscribe you can't have a thousand subscriptions so for a long time people talked about micro payments there was Blendall and other ones which came to the US but didn't grow and I thought if you have just a browser and it's protecting you by blocking all this ad tech tracking junk it can provide you an option that uses crypto currency let you support your your your favorite sites and even YouTube channels and that way prototype with Bitcoin and that meant the user had to be of means to contribute and willing to contribute but it could be done on the Bitcoin blockchain and it could be fairly efficient even though Bitcoin went through a period when we had this prototype running in 2016 into 2017 where Bitcoin was very congested and very slow to confirm and the fees got very high and a lot of users who were not Bitcoin maximalist or even experienced we helped them out by embedding a coin-based buy widget and they had the income to buy but it was hard it was like I'll do I buy five dollars a month but the fee is like 450 I better buy in larger batches right then they're like I don't want to own that much Bitcoin so it became this this painful thing and the real idea that I had of private ads that pay the user a rev share couldn't be realized alone in that kind of system in these crypto currency systems especially with the blockchain we switched to Ethereum you can have smart contracts the Bitcoin system is not turn complete so what you can do with the script is more limited but you can still do sort of clever things even with Bitcoin script what we wanted to do was sort of a three sided ecosystem we wanted users creators or publishers and advertisers and we wanted the advertisers to put money in just like they do today but without going through the Googles and the app nexus and all these other attack companies because those companies take out a huge cut the Guardian in the UK once did an experiment for a month they bought out their own ads base they put in the pound and they were paid 30 pence 70 percent was coming out to the intermediary vendors they were using and that's like the opposite of what the app store does the app store takes 30 percent gives the publisher 70 percent so pretty broken in the old days of the superstation TBS the media owner would get 85 percent so these splits have become really unbalanced in the middle players the the ad tech vendors are taking out way too much money and they're they're doing something worse which has been noticed they're they're letting not just the malware vendors but also the ad fraud side which fakes the publishers and clickbait merchants come in and steal traffic from good sites because once you have a certain audience identified at one site Jason Calcon has told me this about his experience with I guess it was in gadget I think right what site he was running but once he started using an ad partner that was sharing his audience information across multiple sites he saw his competitors stealing all his traffic and then what's worse is the clickbait sites that just have much cheaper rates steal all that traffic and that facilitates you know fraud if it still dates fake news all sorts of problems so great blocks it and then we give users the ability to give back and because we invented the basic attention token in Ethereum we can do this three-way split and we can give users a share of the revenue and if they want to take it out they can now unfortunately for us and for all blockchain the regulators are saying we're going to have to know who you are there's there's the Treasury Department's FinSEN agency there's the Office of Foreign Assets Controls OFAC there's the you know other regulators in the federal government that take a very dark look at things like money laundering and sending money to someone named Osama bin Laden so compliance starts to come in and even now they're threatening for pure bitcoin sending to some address if you're a coinbase you're going to have to know who's that that address you're going to make the actual identities of people involved yeah now with coinbase members you sign up and they know you and they comply with regulations they're regulated money services business and but if somebody's using their own self-custodal or they have the hardware private key and they're not named and they want to send to that address our friends in the federal government are talking about requiring at some threshold knowing who that is so some threshold that's unreasonable it's not that big yeah yeah I don't know how to still play out I think crypto is here to stay I think the beauty of being able to send pure to pure without any bank in the middle of any you know huge wire charge and two-day delay and all that nonsense it's beautiful and I've used it and I love it but we're pragmatist to brave about crypto and we realized that anything like a revenue split we can't facilitate without being licensed in a certain way and it requires knowing who the user is so our default mode doesn't know who the user is it instead imputes to the user's browser some of the revenue and allows that browser to steer it back to the creators and we do have to identify the creators but as things improve and you know who knows how it'll play out there should become a day when this this full vision can be done more fully on a blockchain but regulations and the practicalities of today's blockchain which are not that fast and not anonymous over time you fingerprint yourself over time we do some of this with the browser so one of the ideas of the basic attention token is to make a hybrid system that's stronger than blockchain alone it's the browser and the blockchain and the browser is this trusted endpoints software it's this universal app everyone uses browsers the bigger the screen the more you're in the browser and the less you install you know fat clients for things i use slack on on macOS and it's it's like a browser it's based on an electron framework we use in the user and it's just it's not that great i some of the people at brave use slack in brave as a in the browser yeah i use that often yeah and i noticed on the ipad i use apps less the smaller the screen you know browser got handicapped by apple and android both and it also you know can be slower or not have the right you know affordances the interface with the security limited api's but in principle with the right permissioning you can make the web browser just as goes any app you make it be a super app and that's part of our mission at brave so we want to have the economics that got captured by these big tech companies through tracking and through social networks we want to block that for your own safety and then let you opt into a cleaner world where you keep your data defended in your browser and you can actually realize value from it so the way our ad system works i mentioned it being private but how does that work we don't see your data at all all browsers are sort of the mother of all data feeds your history all your searches at all engines each engine sees the queries you send to it but it doesn't see the others but the browser sees them all machine learning in the browser that you can opt into can study all that in a very complete way and do a better job than google does google has you know cookie and scripts across the web from a carding double click they have youtube they have android they have search which is still their big revenue lay but they don't see everything the browser sees everything and if it can do a good job locally and this is not advanced machine learning this is not TensorFlow this is like SVM's now naive bays then you can match intense signals intense signals from those data fees searches the queries the history how much you're scrolling down the page how much you redid a search it's all blind browser algorithm we don't see that data and then pick the best ad from a fixed catalog per day and the catalog is fixed across a large population per day and it only updates the day once a day because new offers come in and old ones inspire sometimes every week or every month and that catalog and there can be many such catalogs is sold by our direct sales team and so we're we're making anonymous audience available to advertisers without the advertisers tracking them instead each browser is a little machine learning system that's picking the best catalog entry now the catalog is not the ads those are big right is a video or web page it's just the link to an edge cache and there many such edge caches we're not trying to protect them from seeing your IP address it's not really feasible we could use tour but we don't yet and some keywords about the ads so it's basically like metadata and a link and that's what the catalog consists of and that's what the machine learning and the machine learning is learning about the use specifically locally in order to choose from the catalog of different ads couldn't this possibly be like a multi billion dollar isn't this taken on the Google ad ad be so like what I mean one question to ask that there seems to be some really profound ideas here that are different than what the internet has grown up to be if brave or something like brave the idea is the fundamental philosophical ideas underlying brave win out and runs 95% of the internet how does that change the what what are the major things these changes about the internet so social networks and then the creatives like YouTube creators and all that kind of stuff so let's talk about that first of all if brave gets 95% I'm going to demand a recount because I won't believe it I don't know I think we're trying to put things in the web standards that can be standardized cross browsers so the main value of brave will be the trust users having us and our ability to give the best deal to users so 70% of the gross ad revenue we give to the user and if they go through that KYC process I mentioned they can take it out they can also give it back they can take some out give the rest back they can add basic attention tokens to give back some of them turn off the ads because it's just don't like ads but they put in $20 a month I believe Zuko of ZCASTRAME does that and that's very generous because the browser is just anonymously based on his browsing sort of keeping score on how much time he spent on this video on that website and if those sites verify in sort of a like getting a domain certificate fashion they can get paid they can get a part of his $20 a month so that vision could go big and if it does I hope it's across multiple browsers I don't know that they'll all compete well on the quality of the ads the quality of the ad blocking and tracking those those are subject to competition they'll take a lot of standardize them but I think that would be a better world it would have less counterparty risk fewer fee takers in the middle really just the browser we're taking 30% sort of the app source app store split and if we get bigger maybe we can take even less social networks creators if you look at youtubers a lot of them of the indies that are getting some size are getting sponsorship deals they're using patreon they're encouraging people to subscribe and give them regular money for patreon but that centralize your patreon so there's censorship hazards there's a 5% fee what if that were a web standard what a brave pioneer at first and we took 3% and we did it in a way that was through your browser so we couldn't censor it that's brilliant yeah do you think it could be standardized the cross-brosers can like I enter explore a command again and they protocols are easy to copy and that they're meant to be interoperable so it's there's a risk there and the loyal users might be tricked into leaving you or they might because of that distribution power you might end up getting stomped I don't know I can't predict the future I think anti-trust is back on the case finally in the US and certainly in europe did you comp is doing its thing so I'm hopeful that we'll have a period of innovation you know people were talking like Elizabeth Warren was talking about breaking up the tech tech companies very clearly now she didn't win and I suspect that won't happen but I also suspect that google might be smart enough to see they should do something more than just put privacy perfume on chrome they should maybe get rid of double click or something divest something I don't know it might happen so so brave my inspire google to completely change the way they're doing things they're already doing something you may have read about called the privacy sandbox or um flock which they've just bird metaphor going um turtle dove um fledge but these these these systems have been very googly kind of over-engineered and yet depending on differential privacy which has weakness over time if you know how that works it's kind of injecting noise to hide you in a in a crowd but over time an adversary can pull you out of the crowd this doesn't look like it's going to become a standard like apple brave mozilla we're not going to just say oh google you saved you've indented the privacy sandbox so well i'll just adopt it not going to be that easy it's going to be more like pieces of what we do in brave the synonymous ad matching or the blind signature cryptography we used to confirm the ad impressions that's David chums and mentioned that could get standardized in fact some of that is being standardized even google's in favor of so-called trust tokens which are chow me and blind blind signature certs but they're not using them for ad confirmations because they don't want to blow up their own business um and they need to let some of the publishers they serve have other ad tech scripts on the page and so they're kind of caught and this is something i realized doing great i thought what's you know google's innovators dilemma apart from just you know get being mature and having trouble innovating it's that they have come to depend on this ad tech system that has all these these vendors that are publishers rely on because publishers aren't technical enough and i feel for the publishers but i realized the users have to come first and if you give the users a better browser that's faster then you'll get enough users to to give back or support publishers the speed and the battery savings and the data plant savings are significant there's so much bad javascript involved in ad tech if you block it and you sort of chop off the what's called the programmatic waterfall which chains a bunch of requests yeah that's one of the incredible things about brave i guess you're saying you should attribute to the fact that the the message javascript no offense no it's not my supposing it's uh it mean brave just feels faster even then i mean chrome was fast the one of the things that it was like impressive it it showed that browsers can be really fast and brave is even faster than that which is a lot so much and it saves the network it's it which means data plant saves battery because of the radio consumes your battery when it's running more to do those requests and it's just stunning how many there are like some of my google friends were like oh that's just that bad side they'll fix it and you actually do a survey of web pages that's mostly like that i know google engineers could make everything super efficient but they can't especially an anti-fresh court do it they cannot take over all the publishers and do that they're trying with accelerated mobile profile AMP they're trying to pull publishers are like oh you poor publishers don't know how to make your pages fast put them on our amp system will give you extra placement in the search carousel that's an anti-trust problem for one but it's also publishers we talk to hate it because it degrades their brand now they look like a gig writer wrote a piece that's got google's framing an AMP URL on top of it and they're trying to fix that too but it just looks like a google's morganifying all these publishers and they don't want to be plugged into the more cube they want to build up their own brand and have loyal readers so you know i'm in favor of giving the users power to help all publishers and this little platoons and the creators and so we talked about patreon what about social networks well they're inherently like search a global algorithm you're trying to find friends of friends you're doing the transitive closure of a graph induced by this friend of relation but you should own your friend relation you should own your posts they shouldn't be owned by somebody else who can take them down or send to them and your friend relations you should be able to find those friends on other networks and it's why I've pleaded about this i haven't built it yet what if the browser could keep track of those for you what if the browser could maybe combine facebook and twitter and you could find your friends on both and you could have a sort of relationship is not owned by facebook or twitter it's owned by you they don't have terms of use and they'll say they own it but if they zap you on one and you're still on the other your friends find you and the browser could preserve a combined view you could resurrect almost across networks is something i want to maybe quickly ask you about on that front there's been quite a lot of centralized we talked about washi bets and then robinhood has been centralized banning of different accounts and removing like parlor for example from a was and this kind of overreach of centralized control is your hope that it's possible to like what he has thought about that in general is it and then is it possible to create tools that give individual people the power to fight back against overreach of such control so we're talking about ologarchy i do think and that if it controls a nation state that's formidable it's the tax and the police power the military power it means that you may have the great far war of china you may have people in china who are jailed because of their tweets right this is a serious threat i can't minimize it or say that we'll win i don't know how it's going to go but i do think like i said earlier about the kind of reason people find ways around things the internet routes around censorship and this is not to endorse any particular bad faction one of the things that happens when you try to wave the free speech flag too much you say i'm not going to censor anything and you get colonized by terrible terrible people i guess i don't care if you called neo nazi some of them could be doing illegal things and uh... you don't want them colonizing because it'll ruin your reputation in the story of business so what you really want is that kind of user first subsidiary that subjectivity i want my social networks to be composited in some multi social user interface where i don't lose track of people across networks and if they leave one or they get banned from when i can find them on another i can still sort of thread them together that's brilliant and and this didn't happen because browser's got captured by the central powers why did they get captured mostly because of search and search is a central algorithm so you know Larry page said this too many years ago he said with search you're giving up a little privacy by handing the query over to us and then we'll error corrected Alan used this used to be a good old and google executive he said oh yeah we used to laugh they'd all be doing typos and they'd be typing the wrong word and we're like no dummy type that query and it's like okay google might want to dial back that ego a little bit but yes you do see all the queries you can improve them and you can find the best results and that was google's forte when we did the Firefox deal in 2004 google was really good and over time you know SEO which is an adversarial game yeah and google itself buying all these companies and crowding its own results page with its own tied in yeah stuff the youtubers slipers up that happens when you when yeah when you have control over these kinds of really important mechanism that's a set of an apple capitalism or cartel cap you get this with the Robin Hoods and the hedge funds you get sort of the money interest take over and kind of abuse their power and wear out their welcome so what how do you get around that you have to have either new land to go to which you know some people's ancestors not mine did to found the country mostly Irish German you have a new virtual space people go to and that requires you know an ISP to or a collo center or amazon to host you it requires domain name registrar who will not strike you and so you want parlor was taken down you know I thought that was egregious parlor I it was not well designed and I I tried it out because I tried all these things yeah but I didn't use it and I also felt they were being unfairly scored for not moderating because you can find tweets to this day that yeah or renders and threaten all sorts of violence whereas twitter wise and twitter being taken down but someone's very selective it was the insiders who have the power are going to take out the new number and it it looked bad sort of like the the hedge funds yeah it's what in game stop looked bad you know you're seeing a piece in time magazine this week that's like basically saying yeah we interfere with the election but it was great aren't we good I don't know if you see this piece yet if you tried to say that as a trump supporter in in November after the election you get banned from twitter but now time in its twitter account is saying you know we saved the day we we it's a flcio and big business the the better business bureau got together and kept trump from you know spreading fake news so the country's kind of broken I don't know how to fix that the oligarchs have run wild in my opinion and big tech is in the antitrust stock what's going to happen I don't think to get out I think some of the DOJ and certainly the state cases because there's separate cases are not going to go away just because somebody got elected differently and these are career prosecutors and they have a strong case and Google smart and Microsoft almost got split up right the judge Thomas Penfield Jackson he overreached he didn't hold a hearing about the remedy he just said I'm going to break you up and Microsoft appealed on the higher level court said go back and figure this out you're not breaking them off you didn't even hold a hearing and when they got back microsoft let's set all let's set all we don't get broken up because Jackson was going to make the ops co the operating system company and the apps co office you know word and excel and that would have been a huge blow to Microsoft so but ultimately at I don't know you I don't know if you're optimistic or cynical about the possibility of breaking up big tech it to me I'm optimistic that tools like brave I love the idea of owning your friendships and like yes users more and more owning the stuff is the only real way unfortunate like the Wall Street bed subred is the only real way to fight the centralized power you can't break them up the regulation is very difficult really on a way for the law right you know it's not capable was long dead or acquired by a well and effectively dead it was only a little bit returned Firefox to the market by the time the USB Microsoft case was finally settled and penalties were put in place and and yet and I trust as a role to play those penalties cost Microsoft to kind of turn away from the way they did windows vista and they thought the web's two paintings what we got punished in court and we got we had to standardize things with those it keeps standards people so they ran back to proprietary lock-in and windows vista flocked it was late was bloated longhorn remember now what Google's most going to say but Google smart enough they won't get split up they'll split something out to get off the hook I think this is a complicated subject but I myself was so I decided to journey out from the world of being a researcher at MIT and potentially doing a start up myself and I've been thinking of you know I wanted to come to Silicon Valley to do so it's the land of the entrepreneur and there's a lot of my friends a lot of them are successfully have been entrepreneurs themselves has said do not come to Silicon Valley it'd be you've you've started you ran amazing teams of engineers you started a lot of successful businesses I wondered if you could comment on why a lot of people are leaving California is there something that could be fixed about California if you were starting a business today would you consider somewhere else like Austin or some other place or is Silicon Valley still is it just a little law everybody's being over dramatic during this particular year of the coronavirus and so on I think you know even Austin's getting overheated I hear yes and I've had relatives and friends moved to Texas within the last few months so Texas holds a big place and you know people are moving to Florida there's a big movement toward Miami Peter Tielkie the poor at least people the mayor has been very business-friendly about it which I think is just good politics um America is fundamentally a commercial republic so you would think this would be what's happening for a long time California was the golden state I came here in late 76 when I was a teenager it's increasing debt to do the lockdowns it's got the highest taxes that's got a matter people do flee taxes it's got uh likely fires every year because of the dead fall it's not global warming it's because the forest weren't managed like they had been in the first part of the 20th century um just I would say corruption at all levels especially up to the governor who you know famously was eating at the French laundry and uh yes claimed the outside it was inside and they were out masks off and it was great uh do what I say not what I do uh rules for the but not for me when it's when you see that in leadership people either run or they they get rid of the leadership so there's a recall drive which is about to reach the threshold or in the old days they get their guns right yeah you don't put up with this junk but ultimately the thing that made Silicon Valley a special place it gave freedom to like young kids entrepreneurs young minds brave minds to think bold to try a different stuff I mean even if the taxes are high so outside of financial stuff outside of all that housing super expensive so yeah so it's hard okay everything about this was narrow and they didn't plan the roads right yeah they got rid of public transportation in LA like the who framed Roger Rabbit cartoon show these go trolley cars Portland too yeah the oil companies in the DOD conspired to build highways and make cars dominant and the rights of way are long gone like Elon's gonna go underground I wish him well yeah that's probably the only way to do it now yeah but is still a place do you think it's possible that Silicon Valley is still a place for magic happens where the next Google's built where the next I mean brave is built where I think all good things come to an end I think the problem is Silicon Valley had strong network effects through Stanford through the angel investor networks and the wealth effect and originally you have to give the federal government credit like the arbonnet was a government project that's not kid ourselves this wasn't wild free market you know libertarian capitalism this was all cold war stuff you had out of the academia you had shockly and then the the traders ate and fair child and intel and but now you know once the last fab that was built in the valley micro unity might have been the last I don't know I haven't followed but we built a fab in Sunnyvale and in micro unity in starting early 90s and now the fabs are overseas and the one thing that I will say the oil garks have intentionally done and both parties is sort of labor and environmental protection law arbitrage by going where the labor is cheaper and the environmental laws aren't a strict and you know that's polluted the hell out of parts of China but it's made things you can make cheaper junk and this this is not this is not a story that's over yet so what is Silicon Valley for now it's for the network effect the the brain trust of who you know the parties the Stanford sort of network that's fragile too over time I'm afraid right Stanford a lot of good professors are like they still filter you know mainly based on socioeconomic status but it's kind of escape school I had a friend hired out of Harvard 20 years ago at Netscape and we talked about Harvard and he said yeah there's still professors great on the curve and I said oh yeah I don't dare any doing that at Stanford any I said oh it was shocking some of the students got seasoned ease and they were crying it's like yes it's right the the precious dears can't take that at Stanford so they get A's and B's now you look at China and people they will about China they true of Russia too that a lot of math science training a lot of engineering a lot of people who are doing their coursework to get the A's and B's so I'm an American I'm born in the fourth of July America really in July yeah wow and America as I say fundamentalist commercial republic you can try to make it something else you can see it's the new Atlantis and mystify it you could you could talk about it in the more I think correct way which is 13 colonies that grew and then there's a lot of local or original design anyway the federal federalist papers talk about this is a lot of subsidiary but that's that's been eroded over time and like I say a lot of the offshoring has hurt so what happened with coronavirus people working from home and at first it was funny because I have friends at Google who used to grumble that not only did they have to come into the office if they joined a different team that was centered at a different office they had to move or you know if if if the VA team was reconstituted in Munich which it was after Lars Bach just got tired of JavaScript that they hired in Munich they hired PhDs in Germany and movement in Munich with coronavirus everyone's working from home and it's like what I really if I can work for Google from home but then the next few dropped and people started asking Mark Zuckerberg hey can I move to my hometown in Midwest yeah and he said okay and they said kind of keep getting myself in Valley pay no we're going to figure out why you're cost living there isn't we're going to adjust your pay accordingly and these colonies and these little mini experiments that all combine to the big giant experiment I have a I don't know I have this vision of America which I country I was born in Russia like I said here and this is truly wonderful country I wasn't born in the fourth of July but people still feel I still and I'm uh red blooded American at this point and I have a sense that we figured it out somehow if Silicon Valley burns another place will come up in this place that we even more innovation and people will move and the remote work might change fundamentally how we work or might not it might just give you the freedom to then create many other small Silicon Valley throughout the place they also included but other places as well and we somehow figure it figured it out and uh I think that's that's true that there will be more mobility and maybe new places that come up I don't know if Silicon Valley has you know passed some sell by date because um it did hurt the the coronavirus hurt the lockdowns hurt in the fact in the sense that part of what keeps things going is social and so a lot of young people even before coronavirus moved to San Francisco it was very strange to watch because in the 80s we all lived in the Valley and it was less populated in San Francisco was grungier it was more like dirty hairy in the 70s but but by the 90s uh and Jamie runs a nightclub there and he's talked about this you had sort of wealthy tech people moving in south of market fancy townhouses being built and uh that's continued in such a point that it's almost like what's the movie by the South African director and else judy foster up in the space colony uh Matt Damon is the guy in the earth who has to go up and anyway it's about the stratification it's about the great inequality the people in the space station have like amazing medical auto docs that can extend their life or save them cure cancer people on earth they're all suffering ground down poverty um and uh you know that sort of happened that why I was here you saw a lot of money it's drive prices up along the narrow peninsula and the single people wanted nightlife so they were in the city and the condos in the city got super expensive and you I know even google friends who are you know socially responsible say we should have more housing built we should have yes in my backyard not not my backyard but that's not happening uh as far as I can tell and from the government to the incumbent you know landowners and renters it's just not happening and that has to drive people away I appreciate that people come here and you you should wait for the price system on it they will but um but a lot of people are gonna go where the prices are lower you uh and sorry for silly questions here but just looking back you have created things have been part of creating things that have transformed this world the world of technology perhaps more than almost anything else um but you're still a human being and uh unfortunately this ride ends do you ever think about your own mortality not too much I mean I'm I'm I'm uh Roman Catholic so I I'm not afraid of death I think a lot of people who um have problems with death are suffering from some lack of either faith in their transcending death or maybe they don't have children or they feel like you know they they get later in life and they feel like they they've missed opportunities to do something that endures and I sympathize a lot because I I'm old I got married fairly old so I understand all that I nothing human as alien to me as as Terrence said uh but um I don't fear it no what do you hope your legacy is yeah it's gonna be JavaScript I think no I I think you know my legacy has more to do with my children and and their children I think it also has to do with um web standards it has to do with things like brave the things we did with Firefox when we did um you know I'm not gonna overself but I think brave is important and we will continue to prove this in a way that counts for many decades to come but even Firefox whatever its future fortune showed you can restart the browser market this thing you said about people opting out and routing around you don't need everybody to do that it's more like teleps stubborn minorities than do that it's the lead users airfront hippos lead users you can be a few percent you can tilt the market and that can be done in spite of the incumbents the money interest not being in favor of what you're doing so I think what we do with Firefox won't be forgotten and it needs to be done more and we're doing it brave and you could argue that other projects are doing it in some ways blockchain is doing it the Robin Hood uh take down uh the use of uh Robin Hood by the the Wall Street Betts kids yeah similar so yeah that that kind of spirit and jurors and I think it um in some ways it's American right it's uh it's not hard revolutionary it's not trying to burn the past and and destroy everything it's more like we have these certain let's say um rights we have duties too so there's some debate about which comes first in American jurisprudence and the founding documents but so long as things are working we'll will be like pragmatic Americans like um the token will describe in his writings but if things get too out of whack for one reason or another uh too unequal too a little gargant can abusive we're gonna strut our rights and even a few of us can do it and even in the American Revolution it was a minority who fought and put their you know lives treasure and sacred honor at stake it was a bunch people want to you know uh upper Canada I think it was called uh Ontario yeah that that's the beautiful I mean that's that is at the core where your work stands for is that a few people can have the power to transform society with just a few radical ideas with just a little bit of code uh yeah change the world got to do it and that's empowering and that is the American way that's why this country is I believe the greatest country I know that's not over remet says it too much but uh I think some special things have already happened in this country and we'll continue to happen and that's and that spirit can continue no matter you know who comes here they can they can adopt those folk ways and that spirit Brandon as I can't tell you how much I was freaking out how much of an honor is to talk to your incredible human beings one of my favorite conversations ever thank you so much for wasting all this time wouldn't I really appreciate it oh it seems like a breeze my pleasure thank you for listening to this conversation with Brendan Nike and thank you to our sponsors Jordan Harbourger show sun basket meal delivery service better help online therapy and eight sleep self cooling mattress click the sponsor links to get a discount and to support this podcast and now let me leave you with some words from Jeff Atwood any app that can be written in JavaScript will eventually be written in JavaScript thank you for listening and hope to see you next time your