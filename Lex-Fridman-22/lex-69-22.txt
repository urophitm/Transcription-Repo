 The following is a conversation with Donald Knuth, one of the greatest and most impactful computer scientists the mathematicians ever. He's the recipient of the 1974 Touring Award, considered the Nobel Prize of Computing. He's the author of the Multi-Volume Work, the Magnum Opus, the Art of Computer Programming. He meets several key contributions to the rigorous analysis of computational complexity of algorithms, including the popularization of asymptotic notation that we all affectionately know as the big O notation. He also created the tech type-setting system, which most computer scientists, physicist, mathematicians, and scientists and engineers in general use to write technical papers and make them look beautiful. I can imagine no better guest than 2019 with than Don, one of the kindest, most brilliant people in our field. This podcast was recorded many months ago. It's one I avoided because perhaps counterintuitively the conversation meant so much to me. If you can believe it, I knew even less about recording back then, so the camera angle is a bit off. I hope that's okay with you. The office space was a big cramp for filming, but it was a magical space, where Don does most of his work. It meant a lot to me that he would welcome me into his home. It was quite a journey to get there as many people know. He doesn't check email, so I had to get creative. The effort was worth it. I've been doing this podcast on the side for just over a year. Sometimes I had to sacrifice a bit of sleep, but I was always happy to do it and to be part of an amazing community of curious minds. Thank you for your kind words, support, and for the interesting discussions and look forward to many more of those in 2020. This is the Artificial Intelligence Podcast. If you enjoy it, subscribe on YouTube, give us five stars on Apple Podcast, follow on Spotify, support on Patreon, or simply connect with me on Twitter. At Lex Friedman spelled F-R-I-D-M-A-N. I recently started doing ads at the end of the introduction. I'll do one or two minutes after introducing the episode and never any ads in the middle that break the flow of the conversation. I hope that works for you and doesn't hurt the listening experience. I provide timestamps for the start of the conversation that you can skip to, but it helps if you listen to the ad and support this podcast by trying out the product of service being advertised. This show is presented by CashApp, the number one finance app in the App Store. I personally use CashApp to send money to friends, but you can also use it to buy, sell, and deposit Bitcoin in just seconds. CashApp also has a new investing feature. You can buy fractions of a stock, say $1 or worth, no matter what the stock price is. Rokuers services are provided by CashApp investing, a subsidiary of Square, and a member of SIPC. I'm excited to be working with CashApp to support one of my favorite organizations called the First, best known for their first robotics and Lego competitions. They educate and inspire hundreds of thousands of students in over 110 countries and of a perfect rating and charity navigator, which means the donated money is used to maximum effectiveness. When you get CashApp from the App Store or Google Play and use code Lex Podcast, you'll get $10 and CashApp will also donate $10 to first, which again is an organization that I've personally seen inspire girls and boys to dream of engineering a better world. And now here's my conversation with Donald Knuth. In 1957 at Case Tech, you were once allowed to spend several evenings with the IBM 650 computer. As you've talked about in the past, then you fell in love with computing then. And you take me back to that moment with the IBM 650. What was it that grabbed you about that computer so that I'm 650 was this this machine that well, it didn't fill room, but it was it was big and noisy, but when I first saw it was through a window and there were just a lot of lights flashing on it. And I was a freshman. I had a job with the statistics group and I was supposed to punch cards and for data and then sort them on another machine, but they got this new computer came in and it had interesting lights. OK, so well, but I had a kind of key to the building. So I can, you know, I could get in and look at it and got a manual for it. And my first experience was based on the fact that I could punch cards, basically, which is a big thing for the, but the I was 650 was, you know, big and size, but, but incredibly small in power. In memory, it had it had 2000 words of memory and word of memory was 10 decimal digits plus a sign and it would do. Add to numbers together, you could probably expect that would take. I'll say three milliseconds. So pretty fast. It's the memories of the constraint, the memories, the problem. That was why it was, it took three milliseconds because it took five milliseconds for the drum to go around and you had to wait. I don't know five cycle times. If you have an instruction, one position on the drum, then it would be ready to read the data for the instruction and three notches. The drum is 50 cycles around and you go three cycles and you can get the data and then you can go another three cycles and get and get to your next instruction. If the instruction is there, otherwise, otherwise you spin until you get to the right place. And we had no random access memory whatsoever until my senior year. Senior year, we got 50 words of random access memory, which were priced this way, we would move stuff up to the up to the random access memory. In 60 word chunks and then we would start again. So it's subroutine when to go up there and could you have predicted the future 60 years later of computing from then. In fact, the hardest question I was ever asked was, what could I have predicted? The interviewer asked me, she said, you know, what about computing has surprised you? You know, in the Iran, I rattled off a couple of dozen things and then she said, OK, so what didn't surprise? And I was, I tried for five minutes to think of something that I that I would have predicted and I couldn't. But let me say that this machine, I didn't know. Well, there wasn't there wasn't much else in the world at that time. The 650 was the first machine that was that there were more than a thousand of ever. Before that, there were, you know, there was each machine there might be a half a dozen examples, maybe maybe first mass market mass produced. The first one, yeah, done a quantity and and IBM didn't sell them. They they rented them, but but they they rented them to universities at at great, you know, had a great deal. And so that's why a lot of students learned about computers at that time. So you refer to people, including yourself, who gravitate toward a kind of computational thinking as geeks, at least I've heard you use that terminology. It's true that I think there's something that happened to me as I was growing up that made my brain. Structured in a certain way that that resonates with with computer. So there's this space of people, two percent of the population, you empirically estimate that that's a fair that's been proven fairly constant over most of my career. However, it might be different now because kids have different experiences when they're young. So what does the world look like to a geek? What is what is this aspect of thinking that is unique to that makes it. Yeah, that makes a geek. This is a huge important question in in the 50s. I be I'm noticed that that there were geeks and non geeks and so they tried to hire geeks and they put out as with papers saying, you know, if you play chess, come to Madison Avenue and for an interview or something like this, they were trying for some things. So what is it that I find easy and other people tend to find harder and I think there's two main things. One is this with is ability to jump jump levels of abstraction. So you see something in the larger and you see something in the small and and you pass between those unconsciously. So you know that in order to solve some big problem. What you need to do is add one to a certain register and I guess to another step and below the yeah, I don't go down to the electron level but I knew what those milliseconds where what the drum was like on the 650. I knew how I was going to factor a number or find a root of an equation or something because of what was doing and as I'm debugging I'm going through. You know, did I make a keep on chair, did I did I write the wrong instruction, do I have the wrong wrong thing in a register and each level it each level it is different and this idea of being able to see something at all at lots of levels and fluently go between them seems to me to be more pronounced much more pronounced in the people that resonate with computers like I got. So in my books I also don't stick just to the high level but but I I mix. Low level stuff with high level and this means that some people think you know that I. That I should write better books and it's probably true but but other people say what but that's if you think like like that then that's the way to train yourself. Like keep mixing the levels and learn more and more how to jump between so that's the one thing the other the other thing is that it's more of a talent to be able to deal with non uniformity where where there's case one case two case three. Instead of instead of having one or two rules that govern everything so so it doesn't bother me if I need like an algorithm has 10 steps to it you know each step does does something else that doesn't bother me but a lot of a lot of pure mathematics is based on one or two rules which which are universal and and. And so this means that people like me sometimes work with the systems that are more complicated and necessary because it doesn't bother us that we don't that we didn't figure out the simple rule. And you mentioned that while Jacobi Boul Abel all the mathematicians in 19th century may have had symptoms of geek. The first 100% legit geek was touring Alan Turing I think he had yeah a lot more of the of this quality than anybody just from reading the kind of stuff he did and so how does touring. What influence has touring had on you. Well you're waiting so I didn't know that aspect of him until after I graduated some years it has undergraduate we had a class that talked about computability theory and touring machines and and it was all it sounded like a very specific kind of purely theoretical approach to stuff. So when cold weather when I when I learned that he that he had a design machine and that he wrote the you know you wrote a wonderful manual for for Manchester machines and and he invented all you know subrations and and he was a real hacker that he got his hands dirty. I thought for many years that he had only done purely formal work as I started reading his own publications I could you know I could feel this kinship and and of course he had a lot of peculiarities like he wrote numbers backwards because I mean left to right to right to left because that's the that's it was easier for computers to process him that way. What do you mean left to right he would write pie as you know nine five one four point three I mean okay. Right. You got it for one point three on the blackboard I mean when he he had trained himself to do that because the computers he was working with work that way inside. Train himself to think like a computer well there you go that's that's geek thinking. You've practiced some of the most elegant formalism in computer science. And yet you're the creator of a concept like literate programming which seems to move closer to natural language type of description of programming. Yeah absolutely. So how do you see those two as conflicting as the formalism of theory and the idea of literate programming. So there there we are in a non uniform system where I don't go I don't think one one size fits all and I don't and I don't think all truth lies in one in one kind of expertise and so somehow in a way say my my life is a convex combination of English and mathematics and you're okay with that and not only that I think thriving. I wish you know I want my kids to be that way I want etc. You know that you used left brain right brain at the same time you got a lot more done that's that was part of the part of the bargain and I've heard that you didn't really read for pleasure until into your 30s and you know literature. That's true. You know more about being than I do but I'll try to be consistent with what you read. Yeah no just believe me. I just go with whatever story I tell you it'll be easier that way the conversation will rise. Yeah no that's true. So I've heard mention of Philip Roth's American Pastoral which I love as a book. I don't know if it was it was mentioned as something I think that was meaningful to you as well. Well in either case what literary books had a lasting impact on you what literature. Yeah okay good question. So I met Roth. Oh really? Well we both got doctors from Harvard on the same day so we were yeah we had lunch together and stuff like that but he knew that you know computer books would never sell. Well all right so you say you you were a teenager when you left Russia so I have to say that Tolstoy was one of the big influences on me. I especially like Anna Karneena not because of of particularly of the plot of the story where but because there's this character who you know the philosophical discussions it's all it's all we have life is worked out there among the characters and so and so that I thought was especially beautiful on the other hand. Dustyowski I I didn't like it all because I've I felt that his genius was mostly because he kept forgetting what he what he had started out to do and he was just sloppy. I didn't think that that that he polished his stuff at all and I tend to admire somebody who who doubts the eyes and crosses the tees. So the music of the prose is what you admire more than? I certainly do admire the music of the language which I couldn't appreciate in the Russian but but I can't in Victor Hugo because it's close French is much closer but Tolstoy I like the same reason I like Herman Wook as a novelist I think like his book Marge Remorningstar has a similar character in Hugo who developed his own personal philosophy and and it goes in what's consistent yeah right and it's worth worth pondering so yeah like Nietzsche and like what? you don't like Friedrich Nietzsche or Nietzsche yeah no no yeah I think this has like I keep seeing quotations from Nietzsche and and they never tempt me to read any further ways full of contradictions you will certainly not appreciate him but Schiller you know I'm trying to get across what I appreciate and literature and part of it is the is as you say the music of the language of the way it flows and take Raymond Chandler versus Datshew Hammett Datshew Hammett senses are awful and Raymond Chandler's are beautiful they just flow so I don't I don't read literature because it's I suppose to be good for me or because somebody said it's great but but I find things that I like I mean you mentioned you were dressed like James Bond so like I love Ian Fleming I think he's got he had a really great gift for if he has a golf game or a game of bridge or something and this comes into his story it'll it'll be the most exciting golf game or or you know the absolute best possible hands of bridge that that exists and and he exploits and tells it beautifully so in connecting some things here looking at literary programming and being able to convey encode algorithms to a computer in a way that mimics how human speak how what do you think about natural language in general and the messiness of our human world about trying to express difficult things so the idea of literate programming is is really to try to understand something better by seeing it from at least two perspectives the formal and the informal if we try to understand a complicated thing if we can look at it in different ways and so this this is in fact the key to technical writing a good technical writer trying not to be obvious about it but says everything twice formally and informally or maybe three times but you try to give the reader a way to put the concept into his own brain or her own brain is that better for the writer or the reader or both well the writer just tries to understand the reader that's the goal of a writer is to have a good mental image of the reader and to say what the reader expects next and to to impress the reader with what has impressed the writer why something is interesting so when you have a computer program we try to instead of looking at it as something that we're just trying to give instruction to the computer what we really want to be is giving giving insight to the person who's going to be maintaining this program or to the programmer himself when he's debugging it as to why this stuff is being done and so all the techniques of exposition that that a teacher uses or book writer is make you better programmer if your if your program is going to be not just a one-shot deal so how difficult is that do you see hope for the combination of informal and formal for the programming task yeah I'm the wrong person to ask I guess because I'm a geek but but I think for a geek it's easy I know well I don't know sick not some people have difficulty writing and that might be because there's something in their brain structure that makes it hard for them to write or or it might be something just that they haven't had enough practice I'm not the right one to to judge but I don't think you can teach any person any particular skill like I do think that that writing is is half of my life and so I put it together in a letter program even even when I'm writing a one-shot program I I write it in a literate way because I get it right faster that way now does it get compiled automatically or so I guess on the technical side my question was how difficult is it design a system where much of the programming is done informally yeah informally I think whatever works to make it understandable is good but then you have to also understand how informal is you have to know the limitations you have to you so by putting the formal and informal together this this is where this is where it gets locked into your into your brain you can you can say informally well I'm working on a problem right now so let's go there get let's can you give me an example of uh yeah of connecting the informal and the formal well it's a little too complicated an example the there's a puzzle that's self-referential it's called a Japanese arrow puzzle and and you're given a bunch of boxes each one points north east south of west and at the end you're supposed to fill in each box with the number of distinct numbers that it points to so if I put a three in a box that means that and it's pointing to five other boxes that means that there's going to be three different numbers in those five boxes and and those boxes are pointing one of them might be pointing to me one of them might be pointing the other way but anyway I yeah I'm supposed to find a set of numbers that obeys this complicated condition that each number counts how many distinct numbers it points to well um and uh still a guy sent me his solution to this problem where he where he um uh uh presents formal statements that that say either this is true or this is true or this is true and and and so I try to render that formal statement informally and I try to say I contain a three and and uh the guys I'm pointing to contain the numbers one two and six so by putting it informally and also I convert it into a into a dialogue statement um that helps me understand the logical statement that he's written down as a string of numbers in terms of some abstract variable study here that's really interesting so maybe an extension of that that there has been a resurgence in computer science and machine learning and uh neural networks so using data to construct algorithms so it's another way to construct algorithms really yes if you if you can think of it that way uh uh uh so as opposed to natural language to construct algorithms use data to construct algorithms so what uh what's your view of this branch of computer science where data is almost more important than the mechanism of the algorithm it seems to be uh suited to a certain kind of non-geek uh and which you know which is probably why it's it's uh it's taken off that it has its own community that that really that really resonates with that but um it's hard to you know to trust something like that because nobody even the people who work with it that they have no idea what has been learned that's a really interesting thought that it uh it makes algorithms more accessible to a different community a different type of brain yep and that's really interesting because uh just like literary programming perhaps could make programming more accessible to a certain kind of brain there are people who think it's just a matter of education uh and anybody can learn to be a great programmer anybody can learn to be a great skier um uh you know i i i wish that were true but i but i know that there's a lot of things that i've tried to do and i and uh i was well motivated and i and i kept trying to build myself up and i never got past a certain level uh i i can't view for example i can't view uh uh three three dimensional objects in my in my head i have to i have to make a model and look at it and study it from all points of view and then i start to get some idea of but other people are good at four dimensions i mean uh physicists yeah so let's go to uh the art of computer programming in 1962 you set the table of contents for this uh magnum opus right yeah it was supposed to be a single book with twelve chapters now today what is it fifty uh seven years later you're in the middle of volume four of seven and in the middle of volume four b is four b more precisely can i ask you for an impossible task which is try to summarize the book so far maybe by giving a a little examples so from the sorting and the search and the combinatorial algorithms if you were to give a summary a quick elevator summary elevator that's great yeah right what depending how many floors there are in the building yes the first volume called fundamental algorithms talks about something that you can't the stuff you can't do without uh you have to you have to know the basic concepts of what is a program what you know what is what is the algorithm and uh and and it also talks about a low level machine so you can have some some kind of an idea what's going on and it has basic concepts of input output and subroutine induction induction right mathematical preliminary so so the thing that makes my book different from uh a lot of others is at all that i try not not only present the algorithm but i try to analyze them and which means quantitatively i say not only does it work but it works this fast okay and so i need math for them and then there's a standard way to structure data inside and represent information in the computer so that's all volume one of volume two talks it's called semi-numerical algorithms and here we're here we're we're writing programs but we're also dealing with numbers the algorithms deal with with with any kinds of objects but but specific when there's objects are numbers well then then we have certain special paradigms that apply to things that have well of numbers and so there's there's there's uh there's arithmetic on numbers and and there's matrices full of numbers there's random numbers and there's power series full of numbers there's different algebraic concepts that have numbers in structured ways and the arithmetic in the way a computer would think about arithmetic so floating point floating point arithmetic high precision arithmetic not only addition subtraction multiplication but also comparison of numbers so then then volume three talks about i like that one sort in search sorting in search i love sorting right so so here you know we're not dealing with that sort of numbers because you sort you sort letters and other objects and searching we're doing all the time with google nowadays but i mean then you we have to find stuff so again algorithms that that underlie all kinds of applications are you know none of these volumes is about a particular application but applications are examples of of why people want to know about sorting why people want to know about random numbers so then volume four goes into combinatorial algorithm this is where we have billions of things to deal with and we and here we keep finding uh cases where one good idea can can make something go more than a million times faster and and uh and we're dealing with problems that are probably never going to be solved efficiently but that doesn't mean we give up on them uh and and and we have this chance to have good ideas and and go much much faster on them so so that's combinatorial algorithms and those are the ones that are i mean you say sorting is most fun for you will like so it's a great fun but combinatorial algorithms are the ones that i always that i always enjoyed the most because that's when my skillet programming had most payoff you know the difference the difference between an obvious algorithm that you think of first thing and and and and and a good and a good and an interesting subtle algorithm that not so obvious but but uh run circles around the other one that's that's where computer science 3d comes where it comes in and a lot of these uh combinatorial methods were found first in applications to artificial intelligence or cryptography and uh in my case uh i i just liked them and it was associated more with puzzles that do you like the most in the domain of graphs and graph theory? graphs are great because they're the terrific models of so many things in the real world and and and you throw a numbers on a graph you got a network and so there you there you have many more things so but combinatorial in general is any arrangement of objects that that has some kind of a higher structure non non-random structure and okay is it possible to put something together satisfying all these conditions like i mentioned arrows a minute ago you know is there a way to to put these numbers on a bunch of boxes that are pointing to each other is that going to be possible at all? that's volume 4 that's volume 4 what is the procedure? volume 4a was part one and and uh what happened was in 1962 when i started writing down a table of contents it wasn't going to be a book about computer programming in general it was going to be a book about how to write compilers and i was asked to write a book explaining how to how to write a compiler and uh at that time there were only a few dozen people in the world who had written compilers and i happen to be one of them so and i also had some experience writing for like the campus newspaper and things like that so so i thought okay great uh i'm the only person i know who who's written a compiler but hasn't invented any new techniques for writing compilers and all the other people i knew had super ideas but i couldn't see that they would be able to write a book that wouldn't that would describe anybody else's ideas with their own so i could be the i could be the journalist and i could explain what all these cool ideas about compilers writing were and uh and and then i i started putting down well yeah let me you need have a chapter about data structures you need to have some introductory material you i want to talk about searching because a compiler writer has to have to look up the variables in a simple table and find out uh you know which which uh when when you when you're writing them of a variable in one place it's supposed to be the same as the one you put somewhere else so right you see you need all these basic techniques and i and i you know had kind of know some arithmetic and stuff so i so i threw in these chapters and i threw in a chapter in commentarics because uh that was what i really enjoyed programming the most but there weren't many algorithms in known about combinatorial methods in 1962 uh so that was a kind of a short chapter but it was sort of thrown in just for fun and chapter 12 was going to be actual compilers applying all the stuff in chapters one to eleven uh to make compilers well okay so that was my table of contents from 1962 and during the 70s the whole field of combinatorics went through a huge explosion people talk about combinatorial explosion and they usually mean by that that uh the number of cases goes up uh you know you change end to end plus one and all of a sudden you your problem has it has gotten more than ten times harder but there was a explosion of ideas about combinatorics in the 70s to the point that it took like 1975 i betcha more than half of all the journals of computer science were about combinatorial methods and what kind of problems were occupying people's minds what kind of problems in combinatorics was it set up? set up? set up? set up? set up? yeah graph theory was quite dominant i mean but uh all of the NP-hard problems uh that you have like you know Hamiltonian path or phallosale then going beyond yeah yeah going beyond graphs you you had operation research whenever there was a small class of problems that had efficient solutions and they were usually associated with matroid theory special mathematical construction but once we went to things that involved three things at a time instead of instead of two all of a sudden things got harder so we had satisfiability problems where if you have if you have clauses every clause has two logical elements in it then we can satisfy it in the near time we can test for satisfiability in the near time but if you allow yourself three variables in the clause uh then uh nobody knows how to do it so these articles were about trying to find better uh better ways to uh to solve cryptography problems and graph theory problems where we have lots of data but we didn't know how to find the best subset so the data like with sorting uh we could get the answer didn't take long so how did it continue to change from the 70s to today? yeah so now there may be half a dozen conferences whose topic is common at Torx different kind but uh fortunately i don't have to rewrite my book every month you know like i had to in in the 70 but still there's huge amount of work being done and people getting better ideas on these problems that don't seem to have really efficient solutions but we still get still a lot more with them and so this book that i'm finishing now is i've got a whole bunch of brand new methods that uh as far as i know there's no other there's no other book that covers that covers this particular approach and and uh so i'm trying to do my best of exploring the tip of the iceberg uh and and and and try out lots of things and and keep keep rewriting uh finding as i find better better method so what's your writing process like what's your thinking and writing process like every day so um what's your routine even? i i guess it's actually the best question because i spent seven days a week uh you're doing it uh you're the most prepared to answer it yeah um yeah but uh okay so uh the chair i'm sitting in is where i do where the magic happens well uh reading and writing the other my the chair is usually sitting over there where i have other book or some reference book but but uh i i found his chair which was designed by a Swedish guy anyway it turns out this is the only chair i can really sit in for hours and hours and not know that i'm in a chair but then i have the stand-up desk right next next to us and and so after i write something with pencil and eraser i get up and i type it and revise and rewrite uh uh uh i'm standing up the kernel of the idea is first put on paper yeah that's where right and i i'll write maybe five programs a week uh uh uh of course literate programming and these are before i describe something in my book i always program it to see how it's working and i and i try it a lot so for example i learned uh at the end of january i learned of a breakthrough in five four japanese people who had extended one of the one of my methods in a new direction and so i spent the next five days writing a program to implement what they did and then i you know but they had only generalized part of what i had done so then i had to see if i could generalize more parts of it and then i and i had to take their approach and i had to try it out on a couple of dozen of the other problems i had already worked out with with my old methods and so that took another couple of weeks and then i you know then i then i started to see the light and i and uh and i started writing the final draft and uh and then i would uh you know type it up and involve some new mathematical questions and so i wrote to my friends and who who might be good at solving those problems and and they solve some of them and so i put that in as exercises and and so a month later i had absorbed one new idea that i that i learned and uh you know i'm glad i heard about it in time otherwise my i want to put my book out before i'd heard about the idea on the other hand this book was supposed to come in at 300 pages and i'm up to 350 now that added 10 pages to the book but if i learn about another one i i probably sure it's going to shoot me well so in the process in that one month process are some days harder than others are some days harder than others well yeah my work is fun but i also work hard and every big job has parts that are a lot more fun than others and so many days i'll say why do i have to have such high standards you know why why couldn't i just be sloppy and not try this out and you know just just report the answer but i but i know that uh uh that people are economy to do this and so okay so okay Donald grit my teeth and do it and and and then the joy comes out when i see that actually you know i'm getting good results and and and i get and i even more when i see that somebody has actually read and understood what i wrote and uh told me how to make it even better i did want to mention uh something about the uh about the method so i got this tablet here where wow right do the first you know the first writing of concepts okay so so um and what link we just set in right so he take a look at it but you know here you're and i'm saying explain how to draw such skewed pixel diagrams okay so i got this paper about 40 years ago when i was visiting my sister in Canada and they make tablets of paper with this nice large size and just the right very small space between my and yeah yeah tickle maybe uh also just show it yeah yeah wow you know i've got these manuscripts going back to the 60s and and and and those are when getting my ideas on paper okay but i'm a good typist in fact i went to typing school when i was uh when i was in high school and so i can type faster than i think so then when i do the the editing and stand up and type then i then i revised this and and it comes out a lot different than what you know for for style and rhythm and things like that come out at the at the typing state and you type in tech and can you can you think in tech no so to a certain extent i have i have only a small number of of idioms that i use like i you know i'm beginning with there and i do something for display equation i do something and and so on but i but i i have to see it and in the way that it's on paper here yeah right so for example touring wrote what the other direction you don't write macros you don't think in macros not particularly but when i need a macro i'll go ahead and and and do it but but but the thing is the i also write to fit i mean i'll i'll change something if i can if i can save a line i'll cut you know it's like high-cool i'll figure out a way to rewrite so that it'll look better on the page and i shouldn't be wasting my time on that but but i can't resist because i know it's only another three percent of the time or something like that and it could also be argued that that is what life is about oh yes it in fact that's true like i work in a garden one day a week and that's that's kind of a description of my life is getting rid of weeds you know removing bugs for programs and so you know a lot of writers talk about you know basically suffering the writing processes yeah having you know it's extremely difficult and i think of programming especially the or technical writing that you're doing can be like that do you find yourself methodologically how do you every day sit down to do the work is it a challenge you you kind of say it's you know oh yeah it's fun but it'd be interesting to hear if there are non-fun parts that you really struggle with yeah so the fun comes when when i'm able to put together ideas of two two people who didn't know about each other and and and so i might be the first person that saw both of their ideas and and so then you know then then i get to make the synthesis and that gives me a chance to be creative but the dread work is where i i've got to chase everything down to its root this leads me into really interesting stuff i mean i i learned about Sanskrit and i and you know i try to give credit to all the authors and so i write let so i write to people who know the people it got there's a dead i i communicate this way i and i got to get the math right and i got to tackle my programs try to find holes in them and i rewrite the programs over after i get a better idea is there ever dead ends dead ends oh yeah i throw stuff out yeah like one of the things that i i spent a lot of time preparing a major example based on the game of baseball and i know a lot of people who you know for whom baseball is the most important thing in the world you know it but i also know a lot of people for whom cricket is the most important in the world or or or or or suck or something you know and and i realized that if if i had a big example i mean it's going to have a fold out illustration and everything and i was saying well what what am i really teaching about algorithms here where i had this this this this baseball example and if i was a person who who know who knew only cricket wouldn't they what would they think about this and so so i ripped the whole thing out but i you know i had i had something that would have really appealed to people who grew up with baseball as as as a as a major theme in their life which is a lot of people but but just yeah so i still have minority small minority i took out bowling too even a smaller minority what's the art in the art of programming why why is there of the few words in the title why is art one of them yeah well that's that's what i wrote my touring lecture about and and so when people talk about art it really i mean what the word means is something that's not a nature so when you have artificial intelligence the art comes from the same root saying that this is something that was created by by human beings and then it's gotten a further meaning often a fine art which has this beauty to the to the mix and so as you know we have things that are artistically done and and this means not only done by humans but also done in a way that's elegant and brings joy and and has has i guess with tall stoyvers duster eski uh right but anyway it it's that part that that says that it's done well as well as not only different from nature in general then art is what human beings are specifically good at and when they say artificial intelligence well they're trying to mimic human beings but there's an element of fine art and beauty you are one that's what i that's what i tried to also say that you can write a program and make a work of art so now in terms of surprising you know what ideas in writing from sort and search to the combinatorial algorithms what ideas have you come across that um were particularly surprising to you that's that changed the way you see a space of problems i get a surprise every time i have a bug in my program obviously but but that isn't really what you're at you at more transformational the rest and surprises for example in volume for a i was especially surprised when i learned about data structure called bdb this boolean decision diagram because i sort of had the feeling that uh as an old timer uh and you know i've been programming since this or since the fifties and uh bdb's weren't invented till 1986 and here comes a brand new idea that revolutionizes the way to represent a boolean function and boolean functions are so basic to all kinds of things in i mean logic is under lies it everything we can describe all of what we know in terms of logic somehow and and and uh propositional logic uh i thought uh that was cut and dried and everything was known but but but here but here comes uh uh uh uh uh uh uh uh and discovers that bd's are incredibly powerful then then uh so i so i uh that means i have a whole new section to the book that i never would have thought of until 1986 and not until 1990s when i when people started to uh to use it for for you know we billion dollar of applications and and it was it was the standard way to design computers for a long time until until sat solvers came along in the year 2000 so that's another great big surprise so a lot of these things have have totally changed the structure of my book and the middle third of volume for b is about sat solvers and that's 300 plus pages which is uh which is all about material mostly about material that was discovered in this century and i had to start from scratch and you know meet all the people in the field and write i have 15 different sat solvers that i wrote while preparing that seven of them are described in the book others were for my own experience so newly invented data structures or ways to represent whole new class of algorithm whole new class of yeah and the interesting thing about the bd's was that the theoreticians started looking at it and started to describe all the things you couldn't do with bd's and so they were getting a bad they were getting a bad name uh because you know okay they were they were useful but they didn't solve everything every problem you know i'm sure that the theoreticians are in the next 10 years i'm going to show why machine learning doesn't solve everything but i you know not only worried about the worst case i get a huge delight when i can actually solve a problem that i couldn't solve before yeah even though i can't solve the problem that's that it suggests as a further problem like i know that i'm way better than i was before and so i found out that bd's could do all kinds of miraculous things and so i had to spend quite a few years learning about the that territory so in general what brings you more pleasure proving or showing a worst case analysis of an algorithm or or showing a good average case or just showing a good case that you know something good pragmatically can be done with this algorithm yeah i like a good case that that is maybe only a million times faster than i was able to do before but uh and not worry about the fact that uh that it's still that it's not going to take too long if i double the size of the problem so that said do you popularize the asymptotic notation for describing running time obviously in the analysis of algorithms worst cases such such an important part do you see any aspects of that kind of analysis is lacking so and notation too well the the main purpose which have notations that that help us for the problems we want to solve and so that they match our they match our intuitions and uh people who worked in number theory had used uh asymptotic notation in what in in a in a certain way but it was only known to a small group of people and and i realized that in fact it was very useful to be able to have a notation for something that we don't know exactly what it is but we only know partial about it and so on so so uh for example instead of big onotation let's just let's just take us a much simpler notation where i'd say zero or one or zero one or two and suppose i suppose that uh when i had been in high school we would be allowed to put in the middle of our formula x plus zero one or two equals uh why okay and then then we we would learn how to multiply two such expressions together and and you know i'd deal with them uh well the same thing big onotation says uh here's something that's uh i'm not true what it is but i know it's not too big i know it's not bigger than some constant times n squared or something like that right so so i write big ol of n squared and now i i learn how to add big ol of n squared to big ol of n cubed and i know how to add big ol of n squared to uh plus one and square that and how to take logarithm next but entrance we have big ols in the middle of them and that turned out to be uh hugely valuable in all of the work that i was trying to do is i'm trying to figure out how good an algorithm is so have there been algorithms in your journey that perform very differently in practice than they do in theory well the worst case I've become a throttle algorithm is almost always horrible uh but but but we have set solvers that are solving where one of the one of the last exercises in that part of my book was figure out a problem that has a hundred variables that's that's difficult for us at solver but uh but you would think that a problem with a hundred boolean variables has required you to do two to the one hundredth operations because that's the number of possibilities when you have two a hundred boolean variables in two to the one hundredth to two the one hundredth is way bigger than than we can handle ten to the seventeenth is a lot you've mentioned over the past few years that you believe p may be equal to n p but that it's not really uh you know if somebody does prove that p equals it will not directly lead to an actual algorithm to solve difficult problems can you explain your intuition here has it been changed and in general on the difference between easy and difficult problems of p and n p and so on yeah so so the the popular idea is if in algorithm exists then somebody will find it um and it's just a matter of uh of writing it down one point but many more algorithms exist than anybody can understand or ever make use of or discover yeah because they're just way beyond human comprehension of the total number of algorithms is it is more than mind-boggling so so we have situations now where we know that algorithm exists but we don't know we don't the farthest idea what the algorithms are there's there are simple examples based on on game playing where you have uh now where you say well there must be an algorithm that exists to win in the game of hex because uh for the first player to win in the game of hex because hex is always either an out a win for the first player or the second player but what's the game of hex there's a game of hex which is which is based on putting pebbles onto a hexagonal board and and the white player tries to get a white path from left to right and the black player tries to get a black path from bottom to top and how does capture occur just so and and there's no capture you just put pebbles down one at a time but there's no draws because after all the white and black are played there's either going to be a white path across from each to west or a black path from from bottom to top so there's always you know it's the perfect information game and people people play take turns like like uh tic-tac-toe and uh and the hex board can be different sizes but there's no possibility of a draw and players move one at a time and so it's got to be either a first player winner or second player win mathematically uh you follow out all the trees and uh and either there's always a win for the first player second player okay and it's finite the game is finite so there's an algorithm that will decide you can show it has to be one or the other because the second player could mimic the first player with kind of a pairing strategy and so you can show that uh uh uh uh uh uh it has to be one it has to be one or the other but we don't know any algorithm anyway we don't know if there's no there are cases where you can prove the existence of uh of of a solution but we but nobody knows any way how to find it but more like the algorithm question uh there's a there's a very powerful theorem in graph theory by Robinson to Seymour that says that every class of graphs that is closed under taking minors has a has a polynomial time algorithm to determine whether it's in this class or not now a class of graphs for example planar graphs these are graphs that you can draw in a plane without crossing lines and and a planar graph is taking minors means that you can shrink an edge into a point or you can delete an edge and so you start with a planar graph and shrink any edge to a point is still planar delete an edge is still planar okay now but there are millions of different uh ways to describe a family of graph that still is remains the same under taking minor and Robertson to Seymour proved that any such family of graphs there's a funnett number of minimum graphs that are obstructions so that if if it's not in the family then then it has to contain then there has to be a way to shrink it down and until you get one of these bad minimum graphs that's not in the family for in the case of a planar graph the minimum graph is a five-pointed star where everything points to another and the minimum graph consisting of trying to connect three utilities to three houses without crossing lines and so there are two there are two bad graphs that are not planar and every every non planar graph contains one of these two bad graphs by by shrinking and removing edges sorry can you say it again so uh he proved that there's a finite number of these bad graphs always a funnett so somebody says here's a family it's hard to believe and they present this sequence of 20 papers I mean and they it's deep worth but it you know it's because that's for any arbitrary class so it's for any arbitrary class that's closed under taking minors that's closed under maybe I'm not understanding because it seems like a lot of them are closed under taking minors almost all the important classes of graphs are there are tons of of such graphs but also hundreds of them that arise in applications right I have a book over here called classes of graphs and and and and it's it's amazing how many different classes of graphs that people have looked at so why do you bring up this theorem uh lower this proof so now there's lots of algorithms that are known for special class of graphs for example if I have a certain if I have a quarter graph then I can color it efficiently if I have some kind of graphs it'll make a great network which is very similar so so like you'd like to test it uh somebody gives you a graph it's always in this family of graphs if so then I have then I can I can go to the library and find an algorithm that's going to solve my problem on that graph um okay so so we we have that we want to have a graph that says an algorithm that says you give me a graph I'll tell you whether it's in whether it's in this family or not okay and so all I have to do is test whether or not that does this given graph have a minor that's one of the bad ones a minor is is everything you can get by shrinking and removing it and given any minor there's a polynomial time algorithm saying I can tell whether this is a minor of you and there's a finite number of bad cases so I just try you know does it have this bad case polynomial time I got the answer does it have this bad case polynomial time I got the answer total polynomial time and so I've solved the problem however all we know is that the number of minors is finite we don't know what we might only know one or two of those minors but we don't know that if we've got if we've got 20 of them we don't know there might be 21 25 that just all we know is that is that it's finite so here we have a polynomial time algorithm that we don't know that's a really great example of what you worry about or why you think p equals np won't be useful but still why do you hold the intuition that p equals np because you have to rule out so many possible algorithms as being not working you know you can you can you can take the graph and you can represent it as in terms of certain prime numbers and then you can multiply those together and then you can then you can take the bitwise and and and you know and construct some certain constant polynomial time and that's you know perfectly valid algorithm and there's so many of algorithms of that kind a lot of times we see random take data and and and we get quencentises that that that some fairly random looking number actually is useful because because it's not it it happens to it happens to solve it happens to solve a problem just because you know there's there's so many hairs on your head but it seems like unlikely that two people are going to have the same number of hairs on their head but but they're obvious but you can count how many people there are and how many hairs on their so there must be people walking around in the country that have the same number of hairs on their head well that's a kind of a coincidence that you might say also you know this this particular combination of operations just happens to prove that a graph has a Hamiltonian path I mean I see lots of cases where unexpected things happen when you have enough enough possibilities so because the space of possibilities are huge your durations they have to rule them all out and so that's the reason for my intuition is by no means a proof I mean some people say you know well P cat equal and P because you've had all these smart people the smartest designers have been wrecking their brands for years and years and and there's a million dollar prizes out there and you know none of them nobody has thought of the algorithm so it must must be no such algorithm on the other hand I can use exactly the same logic and I say well P must be equal to NP because there's so many smart people out here been trying to prove it unequal to NP and they've all failed you know this kind of reminds me of the discussion about the search for aliens they've been trying to look for them and we haven't found them yet therefore they don't exist but you can show that there's so many planets out there that they very possibly could exist yeah and uh right and then there's also the possibility that that they exist but they they all discovered machine learning or something and and and and and then we each other up well on that small quick tangent let me ask do you think there's intelligent life out there in the universe I have no idea do you hope so do you think about it it I don't I don't spend my time thinking about things that I could never know really and yet you do enjoy the fact that there's many things you don't know you do enjoy the mystery of things I enjoy the fact that there that I have limits yeah but I don't but but I don't take time to to answer unsolvable questions right I got it well because you've taken on some tough questions that may seem unsolvable you have taken on some tough questions they may see it unsolvable it gives me a thrill when I can get further than I ever thought I could right yeah but but I don't much like with religion these I'm glad that there's that there's no proof that God exists or not I mean this I think it would spoil the mystery it would be too doll yeah so to quickly talk about the other art of artificial intelligence what is your view you know artificial intelligence community has developed as part of computer science and in parallel with computer science since the 60s what's your view of the AI community from the 60s to now so all the way through it was the people who were inspired by trying to mimic intelligence or to do things that that were somehow the greatest achievements of intelligent that had been inspiration to people who have pushed the envelope of computer science maybe more than any other group of people so it's all through it's been a great source of of good problems to to seek teeth into and and getting getting partial answers and then more and more successful answers over the year so this has this has been the inspiration for lots of the great discoveries of computer science are you yourself captivated by the possibility of creating of algorithms having echoes of intelligence in them not as much as most of the people in the field I guess I would say but but that's not to say that they're wrong or that it's just you asked about my own personal preferences and but but the but the thing that I that I I worry about is when people start believing that they've actually succeeded and because the seems to me that's huge gap between really understanding something and being able to pretend to understand something and give the illusion of understanding something do you think is possible to create without understanding yeah so to uh I do that all the time too I mean that's why I use random members I yeah but I but but there's there's still this great gap I I don't assert that it's impossible but I but I don't see anything coming any closer to really uh the uh the kind of stuff that I would consider intelligence so you've mentioned something that on that line of thinking which I I very much agree with so the art of computer programming as the book is focused on single processor algorithms in for the most part uh you you mentioned that's only because I set the table contents in 1962 you have to remember for sure there's no I'm glad I didn't wait until 1965 or something that's one book maybe we'll touch on the bible but one book can't always cover the entirety of everything so I'm glad yeah um I'm glad the the table of cottons for uh the the art of computer programming is what it is but you did mention that that you thought that understanding of the way ant colonies are able to perform incredibly organized tasks might well be the key to understanding human cognition so these fundamentally distributed systems so what do you think is the difference between the way uh Don Knuth with sort of list and an ant colony with sort of lists or yeah performing algorithm sorting a list isn't the same as cognition though uh but but I know what you're getting at is uh so to the well the advantage of ant colony at least we can see what they're doing we we know which ant has talked to which other ant and and and and it's much harder uh with with with brains to to to know how to what extent of neurons are passing signal so I'm just saying that ant colony might be a if they have the secret of cognition like I think of an ant colony as a cognitive single being rather than as a as a colony of lots of different ants I mean just like the cells of our brain are and and and the microbiome and all that is interacting uh entities but uh but somehow the I consider myself to be a single person well you know an ant colony you can say might be cognitive cognitive and somehow and it sounds yeah I mean you know I okay uh I I I smash a certain ant and do I'm saying hmm that's done what was that right you know but if we're going to crack the the secret of cognition it might be that we could do so by by by cycling out how I ask to it because we have a better chance to measure communicating by pheromones and by touching each other and uh site but but not by much more subtle phenomenon my collector currents going through but even a simpler version of that what are your thoughts of maybe uh connoisse game of life? okay so connoisse game of life is is able to simulate any any computable process and any deterministic process is like how you went there I mean that's not it's most powerful thing I would say I mean uh they can simulate it but the the magic is that the individual units are distributed yes and extremely simple yes we can we we understand exactly what the primitives are the primitives just like with the ant colony even simpler though but if we but still it doesn't say that I understand I understand life I mean I understand uh it it gives me and it gives me a better insight into what does it mean to uh to have a deterministic universe uh to what does it mean to um to have a free choice for example do you think uh god please dice? yes I don't see any reason why god should be forbidden from using the most efficient ways to to uh to I mean we we know that dice are extremely important in in efficient algorithms there are things that that couldn't be done well without randomness and so I don't see any reason why why god should be prohibited from when the uh when the algorithm requires it uh I don't you don't see why the the physics should constrain it uh yeah so in 2001 you gave a series of lectures at MIT about religion and science no that was 1999 but you published uh so in 1999 you spent a little bit of time in Boston enough to give uh those lectures yeah and uh I read in the 2001 version uh most of it it's quite fascinating to read I recommend people uh it's transcription of your lectures so what did you learn about how ideas get started and grow from studying the history of the bible so you've rigorously studied studied a very particular part of the bible uh what did you learn from this process about the way us human beings as a society develop and grow ideas share ideas and find by those ideas well I I tried to summarize that uh I wouldn't say that I that I learned a great deal of really definite things like what what I could make concluded but I learned more about what I don't know you have a complex subject which is really beyond human understanding uh so so we give up on saying I'm ever going to get to the end of the road and I'm ever going to understand it but you say but but maybe it might be good for me to uh to get closer and closer and learn more about more and more about something and so you know how can I do that uh uh efficiently and the answer is well use randomness um and so so so try a random subset of the uh that that is within my grasp and and and and study that in detail instead of just uh studying parts that somebody tells me to study or instead of studying nothing because it's too hard um so I I I I decided uh for for my own amusement one once that I would I would take a subset of the of the uh versus the Bible and I would um try to find out what the best thinkers have said about that small subset and I had about let's say 60 verses out of out of 3,000 I think is one out of 500 or something like this and so then I went to libraries which which are well indexed uh you can you I spent uh for example at uh at Boston Public Library I I would go once a week for for a year and I went like I went uh I have done time stuff and over Harvard Library to to look at this you know books that weren't in the Boston Public where they of course scholars had looked at and you can go and they and you can go down the shelves and you can pretty you can look at the index and say oh is there is this verse I mentioned anywhere in this book if so look at page 105 so so in other words like I could learn not only about the Bible but about the secondary literature about the Bible the things that scholars have written about it and so that that gave me a way to uh uh to zoom in on parts of the thing so that I could get more more insight and and so I look at it as as a way of giving me some some firm pegs which I could hang pieces of information but not as as things where I would say and therefore this is true in this uh random approach of sampling the Bible what did you learn about the the most uh you know central one of the biggest accumulation of ideas in our environment. To me that the that the main thrust was not the one that most people think of as saying you know don't have sex or something like this but that the main thrust was to try to to to try to figure out how to live in harmony with God's wishes. I'm assuming that God exists and I say I'm glad that I that there's no way to prove this because that wouldn't that would I would run through the proof once and then I'd forget it and and it would and and I would never uh speculate about spiritual things and mysteries otherwise and I think my life would be very incomplete so I'm so I'm assuming that God exists but it if but a lot of the the people say God doesn't exist but that's still important to them and so in a way that might still be for the God is there or not uh in some sense uh it it's one of the one of the verses I studied that is you can interpret it as saying that you know it's much better to be an atheist than not to care at all. So I would say it's yeah it's similar to the P equals and P discussion. Yeah you mentioned a mental exercise that I I'd love it if you could partake in yourself a mental exercise of being God and so how would you if you were God Donuth how would you present yourself to the people of earth. You mentioned your love of literature and there was there's this book that that really I can recommend to you if I think yeah the title I think is blasphemy it talks about God revealing himself through a computer in in in Los Alamos and and it um it's the only book that I've ever read where the punchline was really the very last word of the book and it and explain the whole idea of the book and so I don't want to give that away but it but it's really very much about this question that that you raised but but but suppose God said okay that my my my previous means of communication with the world are not the best for the 21st century so what should I do now and and and it's conceivable that it would that that God would choose the way that's described in this book another way to look at this exercise is looking at the human mind looking at the human spirit the human life in a systematic way I think it mostly you want to learn humility you want to realize it once we solve one problem that doesn't mean that we're that all of sudden other other problems are going to drop out and and and and and we have to realize that that that there are there are things beyond our beyond our our ability um I see hubris all around yeah well said if you were to run program analysis on your own life uh how did you do in terms of correctness running time resource use asymptotically speaking of course okay yeah well I would say that question had not been asked me before um and I I uh I started out with library subroutines and and uh learning how to be a automaton that was obedient and I had the great advantage that I didn't have anybody to blame for my failures if I started getting not understanding something I I knew that I should stop playing ping pong and that that it was my fault that that I was I wasn't studying hard enough or something rather than that somebody was discriminating against me in some way and and I don't know how to avoid this the existence of biases in the world but I but I know that that's an extra burden that I didn't have to suffer from um and uh and and then I uh I found the from from parents I learned the idea of of out of service to other people as being more important than uh uh what would I get out of stuff myself I know that I need to I need to be happy enough enough in order to be able to be of service but I but I you know but I I came to philosophy uh for finally that that I phrase as point eight is enough there was a tv show one's called eight is enough which was about a you know somebody had eight kids um but but uh I I say point eight is enough which means if I can have a way of rating happiness I think it's good design that to have to have an organism that's happy about 80% of the time um and if it was 100% of the time it would be like everybody's on drugs and and and and and and and everything collapses nothing works because everybody's just too happy do you think you've achieved that point eight optimal uh well I said what there are times when I when I'm down and I you know and I I mean I know that I'm chemically that I I know that I've actually been programmed to be uh uh to be depressed a certain amount of time and and and if that gets out of kilter and I'm more depressed than you know I sometimes I like I find myself trying to say now who should I be mad at today there must be a reason why I'm you know but I but then I realize you know it's just my it's just my chemistry telling me that I'm supposed to be mad at somebody and so and so I triggered off say okay go to sleep and get better um but but if I'm but if I'm not 100% happy that doesn't mean that I should find somebody that that's screaming and and and and try to sound but I but I I'm saying you know okay I'm not 100% happy but but I'm happy enough to do to be a part of a of a sustainable situation so so that's kind of the the numerical analysis I do I do I do I do I do I do I do I do I do I do I do I do I dit I hope it's okay uh to talk about uh as you talked about previously in 2006 you were diagnosed with prostate cancer has that encounter with mortality changed you in some way or the way you see the world yeah it did the first encounter with mortality with my when my dad died and I I went through a month when I sort of came to you know uh be comfortable with the fact that I was going to die someday and during that month I don't know I I I felt okay but I couldn't sing and you know and I and I couldn't do original research either I I can I sort of remember after three or four weeks the first time I started having a technical thought that made sense and was maybe slightly creative I could sort of feel that I hope that that something was started to move again you know but that was you know so I felt very empty for until I came to grips with the I yes I learned that this is sort of a standard grief process that people go through okay so then now I'm at a point in my life even more so than in 2006 where where all of my goals have been fulfilled except for finishing the art of computer programming um I I uh I had one major on fulfill goal I wanted all my life to to write a piece of piece of music that and I had idea for for for a certain kind of music that I thought ought to be written at least somebody ought to try to do it and I and I felt that it was that uh it wasn't going to be easy but I wanted I wanted to prove a concept I wanted to know if it was going to work or not and so I spent a lot of time and finally I finished that piece and we had the we had the uh the uh world premiere last year on my 80th birthday and we had another premiere in Canada and there's talk of concerts in Europe and various things so that but that's done it's part of the world's music now and it's either good or bad but I I did uh what I was hoping to do so the only thing that I uh that that I uh have on my agenda is to is to try to do as well as I can with the art of computer programming until I go to see now do you think there's a element of point eight that might have applied there? point eight yeah well I look at it more that I got actually to to to 1.0 uh uh with when when that concert was over with um I mean I I I I I so in 2006 I was at point eight um so so when when I diagnosed with prostate cancer then I said okay well maybe this is you know I've I've had all kinds of good luck all my life and there's no I have nothing to complain about so I might die now um and we'll see what happened and so so it's it quite seriously I I went and I didn't I had no expectation that I deserved better um I didn't make any plans for the future I had my my surgery I came out of the surgery and uh and uh and uh spend some time learning how to walk again and so on is you know it's painful for a while um but I got home and I realized I hadn't really thought about what what to do next I hadn't I hadn't any expectations you know I okay okay hey I'm still alive okay now I can write some more books but but I didn't come to with the attitude that you know I you know that this was this was terribly unfair and I and and uh I I just said okay I I was accepting whatever turned out uh you know I I I got I got more than my share already so why should I uh what what you know what what why should and I and I didn't and and I really when I got home I realized that I had really not thought about the next step what I would do after I would after I would be able to work again I I'd sort of thought of it as if as this might you know I was comfortable with with the fact that it was at the end um but I was hoping that I would still you know be able to uh learn about satisfiability and and uh also someday write music I didn't start I didn't start seriously on the music project until 2012 well so I'm gonna be in huge trouble if I don't talk to you about this uh in in the 70s you've created the tech type setting system together with metafot language for font description and computer modern family of typefaces that has basically defined the methodology in the aesthetic of account list research fields right math physics uh well beyond computer science so on okay well first of all thank you I think I speak for a lot of people in saying that but question in terms of beauty there's a beauty to typography that you've created and yet beauty is hard to quantify right um how does one create beautiful letters and beautiful equations uh like what what what so and perhaps there's no words to be describing uh yeah be describing the process but that's so the great uh Harvard mathematician George Deeper Koff wrote a book in the 30s called the aesthetic measure where he where he would have pictures of vases underneath would be a number and this was how beautiful the the vase was and he had a formula for this and and he actually also write how wrote about music and so he could he could he could you know so I thought maybe I part of my musical composition I would try to program his algorithms and you know so that I would write something that had the highest number by his score well it wasn't quite rigorous enough for for a computer to do but anyway people have tried to put numerical value on beauty but and and he he did probably the most serious attempt and and uh uh George Gryffin's teacher also wrote two vines where he talked about his method of of composing music but you're talking about another kind of beauty and beauty and letters and but letter plugins and whatever that overture is right so so uh uh and so that's uh in the i'd be the beholder as they say but um get striving for excellence in whatever definition you want to give to beauty then you try to get as close to that as you can somehow with uh I guess I guess I'm trying to ask and there may not be a good answer uh what loose definitions were you operating under with the community of people that you're working on oh the loose definition I want to I want to it to appeal to me to me to you personally yeah that's a good start yeah knowing and it failed that test went when I got volume two came out with with the with the new printing and I was expecting to be the happiest day of my life and and I I felt like a burning like uh how angry I was that I opened the book and it was in the same beige covers and but but it didn't look right on the page the number two was particularly ugly I couldn't stand any page had a tune this page number um and I was expecting that it was you know I spent all this time making measurements and I had had had had looked at stuff in different different ways and I had I had a great technology but but it didn't you know but I but I wasn't done I had I had to retune the whole thing uh after 1961 has it ever made you happy finally oh yes or is it a point eight oh no and so many books have come out that would never have been written without this I just it just just it's just it's just really but I can but now I can I mean all these pages that are sitting up there I I don't have a if I didn't like them I would change them like that's my nobody else has this ability they have to stick with what I gave them yeah so in in terms of the other side of it and there's the typography so the look of the the type and the curves and the lines uh what about the spacing what what about the spacing between the white space yeah uh it seems like you could be a little bit more systematic about the layout or technical oh yeah you can always go further I I I didn't I didn't stop at point eight I start I stopped the about point nine eight seems like you're not following your own rule uh for happiness or is no no no like uh there's okay of course there's this what is the Japanese word wabi sabi or something that where where the most beautiful works of art are those that have flaws because then the person who who perceives them adds their own appreciation and that give if you were a more satisfaction or so on but but I but no no with typography I wanted it to look good as I could put in in in the vast majority of cases and then when it doesn't then I I say okay that's two percent more work for the for the author but but I didn't want to I I didn't want to say that my job was to get two hundred percent uh with and take all the work away from the author that's what I meant by that so if you were to venture a guess how much of the nature of reality do you think we humans understand so you mentioned you appreciate mystery how much of the world about us is shrodden mystery are we are we if you were to put a number on it uh yeah what what percent of it all do we understand are we totally how many leading zeros or any point zero point zero zero there I don't know now I think it's infinitesimal how do we think about that and what do we do about that do we continue once up at a time yeah we model through I mean we we we do our best we realize that not that nobody's perfect than we and we try to keep advancing but we don't spend time saying we're not there we're not all the way to the end some some mathematicians that that would be in office next to me when I was in the math department they would never think about anything smaller than countable infinity and and I never you know we intersected that countable infinity because I I rarely got up to countable infinity I was talking about finite stuff but but even even limiting to finite stuff which is which is which which the universe might be there's no way to really know what whether the universe is isn't isn't uh just made out of capital and uh pro uh whenever you know you want to call them quarks or whatever uh where where capillan is some funnett number all of the numbers that are comprehensible are still way smaller than most almost all funnett numbers I I got this one paper called supernatural numbers where I what I guess you probably ran into something called Knuth arrow notation did you ever run into that where anyway so you take the number I think it's like I and I called it super k with what I named it after myself but it's it's but in arrow notation it's something like ten and then four arrows in a three or something I know okay no the arrow notation if you have if you have no arrows that means multiplication xy means x times x times x times xy times if you have one arrow that means exponentiation so x1 arrow y means x to the x to the x to the x to the x to the x y times so I found out by the way that this this notation was invented by a guy in 1830 and and he was a he was a a uh one of the English nobility who who spent his time thinking about stuff like this um and and it was exactly the same concept that I that I'm that I used arrows and he used a slightly different notation but anyway this and then this acrimus function is is based on the same kind of ideas but the acrimus was 1920s but anyway we got this number ten quadruple arrow three so so that's that says well we take you know we take ten to the ten of the ten to the ten to the ten to the ten of the ten of the how many times do we do that oh ten double arrow two times I mean how tall is that stack but but then we do that again because that was only ten triple or quadruple or two quadruple or three maybe a pretty large number it gets way beyond comprehension okay and and and so but it's so small compared to what finite numbers really are because I want to using four arrows and you know ten and a three I mean let's have that let's have that many number arrows I mean the boundary between infinite and finite is in comprehensible for us humans anyway infinity is a good useful way for us to think about extremely large extremely large thing and and and we can we can manipulate it but but we can never know that the universe is actually and and we're near that so it just so I realized how little we know but but but but but we we we found an awful lot of of of the things that are too hard for any one person to know even with even in our small universe yeah and we did pretty good so when you go up to heaven and meet God and get to ask one question that would get answered what question would you ask what kind of browser do you have up here I don't think it's meaningful that's a question but I certainly hope we had good internet okay and that note that's that's beautiful actually Don thank you so much it was a huge honor to talk to you I really did well thanks for the gamut of questions yeah it was fun thanks for listening to this conversation with Donald Knuth and thank you to our presenting sponsor cash app don't want it use code Lex podcast you'll get ten dollars and ten dollars will go to first a STEM education nonprofit that inspires hundreds of thousands of young minds to learn and to dream of engineering our future if you enjoy this podcast subscribe on youtube give it five stars and apple podcasts support on patreon or connect with me on twitter and now let me leave you with some words of wisdom from Donald Knuth we should continually be striving to transform every art into a science and in the process we advance the art thank you for listening and hope to see you next time you